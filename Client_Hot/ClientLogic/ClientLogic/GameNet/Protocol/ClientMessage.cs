// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_message.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Msg.ClientMessage {

  #region Enums
  public enum E_ERR {
    None = 0,
    /// <summary>
    /// 内部错误
    /// </summary>
    Internal = -1,
    /// <summary>
    /// 账号或密码错误
    /// </summary>
    PlayerAccOrPasswordError = -2,
    /// <summary>
    /// 玩家不存在
    /// </summary>
    PlayerNotExist = -3,
    /// <summary>
    /// 玩家已经登陆
    /// </summary>
    PlayerAlreadyLogined = -4,
    /// <summary>
    /// 玩家在其他地方登陆
    /// </summary>
    PlayerOtherPlaceLogin = -5,
    /// <summary>
    /// 令牌错误
    /// </summary>
    PlayerTokenError = -6,
    /// <summary>
    /// 选择服务器不存在
    /// </summary>
    PlayerSelectServerNotFound = -7,
    /// <summary>
    /// 玩家已经选择过服务器
    /// </summary>
    PlayerAlreadySelectedServer = -8,
    /// <summary>
    /// 玩家已离线
    /// </summary>
    PlayerIsOffline = -9,
    /// <summary>
    /// 发送消息太频繁
    /// </summary>
    PlayerSendTooFrequently = -10,
    /// <summary>
    /// 金币不足
    /// </summary>
    PlayerGoldNotEnough = -11,
    /// <summary>
    /// 钻石不足
    /// </summary>
    PlayerDiamondNotEnough = -12,
    /// <summary>
    /// 昵称过长
    /// </summary>
    PlayerNameTooLong = -13,
    /// <summary>
    /// 头像配置不存在
    /// </summary>
    PlayerHeadTableDataNotFound = -14,
    /// <summary>
    /// 没有该头像
    /// </summary>
    PlayerNoSuchHead = -15,
    /// <summary>
    /// 战斗
    /// </summary>
    PlayerSetAttackMembersFailed = -10000,
    /// <summary>
    /// 设置防守阵营失败
    /// </summary>
    PlayerSetDefenseMembersFailed = -10001,
    /// <summary>
    /// 对方正在战斗
    /// </summary>
    PlayerIsDefensing = -10002,
    /// <summary>
    /// 战斗录像不存在
    /// </summary>
    PlayerBattleRecordNotFound = -10003,
    /// <summary>
    /// 不能删除录像
    /// </summary>
    PlayerBattleRecordForbiddenDelete = -10004,
    /// <summary>
    /// 录像数据错误
    /// </summary>
    PlayerBattleRecordDataInvalid = -10005,
    /// <summary>
    /// 阵型为空
    /// </summary>
    PlayerTeamMembersIsEmpty = -10006,
    /// <summary>
    /// 阵型非法
    /// </summary>
    PlayerTeamTypeInvalid = -10007,
    /// <summary>
    /// PVP阵型人数过多
    /// </summary>
    PlayerPvpTeamMembersTooMore = -10008,
    /// <summary>
    /// 物品装备
    /// </summary>
    PlayerItemNotFound = -11000,
    /// <summary>
    /// 物品配置找不到
    /// </summary>
    PlayerItemTableIdNotFound = -11001,
    /// <summary>
    /// 物品数量不足
    /// </summary>
    PlayerItemNumNotEnough = -11002,
    /// <summary>
    /// 物品类型不匹配
    /// </summary>
    PlayerItemTypeNotMatch = -11003,
    /// <summary>
    /// 装备位置为空
    /// </summary>
    PlayerEquipSlotEmpty = -11004,
    /// <summary>
    /// 装备类型错误
    /// </summary>
    PlayerEquipTypeInvalid = -11005,
    /// <summary>
    /// 不能合成物品
    /// </summary>
    PlayerItemFusionFailed = -11006,
    /// <summary>
    /// 合成碎片数量不足
    /// </summary>
    PlayerItemCountNotEnoughToFusion = -11007,
    /// <summary>
    /// 物品升级类型非法
    /// </summary>
    PlayerItemUpgradeTypeInvalid = -11008,
    /// <summary>
    /// 物品升级资源不足
    /// </summary>
    PlayerItemUpgradeResNotEnough = -11009,
    /// <summary>
    /// 物品升级槽中无物品
    /// </summary>
    PlayerItemUpgradeSlotNoItem = -11010,
    /// <summary>
    /// 物品升级数据找不到
    /// </summary>
    PlayerItemUpgradeDataNotFound = -11011,
    /// <summary>
    /// 物品升级失败
    /// </summary>
    PlayerItemUpgradeFailed = -11012,
    /// <summary>
    /// 装备一键合成材料不足
    /// </summary>
    PlayerItemOneKeyUpgradeNotEnoughMaterial = -11013,
    /// <summary>
    /// 角色
    /// </summary>
    PlayerRoleNotFound = -12000,
    /// <summary>
    /// 角色配置找不到
    /// </summary>
    PlayerRoleTableIdNotFound = -12001,
    /// <summary>
    /// 角色升级数据不存在
    /// </summary>
    PlayerRoleLevelDataNotFound = -12002,
    /// <summary>
    /// 角色等级已经最大
    /// </summary>
    PlayerRoleLevelIsMax = -12003,
    /// <summary>
    /// 角色品阶已经最大
    /// </summary>
    PlayerRoleRankIsMax = -12004,
    /// <summary>
    /// 角色品阶升级数据不存在
    /// </summary>
    PlayerRoleRankupDataNotFound = -12005,
    /// <summary>
    /// 角色在阵容中，不能分解
    /// </summary>
    PlayerRoleInTeamCantDecompose = -12006,
    /// <summary>
    /// 角色合成失败
    /// </summary>
    PlayerRoleFusionFailed = -12007,
    /// <summary>
    /// 合成角色需要的角色不存在
    /// </summary>
    PlayerFusionNeedRoleNotFound = -12008,
    /// <summary>
    /// 合成需要的角色不合法
    /// </summary>
    PlayerFusionRoleInvalid = -12009,
    /// <summary>
    /// 角色合成配置数据不存在
    /// </summary>
    PlayerFusionRoleTableDataNotFound = -12010,
    /// <summary>
    /// 角色合成主角色不存在
    /// </summary>
    PlayerFusionMainRoleNotFound = -12011,
    /// <summary>
    /// 角色合成材料数量不足
    /// </summary>
    PlayerFusionRoleMaterialNotEnough = -12012,
    /// <summary>
    /// 角色合成主卡类型非法
    /// </summary>
    PlayerFusionMainCardInvalid = -12013,
    /// <summary>
    /// 角色合成需要的资源不足
    /// </summary>
    PlayerFusionNeedResourceNotEnough = -12014,
    /// <summary>
    /// 角色被锁定
    /// </summary>
    PlayerRoleIsLocked = -12015,
    /// <summary>
    /// 角色背包没有足够的空位
    /// </summary>
    PlayerRoleInventoryNotEnoughSpace = -12016,
    /// <summary>
    /// 角色左槽掉落失败
    /// </summary>
    PlayerRoleLeftSlotDropFailed = -12017,
    /// <summary>
    /// 角色左槽开启等级不够
    /// </summary>
    PlayerRoleOpenLeftslotLevelNotEnough = -12018,
    /// <summary>
    /// 角色左槽已激活
    /// </summary>
    PlayerRoleLeftSlotAlreadyOpened = -12019,
    /// <summary>
    /// 关卡
    /// </summary>
    PlayerStageTableDataNotFound = -13000,
    /// <summary>
    /// 已打过该战役
    /// </summary>
    PlayerAlreadyFightCampaign = -13001,
    /// <summary>
    /// 只能打下一战役
    /// </summary>
    PlayerCampaignMustPlAyNext = -13002,
    /// <summary>
    /// 没有战役数据
    /// </summary>
    PlayerNotFoundCampaignTableData = -13003,
    /// <summary>
    /// 不能打该战役
    /// </summary>
    PlayerCantFightTheCampaign = -13004,
    /// <summary>
    /// 关卡数据错误
    /// </summary>
    PlayerStageTableDataInvalid = -13005,
    /// <summary>
    /// 关卡人数限制
    /// </summary>
    PlayerStageRoleNumLimited = -13006,
    /// <summary>
    /// 邮件
    /// </summary>
    PlayerMailOverMaxCount = -14000,
    /// <summary>
    /// 邮件不存在
    /// </summary>
    PlayerMailNotFound = -14001,
    /// <summary>
    /// 邮件没有附加物品
    /// </summary>
    PlayerMailNoAttachedItem = -14002,
    /// <summary>
    /// 发送邮件失败
    /// </summary>
    PlayerMailSendFailed = -14003,
    /// <summary>
    /// 邮件接受者不存在
    /// </summary>
    PlayerMailReceiverNotFound = -14004,
    /// <summary>
    /// 个人邮件发送冷却中
    /// </summary>
    PlayerMailPlayerIsCooldown = -14005,
    /// <summary>
    /// 邮件标题太长
    /// </summary>
    PlayerMailTitleTooLong = -14006,
    /// <summary>
    /// 邮件内容太长
    /// </summary>
    PlayerMailContentTooLong = -14007,
    /// <summary>
    /// 天赋
    /// </summary>
    PlayerTalentNotFound = -15000,
    /// <summary>
    /// 天赋等级已满
    /// </summary>
    PlayerTalentLevelIsMax = -15001,
    /// <summary>
    /// 天赋升级没有足够资源
    /// </summary>
    PlayerTalentUpNotEnoughResource = -15002,
    /// <summary>
    /// 天赋升级需要前置天赋
    /// </summary>
    PlayerTalentUpNeedPrevTalent = -15003,
    /// <summary>
    /// 爬塔
    /// </summary>
    PlayerTowerAlreadyFighted = -16000,
    /// <summary>
    /// 不存在的塔层
    /// </summary>
    PlayerTowerNotFound = -16001,
    /// <summary>
    /// 爬塔体力不够
    /// </summary>
    PlayerTowerNotEnoughStamina = -16002,
    /// <summary>
    /// 爬塔录像不存在
    /// </summary>
    PlayerTowerFightRecordNotFound = -16003,
    /// <summary>
    /// 爬塔已达最高层
    /// </summary>
    PlayerTowerAlreadyHighest = -16004,
    /// <summary>
    /// 不能打该层塔
    /// </summary>
    PlayerTowerCantFight = -16005,
    /// <summary>
    /// 点金手
    /// </summary>
    PlayerGoldhandDataNotFound = -17000,
    /// <summary>
    /// 点金手刷新CD中
    /// </summary>
    PlayerGoldhandRefreshIsCoolingdown = -17001,
    /// <summary>
    /// 商店
    /// </summary>
    PlayerShopTableDataNotFound = -18000,
    /// <summary>
    /// 商品数据找不到
    /// </summary>
    PlayerShopItemTableDataNotFound = -18001,
    /// <summary>
    /// 手动刷新资源不足
    /// </summary>
    PlayerShopRefreshResourceNotEnough = -18002,
    /// <summary>
    /// 商店无该商品			
    /// </summary>
    PlayerShopItemNotFound = -18003,
    /// <summary>
    /// 商店商品数量不足
    /// </summary>
    PlayerShopItemNumNotEnough = -18004,
    /// <summary>
    /// 商店购买商品资源不足
    /// </summary>
    PlayerShopItemBuyResourceNotEnough = -18005,
    /// <summary>
    /// 商品随机数据配置错误
    /// </summary>
    PlayerShopItemRandomDataInvalid = -18006,
    /// <summary>
    /// 公会商店需要先加入公会
    /// </summary>
    PlayerShopGuildNotJoin = -18007,
    /// <summary>
    /// 竞技场
    /// </summary>
    PlayerArenaOnlyFightMatchedPlayer = -19000,
    /// <summary>
    /// 匹配玩家失败
    /// </summary>
    PlayerArenaMatchPlayerFailed = -19001,
    /// <summary>
    /// 竞技场正在重置
    /// </summary>
    PlayerArenaIsReseting = -19002,
    /// <summary>
    /// 竞技场赛季正在重置
    /// </summary>
    PlayerArenaSeasonIsReseting = -19003,
    /// <summary>
    /// 竞技场门票不足
    /// </summary>
    PlayerArenaTicketsNotEnough = -19004,
    /// <summary>
    /// 排行榜
    /// </summary>
    RankListTypeInvalid = -20000,
    /// <summary>
    /// 活动副本
    /// </summary>
    PlayerActiveStagePurchaseNumOut = -20100,
    /// <summary>
    /// 活动副本挑战次数最大
    /// </summary>
    PlayerActiveStageChallengeNumMax = -20101,
    /// <summary>
    /// 活动副本玩家等级不够
    /// </summary>
    PlayerActiveStageLevelNotEnough = -20102,
    /// <summary>
    /// 好友
    /// </summary>
    PlayerFriendAlreadyAdd = -21000,
    /// <summary>
    /// 已经申请了好友
    /// </summary>
    PlayerFriendAlreadyAsked = -21001,
    /// <summary>
    /// 玩家不再申请列表中
    /// </summary>
    PlayerFriendPlayerNoInAskList = -21002,
    /// <summary>
    /// 没有该好友
    /// </summary>
    PlayerFriendNotFound = -21003,
    /// <summary>
    /// 好友BOSS配置数据找不到
    /// </summary>
    PlayerFriendBossDataNotFound = -21004,
    /// <summary>
    /// 好友BOSS刷新还在冷却中
    /// </summary>
    PlayerFriendBossRefreshIsCooldown = -21005,
    /// <summary>
    /// 好友BOSS正被挑战
    /// </summary>
    PlayerFriendBossIsFighting = -21006,
    /// <summary>
    /// 好友BOSS已经结束
    /// </summary>
    PlayerFriendBossIsFinished = -21007,
    /// <summary>
    /// 好友BOSS不存在
    /// </summary>
    PlayerFriendBossNotFound = -21008,
    /// <summary>
    /// 没有好友
    /// </summary>
    PlayerFriendNone = -21009,
    /// <summary>
    /// 好友BOSS体力不足
    /// </summary>
    PlayerFriendBossStaminaNotEnough = -21010,
    /// <summary>
    /// 任务
    /// </summary>
    PlayerTaskNotFound = -22000,
    /// <summary>
    /// 任务未完成
    /// </summary>
    PlayerTaskNotComplete = -22001,
    /// <summary>
    /// 任务未领奖
    /// </summary>
    PlayerTaskNotReward = -22002,
    /// <summary>
    /// 任务已领奖
    /// </summary>
    PlayerTaskAlreadyRewarded = -22003,
    /// <summary>
    /// 前置任务未完成
    /// </summary>
    PlayerTaskPrevNotComplete = -22004,
    /// <summary>
    /// 探索
    /// </summary>
    PlayerExploreTableDataNotFound = -23000,
    /// <summary>
    /// 探索任务选择角色不能重复
    /// </summary>
    PlayerExploreSelRolesCantSame = -23001,
    /// <summary>
    /// 探索任务玩家数据找不到
    /// </summary>
    PlayerExploreUserDataNotFound = -23002,
    /// <summary>
    /// 探索任务已经开始
    /// </summary>
    PlayerExploreAlreadyStarted = -23003,
    /// <summary>
    /// 探索任务选择角色数量不足
    /// </summary>
    PlayerExploreSelRoleNotEnough = -23004,
    /// <summary>
    /// 探索任务选择角色星级不足
    /// </summary>
    PlayerExploreSelRoleStarNotEnough = -23005,
    /// <summary>
    /// 探索任务选择角色阵营非法
    /// </summary>
    PlayerExploreSelRoleCampInvalid = -23006,
    /// <summary>
    /// 探索任务选择角色类型非法
    /// </summary>
    PlayerExploreSelRoleTypeInvalid = -23007,
    /// <summary>
    /// 探索任务已经开始不能解锁
    /// </summary>
    PlayerExploreCantUnlockIfStarted = -23008,
    /// <summary>
    /// 探索任务未完成
    /// </summary>
    PlayerExploreIsIncomplete = -23009,
    /// <summary>
    /// 探索任务的状态不能击打BOSS
    /// </summary>
    PlayerExploreNoFightBossState = -23010,
    /// <summary>
    /// 探索任务不是进行状态
    /// </summary>
    PlayerExploreStateNotStarted = -23011,
    /// <summary>
    /// 公会
    /// </summary>
    PlayerGuildAlreadyCreatedOrJoined = -24000,
    /// <summary>
    /// 创建公会数据库错误
    /// </summary>
    PlayerGuildCreatedDbError = -24001,
    /// <summary>
    /// 没有足够的等级开启
    /// </summary>
    PlayerGuildNotEnoughLevelToOpen = -24002,
    /// <summary>
    /// 玩家还未加入公会
    /// </summary>
    PlayerGuildNotJoined = -24003,
    /// <summary>
    /// 玩家公会数据未找到
    /// </summary>
    PlayerGuildDataNotFound = -24004,
    /// <summary>
    /// 无公会可推荐
    /// </summary>
    PlayerGuildNoGuildsToRecommend = -24005,
    /// <summary>
    /// 公会操作权限不足
    /// </summary>
    PlayerGuildCantGetWithAuthority = -24006,
    /// <summary>
    /// 公会处于已解散或正在解散状态
    /// </summary>
    PlayerGuildStateIsDeletedOrDeleting = -24007,
    /// <summary>
    /// 公会不处于正在解散状态
    /// </summary>
    PlayerGuildStateIsNotDeleting = -24008,
    /// <summary>
    /// 加入公会需要等待离开上个公会的CD时间
    /// </summary>
    PlayerGuildJoinNeedCooldown = -24009,
    /// <summary>
    /// 已经是公会成员
    /// </summary>
    PlayerGuildIsAlreadyMember = -24010,
    /// <summary>
    /// 公会人数限制
    /// </summary>
    PlayerGuildMemberNumLimited = -24011,
    /// <summary>
    /// 公会升级配置数据找不到
    /// </summary>
    PlayerGuildLevelupTableDataNotFound = -24012,
    /// <summary>
    /// 会长不能退出公会
    /// </summary>
    PlayerGuildPresidentCantQuit = -24013,
    /// <summary>
    /// 签名还在冷却中
    /// </summary>
    PlayerGuildSignInIsCooldown = -24014,
    /// <summary>
    /// 只有会长有权限任免官员
    /// </summary>
    PlayerGuildSetOfficerOnlyPresident = -24015,
    /// <summary>
    /// 不能对自己转让会长
    /// </summary>
    PlayerGuildCantChangePresidentSelf = -24016,
    /// <summary>
    /// 公会招募正在冷却
    /// </summary>
    PlayerGuildRecruitIsCooldown = -24017,
    /// <summary>
    /// 公会捐赠配置数据找不到
    /// </summary>
    PlayerGuildDonateTableDatNotFound = -24018,
    /// <summary>
    /// 公会已经请求过捐赠
    /// </summary>
    PlayerGuildAlreadyAskedDonate = -24019,
    /// <summary>
    /// 不能对自己请求捐赠
    /// </summary>
    PlayerGuildCantAskDonateToSelf = -24020,
    /// <summary>
    /// 公会玩家未请求过捐赠
    /// </summary>
    PlayerGuildNotAskDonate = -24021,
    /// <summary>
    /// 公会捐赠没有足够积分
    /// </summary>
    PlayerGuildNotEnoughDonateScore = -24022,
    /// <summary>
    /// 玩家未申请加入公会
    /// </summary>
    PlayerGuildNotAskJoin = -24023,
    /// <summary>
    /// 公会名太长
    /// </summary>
    PlayerGuildNameTooLong = -24024,
    /// <summary>
    /// 公会名已被使用
    /// </summary>
    PlayerGuildNameIsUsed = -24025,
    /// <summary>
    /// 公会标志不存在
    /// </summary>
    PlayerGuildLogoInvalid = -24026,
    /// <summary>
    /// 公会改名失败
    /// </summary>
    PlayerGuildChangeNameFailed = -24027,
    /// <summary>
    /// 公会副本
    /// </summary>
    PlayerGuildStageTableDataNotFound = -25000,
    /// <summary>
    /// 公会副本玩家已是死亡状态
    /// </summary>
    PlayerGuildStageStateIsDead = -25001,
    /// <summary>
    /// 公会额外数据找不到
    /// </summary>
    PlayerGuildStageExDataNotFound = -25002,
    /// <summary>
    /// 公会副本有玩家正在挑战
    /// </summary>
    PlayerGuildStageIsFighting = -25003,
    /// <summary>
    /// 公会副本不能挑战
    /// </summary>
    PlayerGuildStageCantFighting = -25004,
    /// <summary>
    /// 公会副本没死亡不能复活
    /// </summary>
    PlayerGuildStageCantRespawnNoDead = -25005,
    /// <summary>
    /// 公会副本复活次数已用满
    /// </summary>
    PlayerGuildStageRespawnNumUsedOut = -25006,
    /// <summary>
    /// 公会副本重置冷却中
    /// </summary>
    PlayerGuildStageResetIsCooldown = -25007,
    /// <summary>
    /// 公会副本不能获得伤害排行榜
    /// </summary>
    PlayerGuildStageCantGetDmgRanklist = -25008,
    /// <summary>
    /// 聊天
    /// </summary>
    ChatSendMsgCoolingDown = -26000,
    /// <summary>
    /// 聊天消息超长
    /// </summary>
    ChatSendMsgBytesTooLong = -26001,
    /// <summary>
    /// 聊天内部错误没有空闲的节点
    /// </summary>
    ChatCantSendWithNoFree = -26002,
    /// <summary>
    /// 聊天拉取消息还在冷却中
    /// </summary>
    ChatPullCoolingDown = -26003,
    /// <summary>
    /// 无法获得聊天频道
    /// </summary>
    ChatChannelCantGet = -26004,
    /// <summary>
    /// 充值
    /// </summary>
    ChargeOrderDataEmpty = -200000,
    ChargeOrderDataInvalid = -200001,
    ChargeOrderSignatureInvalid = -200002,
    ChargeOrderSnEmpty = -200003,
    ChargeOrderSnAlredyUsed = -200004,
    ChargeOrderVerifyFailed = -200005,
  }

  /// <summary>
  /// 红点状态
  /// </summary>
  public enum MODULE {
    StateNone = 0,
    /// <summary>
    /// 挂机随机收益
    /// </summary>
    StateHangupRandomIncome = 1,
    /// <summary>
    /// 新邮件
    /// </summary>
    StateNewMail = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// 红点提示通知
  /// </summary>
  public sealed class S2CStateNotify : pb::IMessage {
    private static readonly pb::MessageParser<S2CStateNotify> _parser = new pb::MessageParser<S2CStateNotify>(() => new S2CStateNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CStateNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "States" field.</summary>
    public const int StatesFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_states_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> states_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 状态更新
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> States {
      get { return states_; }
    }

    /// <summary>Field number for the "CancelStates" field.</summary>
    public const int CancelStatesFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_cancelStates_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> cancelStates_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 状态取消
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CancelStates {
      get { return cancelStates_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      states_.WriteTo(output, _repeated_states_codec);
      cancelStates_.WriteTo(output, _repeated_cancelStates_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += states_.CalculateSize(_repeated_states_codec);
      size += cancelStates_.CalculateSize(_repeated_cancelStates_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            states_.AddEntriesFrom(input, _repeated_states_codec);
            break;
          }
          case 18:
          case 16: {
            cancelStates_.AddEntriesFrom(input, _repeated_cancelStates_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 心跳
  /// </summary>
  public sealed class C2SHeartbeat : pb::IMessage {
    private static readonly pb::MessageParser<C2SHeartbeat> _parser = new pb::MessageParser<C2SHeartbeat>(() => new C2SHeartbeat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SHeartbeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class S2CHeartbeat : pb::IMessage {
    private static readonly pb::MessageParser<S2CHeartbeat> _parser = new pb::MessageParser<S2CHeartbeat>(() => new S2CHeartbeat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CHeartbeat> Parser { get { return _parser; } }

    /// <summary>Field number for the "SysTime" field.</summary>
    public const int SysTimeFieldNumber = 1;
    private int sysTime_;
    /// <summary>
    /// 系统标准时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SysTime {
      get { return sysTime_; }
      set {
        sysTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SysTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SysTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SysTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SysTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SysTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 请求数据同步
  /// </summary>
  public sealed class C2SDataSyncRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SDataSyncRequest> _parser = new pb::MessageParser<C2SDataSyncRequest>(() => new C2SDataSyncRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SDataSyncRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "Base" field.</summary>
    public const int BaseFieldNumber = 1;
    private bool base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "Items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private bool items_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Items {
      get { return items_; }
      set {
        items_ = value;
      }
    }

    /// <summary>Field number for the "Roles" field.</summary>
    public const int RolesFieldNumber = 3;
    private bool roles_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Roles {
      get { return roles_; }
      set {
        roles_ = value;
      }
    }

    /// <summary>Field number for the "Teams" field.</summary>
    public const int TeamsFieldNumber = 4;
    private bool teams_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Teams {
      get { return teams_; }
      set {
        teams_ = value;
      }
    }

    /// <summary>Field number for the "Campaigns" field.</summary>
    public const int CampaignsFieldNumber = 5;
    private bool campaigns_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Campaigns {
      get { return campaigns_; }
      set {
        campaigns_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Base != false) {
        output.WriteRawTag(8);
        output.WriteBool(Base);
      }
      if (Items != false) {
        output.WriteRawTag(16);
        output.WriteBool(Items);
      }
      if (Roles != false) {
        output.WriteRawTag(24);
        output.WriteBool(Roles);
      }
      if (Teams != false) {
        output.WriteRawTag(32);
        output.WriteBool(Teams);
      }
      if (Campaigns != false) {
        output.WriteRawTag(40);
        output.WriteBool(Campaigns);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Base != false) {
        size += 1 + 1;
      }
      if (Items != false) {
        size += 1 + 1;
      }
      if (Roles != false) {
        size += 1 + 1;
      }
      if (Teams != false) {
        size += 1 + 1;
      }
      if (Campaigns != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Base = input.ReadBool();
            break;
          }
          case 16: {
            Items = input.ReadBool();
            break;
          }
          case 24: {
            Roles = input.ReadBool();
            break;
          }
          case 32: {
            Teams = input.ReadBool();
            break;
          }
          case 40: {
            Campaigns = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 测试用消息
  /// </summary>
  public sealed class C2S_TEST_COMMAND : pb::IMessage {
    private static readonly pb::MessageParser<C2S_TEST_COMMAND> _parser = new pb::MessageParser<C2S_TEST_COMMAND>(() => new C2S_TEST_COMMAND());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_TEST_COMMAND> Parser { get { return _parser; } }

    /// <summary>Field number for the "cmd" field.</summary>
    public const int CmdFieldNumber = 1;
    private string cmd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cmd {
      get { return cmd_; }
      set {
        cmd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "args" field.</summary>
    public const int ArgsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_args_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> args_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Args {
      get { return args_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cmd.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Cmd);
      }
      args_.WriteTo(output, _repeated_args_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cmd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cmd);
      }
      size += args_.CalculateSize(_repeated_args_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Cmd = input.ReadString();
            break;
          }
          case 18: {
            args_.AddEntriesFrom(input, _repeated_args_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 物品
  /// </summary>
  public sealed class ItemInfo : pb::IMessage {
    private static readonly pb::MessageParser<ItemInfo> _parser = new pb::MessageParser<ItemInfo>(() => new ItemInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "ItemCfgId" field.</summary>
    public const int ItemCfgIdFieldNumber = 1;
    private int itemCfgId_;
    /// <summary>
    /// 配置物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemCfgId {
      get { return itemCfgId_; }
      set {
        itemCfgId_ = value;
      }
    }

    /// <summary>Field number for the "ItemNum" field.</summary>
    public const int ItemNumFieldNumber = 2;
    private int itemNum_;
    /// <summary>
    /// 物品数目
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemNum {
      get { return itemNum_; }
      set {
        itemNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemCfgId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemCfgId);
      }
      if (ItemNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemCfgId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemCfgId);
      }
      if (ItemNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemCfgId = input.ReadInt32();
            break;
          }
          case 16: {
            ItemNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 登陆
  /// </summary>
  public sealed class C2SLoginRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SLoginRequest> _parser = new pb::MessageParser<C2SLoginRequest>(() => new C2SLoginRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SLoginRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "Acc" field.</summary>
    public const int AccFieldNumber = 1;
    private string acc_ = "";
    /// <summary>
    /// 账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Acc {
      get { return acc_; }
      set {
        acc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    /// <summary>
    /// 密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Channel" field.</summary>
    public const int ChannelFieldNumber = 3;
    private string channel_ = "";
    /// <summary>
    /// 渠道
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Acc.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Acc);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (Channel.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Channel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Acc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Acc);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Acc = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 26: {
            Channel = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器信息
  /// </summary>
  public sealed class ServerInfo : pb::IMessage {
    private static readonly pb::MessageParser<ServerInfo> _parser = new pb::MessageParser<ServerInfo>(() => new ServerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IP" field.</summary>
    public const int IPFieldNumber = 3;
    private string iP_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IP {
      get { return iP_; }
      set {
        iP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (IP.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(IP);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (IP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IP);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            IP = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 登陆返回
  /// </summary>
  public sealed class S2CLoginResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CLoginResponse> _parser = new pb::MessageParser<S2CLoginResponse>(() => new S2CLoginResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CLoginResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "Acc" field.</summary>
    public const int AccFieldNumber = 1;
    private string acc_ = "";
    /// <summary>
    /// 账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Acc {
      get { return acc_; }
      set {
        acc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    /// <summary>
    /// 令牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Servers" field.</summary>
    public const int ServersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.ServerInfo> _repeated_servers_codec
        = pb::FieldCodec.ForMessage(26, global::Msg.ClientMessage.ServerInfo.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.ServerInfo> servers_ = new pbc::RepeatedField<global::Msg.ClientMessage.ServerInfo>();
    /// <summary>
    /// 服务器列表, key是服务器ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.ServerInfo> Servers {
      get { return servers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Acc.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Acc);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      servers_.WriteTo(output, _repeated_servers_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Acc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Acc);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      size += servers_.CalculateSize(_repeated_servers_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Acc = input.ReadString();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
          case 26: {
            servers_.AddEntriesFrom(input, _repeated_servers_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 其它地方登录
  /// </summary>
  public sealed class S2COtherPlaceLogin : pb::IMessage {
    private static readonly pb::MessageParser<S2COtherPlaceLogin> _parser = new pb::MessageParser<S2COtherPlaceLogin>(() => new S2COtherPlaceLogin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2COtherPlaceLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 选择服务器
  /// </summary>
  public sealed class C2SSelectServerRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SSelectServerRequest> _parser = new pb::MessageParser<C2SSelectServerRequest>(() => new C2SSelectServerRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SSelectServerRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "Acc" field.</summary>
    public const int AccFieldNumber = 1;
    private string acc_ = "";
    /// <summary>
    /// 账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Acc {
      get { return acc_; }
      set {
        acc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    /// <summary>
    /// 令牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ServerId" field.</summary>
    public const int ServerIdFieldNumber = 3;
    private int serverId_;
    /// <summary>
    /// 服务器ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Acc.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Acc);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (ServerId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ServerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Acc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Acc);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Acc = input.ReadString();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
          case 24: {
            ServerId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 选择服务器返回
  /// </summary>
  public sealed class S2CSelectServerResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CSelectServerResponse> _parser = new pb::MessageParser<S2CSelectServerResponse>(() => new S2CSelectServerResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CSelectServerResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "Acc" field.</summary>
    public const int AccFieldNumber = 1;
    private string acc_ = "";
    /// <summary>
    /// 账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Acc {
      get { return acc_; }
      set {
        acc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    /// <summary>
    /// 进入游戏服务器的令牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IP" field.</summary>
    public const int IPFieldNumber = 3;
    private string iP_ = "";
    /// <summary>
    /// 游戏服务器地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IP {
      get { return iP_; }
      set {
        iP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Acc.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Acc);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (IP.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(IP);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Acc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Acc);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (IP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IP);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Acc = input.ReadString();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
          case 26: {
            IP = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class C2S_MSG_DATA : pb::IMessage {
    private static readonly pb::MessageParser<C2S_MSG_DATA> _parser = new pb::MessageParser<C2S_MSG_DATA>(() => new C2S_MSG_DATA());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_MSG_DATA> Parser { get { return _parser; } }

    /// <summary>Field number for the "PlayerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private int playerId_;
    /// <summary>
    /// 玩家ID		
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "Token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    /// <summary>
    /// 令牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MsgCode" field.</summary>
    public const int MsgCodeFieldNumber = 3;
    private int msgCode_;
    /// <summary>
    /// 消息ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MsgCode {
      get { return msgCode_; }
      set {
        msgCode_ = value;
      }
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 4;
    private pb::ByteString data_ = pb::ByteString.Empty;
    /// <summary>
    /// 消息数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (MsgCode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MsgCode);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (MsgCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MsgCode);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
          case 24: {
            MsgCode = input.ReadInt32();
            break;
          }
          case 34: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class S2C_MSG_DATA : pb::IMessage {
    private static readonly pb::MessageParser<S2C_MSG_DATA> _parser = new pb::MessageParser<S2C_MSG_DATA>(() => new S2C_MSG_DATA());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_MSG_DATA> Parser { get { return _parser; } }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private int errorCode_;
    /// <summary>
    /// 错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "ErrorMsg" field.</summary>
    public const int ErrorMsgFieldNumber = 2;
    private string errorMsg_ = "";
    /// <summary>
    /// 错误字符串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMsg {
      get { return errorMsg_; }
      set {
        errorMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 3;
    private pb::ByteString data_ = pb::ByteString.Empty;
    /// <summary>
    /// 数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrMsgNum" field.</summary>
    public const int CurrMsgNumFieldNumber = 4;
    private int currMsgNum_;
    /// <summary>
    /// 当前的消息序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrMsgNum {
      get { return currMsgNum_; }
      set {
        currMsgNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrorCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (ErrorMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ErrorMsg);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Data);
      }
      if (CurrMsgNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CurrMsgNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (ErrorMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMsg);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (CurrMsgNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrMsgNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 18: {
            ErrorMsg = input.ReadString();
            break;
          }
          case 26: {
            Data = input.ReadBytes();
            break;
          }
          case 32: {
            CurrMsgNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 进入游戏服务器
  /// </summary>
  public sealed class C2SEnterGameRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SEnterGameRequest> _parser = new pb::MessageParser<C2SEnterGameRequest>(() => new C2SEnterGameRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SEnterGameRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "Acc" field.</summary>
    public const int AccFieldNumber = 1;
    private string acc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Acc {
      get { return acc_; }
      set {
        acc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Acc.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Acc);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Acc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Acc);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Acc = input.ReadString();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 返回
  /// </summary>
  public sealed class S2CEnterGameResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CEnterGameResponse> _parser = new pb::MessageParser<S2CEnterGameResponse>(() => new S2CEnterGameResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CEnterGameResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "Acc" field.</summary>
    public const int AccFieldNumber = 1;
    private string acc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Acc {
      get { return acc_; }
      set {
        acc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PlayerId" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Acc.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Acc);
      }
      if (PlayerId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Acc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Acc);
      }
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Acc = input.ReadString();
            break;
          }
          case 16: {
            PlayerId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 通知客户端进入游戏服务器完成
  /// </summary>
  public sealed class S2CEnterGameCompleteNotify : pb::IMessage {
    private static readonly pb::MessageParser<S2CEnterGameCompleteNotify> _parser = new pb::MessageParser<S2CEnterGameCompleteNotify>(() => new S2CEnterGameCompleteNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CEnterGameCompleteNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 离开游戏服务器
  /// </summary>
  public sealed class C2SLeaveGameRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SLeaveGameRequest> _parser = new pb::MessageParser<C2SLeaveGameRequest>(() => new C2SLeaveGameRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SLeaveGameRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 返回
  /// </summary>
  public sealed class S2CLeaveGameResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CLeaveGameResponse> _parser = new pb::MessageParser<S2CLeaveGameResponse>(() => new S2CLeaveGameResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CLeaveGameResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 玩家信息
  /// </summary>
  public sealed class S2CPlayerInfoResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CPlayerInfoResponse> _parser = new pb::MessageParser<S2CPlayerInfoResponse>(() => new S2CPlayerInfoResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CPlayerInfoResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 1;
    private int level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Exp" field.</summary>
    public const int ExpFieldNumber = 2;
    private int exp_;
    /// <summary>
    /// 经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "Gold" field.</summary>
    public const int GoldFieldNumber = 3;
    private int gold_;
    /// <summary>
    /// 金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "Diamond" field.</summary>
    public const int DiamondFieldNumber = 4;
    private int diamond_;
    /// <summary>
    /// 钻石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Diamond {
      get { return diamond_; }
      set {
        diamond_ = value;
      }
    }

    /// <summary>Field number for the "Icon" field.</summary>
    public const int IconFieldNumber = 5;
    private int icon_;
    /// <summary>
    /// 头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Icon {
      get { return icon_; }
      set {
        icon_ = value;
      }
    }

    /// <summary>Field number for the "VipLevel" field.</summary>
    public const int VipLevelFieldNumber = 6;
    private int vipLevel_;
    /// <summary>
    /// VIP等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VipLevel {
      get { return vipLevel_; }
      set {
        vipLevel_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 7;
    private string name_ = "";
    /// <summary>
    /// 昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SysTime" field.</summary>
    public const int SysTimeFieldNumber = 8;
    private int sysTime_;
    /// <summary>
    /// 系统时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SysTime {
      get { return sysTime_; }
      set {
        sysTime_ = value;
      }
    }

    /// <summary>Field number for the "GuildId" field.</summary>
    public const int GuildIdFieldNumber = 9;
    private int guildId_;
    /// <summary>
    /// 公会ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "GuildName" field.</summary>
    public const int GuildNameFieldNumber = 10;
    private string guildName_ = "";
    /// <summary>
    /// 公会名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GuildName {
      get { return guildName_; }
      set {
        guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Exp);
      }
      if (Gold != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Gold);
      }
      if (Diamond != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Diamond);
      }
      if (Icon != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Icon);
      }
      if (VipLevel != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(VipLevel);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Name);
      }
      if (SysTime != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(SysTime);
      }
      if (GuildId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(GuildId);
      }
      if (GuildName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(GuildName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      if (Diamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Diamond);
      }
      if (Icon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Icon);
      }
      if (VipLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VipLevel);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (SysTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SysTime);
      }
      if (GuildId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuildId);
      }
      if (GuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GuildName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
          case 16: {
            Exp = input.ReadInt32();
            break;
          }
          case 24: {
            Gold = input.ReadInt32();
            break;
          }
          case 32: {
            Diamond = input.ReadInt32();
            break;
          }
          case 40: {
            Icon = input.ReadInt32();
            break;
          }
          case 48: {
            VipLevel = input.ReadInt32();
            break;
          }
          case 58: {
            Name = input.ReadString();
            break;
          }
          case 64: {
            SysTime = input.ReadInt32();
            break;
          }
          case 72: {
            GuildId = input.ReadInt32();
            break;
          }
          case 82: {
            GuildName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 改名
  /// </summary>
  public sealed class C2SPlayerChangeNameRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SPlayerChangeNameRequest> _parser = new pb::MessageParser<C2SPlayerChangeNameRequest>(() => new C2SPlayerChangeNameRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SPlayerChangeNameRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "NewName" field.</summary>
    public const int NewNameFieldNumber = 1;
    private string newName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NewName {
      get { return newName_; }
      set {
        newName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NewName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NewName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NewName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NewName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            NewName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CPlayerChangeNameResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CPlayerChangeNameResponse> _parser = new pb::MessageParser<S2CPlayerChangeNameResponse>(() => new S2CPlayerChangeNameResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CPlayerChangeNameResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "NewName" field.</summary>
    public const int NewNameFieldNumber = 1;
    private string newName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NewName {
      get { return newName_; }
      set {
        newName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NewName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NewName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NewName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NewName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            NewName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 换头像
  /// </summary>
  public sealed class C2SPlayerChangeHeadRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SPlayerChangeHeadRequest> _parser = new pb::MessageParser<C2SPlayerChangeHeadRequest>(() => new C2SPlayerChangeHeadRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SPlayerChangeHeadRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "NewHead" field.</summary>
    public const int NewHeadFieldNumber = 1;
    private int newHead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewHead {
      get { return newHead_; }
      set {
        newHead_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NewHead != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NewHead);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NewHead != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewHead);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NewHead = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CPlayerChangeHeadResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CPlayerChangeHeadResponse> _parser = new pb::MessageParser<S2CPlayerChangeHeadResponse>(() => new S2CPlayerChangeHeadResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CPlayerChangeHeadResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "NewHead" field.</summary>
    public const int NewHeadFieldNumber = 1;
    private int newHead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewHead {
      get { return newHead_; }
      set {
        newHead_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NewHead != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NewHead);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NewHead != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewHead);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NewHead = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///----------------------------------- 战斗 -----------------------------------
  /// 设置阵容
  /// </summary>
  public sealed class C2SSetTeamRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SSetTeamRequest> _parser = new pb::MessageParser<C2SSetTeamRequest>(() => new C2SSetTeamRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SSetTeamRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "TeamType" field.</summary>
    public const int TeamTypeFieldNumber = 1;
    private int teamType_;
    /// <summary>
    /// 1 pvp阵容  2 防守阵容  3 pve阵容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamType {
      get { return teamType_; }
      set {
        teamType_ = value;
      }
    }

    /// <summary>Field number for the "TeamMembers" field.</summary>
    public const int TeamMembersFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_teamMembers_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> teamMembers_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TeamMembers {
      get { return teamMembers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TeamType);
      }
      teamMembers_.WriteTo(output, _repeated_teamMembers_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamType);
      }
      size += teamMembers_.CalculateSize(_repeated_teamMembers_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamType = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            teamMembers_.AddEntriesFrom(input, _repeated_teamMembers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class S2CSetTeamResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CSetTeamResponse> _parser = new pb::MessageParser<S2CSetTeamResponse>(() => new S2CSetTeamResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CSetTeamResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "TeamType" field.</summary>
    public const int TeamTypeFieldNumber = 1;
    private int teamType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamType {
      get { return teamType_; }
      set {
        teamType_ = value;
      }
    }

    /// <summary>Field number for the "TeamMembers" field.</summary>
    public const int TeamMembersFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_teamMembers_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> teamMembers_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TeamMembers {
      get { return teamMembers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TeamType);
      }
      teamMembers_.WriteTo(output, _repeated_teamMembers_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamType);
      }
      size += teamMembers_.CalculateSize(_repeated_teamMembers_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamType = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            teamMembers_.AddEntriesFrom(input, _repeated_teamMembers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class TeamData : pb::IMessage {
    private static readonly pb::MessageParser<TeamData> _parser = new pb::MessageParser<TeamData>(() => new TeamData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamData> Parser { get { return _parser; } }

    /// <summary>Field number for the "TeamType" field.</summary>
    public const int TeamTypeFieldNumber = 1;
    private int teamType_;
    /// <summary>
    /// 阵容类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamType {
      get { return teamType_; }
      set {
        teamType_ = value;
      }
    }

    /// <summary>Field number for the "TeamMembers" field.</summary>
    public const int TeamMembersFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_teamMembers_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> teamMembers_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 阵容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TeamMembers {
      get { return teamMembers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TeamType);
      }
      teamMembers_.WriteTo(output, _repeated_teamMembers_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamType);
      }
      size += teamMembers_.CalculateSize(_repeated_teamMembers_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamType = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            teamMembers_.AddEntriesFrom(input, _repeated_teamMembers_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 阵容数据
  /// </summary>
  public sealed class S2CTeamsResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CTeamsResponse> _parser = new pb::MessageParser<S2CTeamsResponse>(() => new S2CTeamsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CTeamsResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "Teams" field.</summary>
    public const int TeamsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.TeamData> _repeated_teams_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.ClientMessage.TeamData.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.TeamData> teams_ = new pbc::RepeatedField<global::Msg.ClientMessage.TeamData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.TeamData> Teams {
      get { return teams_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      teams_.WriteTo(output, _repeated_teams_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += teams_.CalculateSize(_repeated_teams_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            teams_.AddEntriesFrom(input, _repeated_teams_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 阵营成员
  /// </summary>
  public sealed class BattleMemberItem : pb::IMessage {
    private static readonly pb::MessageParser<BattleMemberItem> _parser = new pb::MessageParser<BattleMemberItem>(() => new BattleMemberItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleMemberItem> Parser { get { return _parser; } }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 实例ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Pos" field.</summary>
    public const int PosFieldNumber = 2;
    private int pos_;
    /// <summary>
    /// 位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "HP" field.</summary>
    public const int HPFieldNumber = 3;
    private int hP_;
    /// <summary>
    /// 血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HP {
      get { return hP_; }
      set {
        hP_ = value;
      }
    }

    /// <summary>Field number for the "MaxHP" field.</summary>
    public const int MaxHPFieldNumber = 4;
    private int maxHP_;
    /// <summary>
    /// 最大血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHP {
      get { return maxHP_; }
      set {
        maxHP_ = value;
      }
    }

    /// <summary>Field number for the "Energy" field.</summary>
    public const int EnergyFieldNumber = 5;
    private int energy_;
    /// <summary>
    /// 能量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Energy {
      get { return energy_; }
      set {
        energy_ = value;
      }
    }

    /// <summary>Field number for the "TableId" field.</summary>
    public const int TableIdFieldNumber = 6;
    private int tableId_;
    /// <summary>
    /// 配置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TableId {
      get { return tableId_; }
      set {
        tableId_ = value;
      }
    }

    /// <summary>Field number for the "Rank" field.</summary>
    public const int RankFieldNumber = 7;
    private int rank_;
    /// <summary>
    /// 品阶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 8;
    private int level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Side" field.</summary>
    public const int SideFieldNumber = 9;
    private int side_;
    /// <summary>
    /// 0 左  1 右
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pos);
      }
      if (HP != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HP);
      }
      if (MaxHP != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxHP);
      }
      if (Energy != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Energy);
      }
      if (TableId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TableId);
      }
      if (Rank != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Rank);
      }
      if (Level != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Level);
      }
      if (Side != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Side);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (HP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HP);
      }
      if (MaxHP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHP);
      }
      if (Energy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Energy);
      }
      if (TableId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableId);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Side != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Side);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Pos = input.ReadInt32();
            break;
          }
          case 24: {
            HP = input.ReadInt32();
            break;
          }
          case 32: {
            MaxHP = input.ReadInt32();
            break;
          }
          case 40: {
            Energy = input.ReadInt32();
            break;
          }
          case 48: {
            TableId = input.ReadInt32();
            break;
          }
          case 56: {
            Rank = input.ReadInt32();
            break;
          }
          case 64: {
            Level = input.ReadInt32();
            break;
          }
          case 72: {
            Side = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战斗成员
  /// </summary>
  public sealed class BattleFighter : pb::IMessage {
    private static readonly pb::MessageParser<BattleFighter> _parser = new pb::MessageParser<BattleFighter>(() => new BattleFighter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleFighter> Parser { get { return _parser; } }

    /// <summary>Field number for the "Pos" field.</summary>
    public const int PosFieldNumber = 1;
    private int pos_;
    /// <summary>
    /// 位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "HP" field.</summary>
    public const int HPFieldNumber = 2;
    private int hP_;
    /// <summary>
    /// 血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HP {
      get { return hP_; }
      set {
        hP_ = value;
      }
    }

    /// <summary>Field number for the "MaxHP" field.</summary>
    public const int MaxHPFieldNumber = 3;
    private int maxHP_;
    /// <summary>
    /// 最大血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHP {
      get { return maxHP_; }
      set {
        maxHP_ = value;
      }
    }

    /// <summary>Field number for the "Damage" field.</summary>
    public const int DamageFieldNumber = 4;
    private int damage_;
    /// <summary>
    /// 伤害
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "Energy" field.</summary>
    public const int EnergyFieldNumber = 5;
    private int energy_;
    /// <summary>
    /// 能量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Energy {
      get { return energy_; }
      set {
        energy_ = value;
      }
    }

    /// <summary>Field number for the "Side" field.</summary>
    public const int SideFieldNumber = 6;
    private int side_;
    /// <summary>
    /// 0 左  1 右
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "IsCritical" field.</summary>
    public const int IsCriticalFieldNumber = 7;
    private bool isCritical_;
    /// <summary>
    /// 是否暴击
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCritical {
      get { return isCritical_; }
      set {
        isCritical_ = value;
      }
    }

    /// <summary>Field number for the "IsBlock" field.</summary>
    public const int IsBlockFieldNumber = 8;
    private bool isBlock_;
    /// <summary>
    /// 是否格挡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBlock {
      get { return isBlock_; }
      set {
        isBlock_ = value;
      }
    }

    /// <summary>Field number for the "IsAbsorb" field.</summary>
    public const int IsAbsorbFieldNumber = 9;
    private bool isAbsorb_;
    /// <summary>
    /// 是否吸收
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAbsorb {
      get { return isAbsorb_; }
      set {
        isAbsorb_ = value;
      }
    }

    /// <summary>Field number for the "AntiType" field.</summary>
    public const int AntiTypeFieldNumber = 10;
    private int antiType_;
    /// <summary>
    /// 克制类型  1 克制 0 无克制 -1 被克制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AntiType {
      get { return antiType_; }
      set {
        antiType_ = value;
      }
    }

    /// <summary>Field number for the "Shield" field.</summary>
    public const int ShieldFieldNumber = 11;
    private int shield_;
    /// <summary>
    /// 护盾
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Shield {
      get { return shield_; }
      set {
        shield_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pos);
      }
      if (HP != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HP);
      }
      if (MaxHP != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxHP);
      }
      if (Damage != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Damage);
      }
      if (Energy != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Energy);
      }
      if (Side != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Side);
      }
      if (IsCritical != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsCritical);
      }
      if (IsBlock != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsBlock);
      }
      if (IsAbsorb != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsAbsorb);
      }
      if (AntiType != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(AntiType);
      }
      if (Shield != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Shield);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (HP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HP);
      }
      if (MaxHP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHP);
      }
      if (Damage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
      }
      if (Energy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Energy);
      }
      if (Side != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Side);
      }
      if (IsCritical != false) {
        size += 1 + 1;
      }
      if (IsBlock != false) {
        size += 1 + 1;
      }
      if (IsAbsorb != false) {
        size += 1 + 1;
      }
      if (AntiType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AntiType);
      }
      if (Shield != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Shield);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Pos = input.ReadInt32();
            break;
          }
          case 16: {
            HP = input.ReadInt32();
            break;
          }
          case 24: {
            MaxHP = input.ReadInt32();
            break;
          }
          case 32: {
            Damage = input.ReadInt32();
            break;
          }
          case 40: {
            Energy = input.ReadInt32();
            break;
          }
          case 48: {
            Side = input.ReadInt32();
            break;
          }
          case 56: {
            IsCritical = input.ReadBool();
            break;
          }
          case 64: {
            IsBlock = input.ReadBool();
            break;
          }
          case 72: {
            IsAbsorb = input.ReadBool();
            break;
          }
          case 80: {
            AntiType = input.ReadInt32();
            break;
          }
          case 88: {
            Shield = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class BattleMemberBuff : pb::IMessage {
    private static readonly pb::MessageParser<BattleMemberBuff> _parser = new pb::MessageParser<BattleMemberBuff>(() => new BattleMemberBuff());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleMemberBuff> Parser { get { return _parser; } }

    /// <summary>Field number for the "Side" field.</summary>
    public const int SideFieldNumber = 1;
    private int side_;
    /// <summary>
    /// 0 左  1 右
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "Pos" field.</summary>
    public const int PosFieldNumber = 2;
    private int pos_;
    /// <summary>
    /// 位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "BuffId" field.</summary>
    public const int BuffIdFieldNumber = 3;
    private int buffId_;
    /// <summary>
    /// buff id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuffId {
      get { return buffId_; }
      set {
        buffId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Side != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Side);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pos);
      }
      if (BuffId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BuffId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Side != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Side);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (BuffId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Side = input.ReadInt32();
            break;
          }
          case 16: {
            Pos = input.ReadInt32();
            break;
          }
          case 24: {
            BuffId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战报项(一次攻击的结果)
  /// </summary>
  public sealed class BattleReportItem : pb::IMessage {
    private static readonly pb::MessageParser<BattleReportItem> _parser = new pb::MessageParser<BattleReportItem>(() => new BattleReportItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleReportItem> Parser { get { return _parser; } }

    /// <summary>Field number for the "Side" field.</summary>
    public const int SideFieldNumber = 1;
    private int side_;
    /// <summary>
    /// 0 左边向右打  1 右边向左打
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "SkillId" field.</summary>
    public const int SkillIdFieldNumber = 2;
    private int skillId_;
    /// <summary>
    /// 技能ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "User" field.</summary>
    public const int UserFieldNumber = 3;
    private global::Msg.ClientMessage.BattleFighter user_;
    /// <summary>
    /// 技能使用者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.ClientMessage.BattleFighter User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "BeHiters" field.</summary>
    public const int BeHitersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.BattleFighter> _repeated_beHiters_codec
        = pb::FieldCodec.ForMessage(34, global::Msg.ClientMessage.BattleFighter.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.BattleFighter> beHiters_ = new pbc::RepeatedField<global::Msg.ClientMessage.BattleFighter>();
    /// <summary>
    /// 技能受击者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.BattleFighter> BeHiters {
      get { return beHiters_; }
    }

    /// <summary>Field number for the "SummonNpcs" field.</summary>
    public const int SummonNpcsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.BattleMemberItem> _repeated_summonNpcs_codec
        = pb::FieldCodec.ForMessage(42, global::Msg.ClientMessage.BattleMemberItem.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.BattleMemberItem> summonNpcs_ = new pbc::RepeatedField<global::Msg.ClientMessage.BattleMemberItem>();
    /// <summary>
    /// 召唤出来的NPC
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.BattleMemberItem> SummonNpcs {
      get { return summonNpcs_; }
    }

    /// <summary>Field number for the "AddBuffs" field.</summary>
    public const int AddBuffsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.BattleMemberBuff> _repeated_addBuffs_codec
        = pb::FieldCodec.ForMessage(50, global::Msg.ClientMessage.BattleMemberBuff.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.BattleMemberBuff> addBuffs_ = new pbc::RepeatedField<global::Msg.ClientMessage.BattleMemberBuff>();
    /// <summary>
    /// 增加的BUFF
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.BattleMemberBuff> AddBuffs {
      get { return addBuffs_; }
    }

    /// <summary>Field number for the "RemoveBuffs" field.</summary>
    public const int RemoveBuffsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.BattleMemberBuff> _repeated_removeBuffs_codec
        = pb::FieldCodec.ForMessage(58, global::Msg.ClientMessage.BattleMemberBuff.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.BattleMemberBuff> removeBuffs_ = new pbc::RepeatedField<global::Msg.ClientMessage.BattleMemberBuff>();
    /// <summary>
    /// 删除的BUFF
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.BattleMemberBuff> RemoveBuffs {
      get { return removeBuffs_; }
    }

    /// <summary>Field number for the "IsSummon" field.</summary>
    public const int IsSummonFieldNumber = 8;
    private bool isSummon_;
    /// <summary>
    /// 是否召唤
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSummon {
      get { return isSummon_; }
      set {
        isSummon_ = value;
      }
    }

    /// <summary>Field number for the "HasCombo" field.</summary>
    public const int HasComboFieldNumber = 9;
    private bool hasCombo_;
    /// <summary>
    /// 是否有连续技
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCombo {
      get { return hasCombo_; }
      set {
        hasCombo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Side != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Side);
      }
      if (SkillId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SkillId);
      }
      if (user_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(User);
      }
      beHiters_.WriteTo(output, _repeated_beHiters_codec);
      summonNpcs_.WriteTo(output, _repeated_summonNpcs_codec);
      addBuffs_.WriteTo(output, _repeated_addBuffs_codec);
      removeBuffs_.WriteTo(output, _repeated_removeBuffs_codec);
      if (IsSummon != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsSummon);
      }
      if (HasCombo != false) {
        output.WriteRawTag(72);
        output.WriteBool(HasCombo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Side != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Side);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      size += beHiters_.CalculateSize(_repeated_beHiters_codec);
      size += summonNpcs_.CalculateSize(_repeated_summonNpcs_codec);
      size += addBuffs_.CalculateSize(_repeated_addBuffs_codec);
      size += removeBuffs_.CalculateSize(_repeated_removeBuffs_codec);
      if (IsSummon != false) {
        size += 1 + 1;
      }
      if (HasCombo != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Side = input.ReadInt32();
            break;
          }
          case 16: {
            SkillId = input.ReadInt32();
            break;
          }
          case 26: {
            if (user_ == null) {
              user_ = new global::Msg.ClientMessage.BattleFighter();
            }
            input.ReadMessage(user_);
            break;
          }
          case 34: {
            beHiters_.AddEntriesFrom(input, _repeated_beHiters_codec);
            break;
          }
          case 42: {
            summonNpcs_.AddEntriesFrom(input, _repeated_summonNpcs_codec);
            break;
          }
          case 50: {
            addBuffs_.AddEntriesFrom(input, _repeated_addBuffs_codec);
            break;
          }
          case 58: {
            removeBuffs_.AddEntriesFrom(input, _repeated_removeBuffs_codec);
            break;
          }
          case 64: {
            IsSummon = input.ReadBool();
            break;
          }
          case 72: {
            HasCombo = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 一回合战报
  /// </summary>
  public sealed class BattleRoundReports : pb::IMessage {
    private static readonly pb::MessageParser<BattleRoundReports> _parser = new pb::MessageParser<BattleRoundReports>(() => new BattleRoundReports());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleRoundReports> Parser { get { return _parser; } }

    /// <summary>Field number for the "RoundNum" field.</summary>
    public const int RoundNumFieldNumber = 1;
    private int roundNum_;
    /// <summary>
    /// 回合编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoundNum {
      get { return roundNum_; }
      set {
        roundNum_ = value;
      }
    }

    /// <summary>Field number for the "Reports" field.</summary>
    public const int ReportsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.BattleReportItem> _repeated_reports_codec
        = pb::FieldCodec.ForMessage(18, global::Msg.ClientMessage.BattleReportItem.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.BattleReportItem> reports_ = new pbc::RepeatedField<global::Msg.ClientMessage.BattleReportItem>();
    /// <summary>
    /// 回合战报列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.BattleReportItem> Reports {
      get { return reports_; }
    }

    /// <summary>Field number for the "RemoveBuffs" field.</summary>
    public const int RemoveBuffsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.BattleMemberBuff> _repeated_removeBuffs_codec
        = pb::FieldCodec.ForMessage(26, global::Msg.ClientMessage.BattleMemberBuff.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.BattleMemberBuff> removeBuffs_ = new pbc::RepeatedField<global::Msg.ClientMessage.BattleMemberBuff>();
    /// <summary>
    /// 回合结束的BUFF
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.BattleMemberBuff> RemoveBuffs {
      get { return removeBuffs_; }
    }

    /// <summary>Field number for the "ChangedFighters" field.</summary>
    public const int ChangedFightersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.BattleFighter> _repeated_changedFighters_codec
        = pb::FieldCodec.ForMessage(34, global::Msg.ClientMessage.BattleFighter.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.BattleFighter> changedFighters_ = new pbc::RepeatedField<global::Msg.ClientMessage.BattleFighter>();
    /// <summary>
    /// 回合结束时BUFF影响的属性变化的成员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.BattleFighter> ChangedFighters {
      get { return changedFighters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoundNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoundNum);
      }
      reports_.WriteTo(output, _repeated_reports_codec);
      removeBuffs_.WriteTo(output, _repeated_removeBuffs_codec);
      changedFighters_.WriteTo(output, _repeated_changedFighters_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoundNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundNum);
      }
      size += reports_.CalculateSize(_repeated_reports_codec);
      size += removeBuffs_.CalculateSize(_repeated_removeBuffs_codec);
      size += changedFighters_.CalculateSize(_repeated_changedFighters_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoundNum = input.ReadInt32();
            break;
          }
          case 18: {
            reports_.AddEntriesFrom(input, _repeated_reports_codec);
            break;
          }
          case 26: {
            removeBuffs_.AddEntriesFrom(input, _repeated_removeBuffs_codec);
            break;
          }
          case 34: {
            changedFighters_.AddEntriesFrom(input, _repeated_changedFighters_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 请求战斗结果
  /// </summary>
  public sealed class C2SBattleResultRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SBattleResultRequest> _parser = new pb::MessageParser<C2SBattleResultRequest>(() => new C2SBattleResultRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SBattleResultRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "AttackMembers" field.</summary>
    public const int AttackMembersFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_attackMembers_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> attackMembers_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 阵型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AttackMembers {
      get { return attackMembers_; }
    }

    /// <summary>Field number for the "FightPlayerId" field.</summary>
    public const int FightPlayerIdFieldNumber = 2;
    private int fightPlayerId_;
    /// <summary>
    /// 对方玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FightPlayerId {
      get { return fightPlayerId_; }
      set {
        fightPlayerId_ = value;
      }
    }

    /// <summary>Field number for the "CampaignId" field.</summary>
    public const int CampaignIdFieldNumber = 3;
    private int campaignId_;
    /// <summary>
    /// 战役ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CampaignId {
      get { return campaignId_; }
      set {
        campaignId_ = value;
      }
    }

    /// <summary>Field number for the "BattleType" field.</summary>
    public const int BattleTypeFieldNumber = 4;
    private int battleType_;
    /// <summary>
    /// 战斗类型   1 PVP     2 战役    3 爬塔    4 活动副本     5 好友BOSS   6 探索任务    7 探索剧情任务    8 好友切磋     9 公会副本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleType {
      get { return battleType_; }
      set {
        battleType_ = value;
      }
    }

    /// <summary>Field number for the "BattleParam" field.</summary>
    public const int BattleParamFieldNumber = 5;
    private int battleParam_;
    /// <summary>
    /// 战斗参数     玩家ID    战役ID    塔层ID    活动副本ID     好友ID       探索任务ID    探索剧情任务ID    好友ID         公会副本ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleParam {
      get { return battleParam_; }
      set {
        battleParam_ = value;
      }
    }

    /// <summary>Field number for the "AssistFriendId" field.</summary>
    public const int AssistFriendIdFieldNumber = 6;
    private int assistFriendId_;
    /// <summary>
    /// 助战好友ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AssistFriendId {
      get { return assistFriendId_; }
      set {
        assistFriendId_ = value;
      }
    }

    /// <summary>Field number for the "AssistRoleId" field.</summary>
    public const int AssistRoleIdFieldNumber = 7;
    private int assistRoleId_;
    /// <summary>
    /// 助战角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AssistRoleId {
      get { return assistRoleId_; }
      set {
        assistRoleId_ = value;
      }
    }

    /// <summary>Field number for the "AssistPos" field.</summary>
    public const int AssistPosFieldNumber = 8;
    private int assistPos_;
    /// <summary>
    /// 助战角色阵型位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AssistPos {
      get { return assistPos_; }
      set {
        assistPos_ = value;
      }
    }

    /// <summary>Field number for the "SweepNum" field.</summary>
    public const int SweepNumFieldNumber = 9;
    private int sweepNum_;
    /// <summary>
    /// 扫荡次数   0 非扫荡  >0 扫荡次数  (pvp没有扫荡)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SweepNum {
      get { return sweepNum_; }
      set {
        sweepNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      attackMembers_.WriteTo(output, _repeated_attackMembers_codec);
      if (FightPlayerId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FightPlayerId);
      }
      if (CampaignId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CampaignId);
      }
      if (BattleType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BattleType);
      }
      if (BattleParam != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BattleParam);
      }
      if (AssistFriendId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AssistFriendId);
      }
      if (AssistRoleId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(AssistRoleId);
      }
      if (AssistPos != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(AssistPos);
      }
      if (SweepNum != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SweepNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += attackMembers_.CalculateSize(_repeated_attackMembers_codec);
      if (FightPlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FightPlayerId);
      }
      if (CampaignId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CampaignId);
      }
      if (BattleType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleType);
      }
      if (BattleParam != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleParam);
      }
      if (AssistFriendId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AssistFriendId);
      }
      if (AssistRoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AssistRoleId);
      }
      if (AssistPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AssistPos);
      }
      if (SweepNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SweepNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            attackMembers_.AddEntriesFrom(input, _repeated_attackMembers_codec);
            break;
          }
          case 16: {
            FightPlayerId = input.ReadInt32();
            break;
          }
          case 24: {
            CampaignId = input.ReadInt32();
            break;
          }
          case 32: {
            BattleType = input.ReadInt32();
            break;
          }
          case 40: {
            BattleParam = input.ReadInt32();
            break;
          }
          case 48: {
            AssistFriendId = input.ReadInt32();
            break;
          }
          case 56: {
            AssistRoleId = input.ReadInt32();
            break;
          }
          case 64: {
            AssistPos = input.ReadInt32();
            break;
          }
          case 72: {
            SweepNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CBattleResultResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CBattleResultResponse> _parser = new pb::MessageParser<S2CBattleResultResponse>(() => new S2CBattleResultResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CBattleResultResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "IsWin" field.</summary>
    public const int IsWinFieldNumber = 1;
    private bool isWin_;
    /// <summary>
    /// true 赢  false 输
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWin {
      get { return isWin_; }
      set {
        isWin_ = value;
      }
    }

    /// <summary>Field number for the "MyTeam" field.</summary>
    public const int MyTeamFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.BattleMemberItem> _repeated_myTeam_codec
        = pb::FieldCodec.ForMessage(18, global::Msg.ClientMessage.BattleMemberItem.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.BattleMemberItem> myTeam_ = new pbc::RepeatedField<global::Msg.ClientMessage.BattleMemberItem>();
    /// <summary>
    /// 战斗前我方阵容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.BattleMemberItem> MyTeam {
      get { return myTeam_; }
    }

    /// <summary>Field number for the "TargetTeam" field.</summary>
    public const int TargetTeamFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.BattleMemberItem> _repeated_targetTeam_codec
        = pb::FieldCodec.ForMessage(26, global::Msg.ClientMessage.BattleMemberItem.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.BattleMemberItem> targetTeam_ = new pbc::RepeatedField<global::Msg.ClientMessage.BattleMemberItem>();
    /// <summary>
    /// 战斗前敌方阵容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.BattleMemberItem> TargetTeam {
      get { return targetTeam_; }
    }

    /// <summary>Field number for the "EnterReports" field.</summary>
    public const int EnterReportsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.BattleReportItem> _repeated_enterReports_codec
        = pb::FieldCodec.ForMessage(34, global::Msg.ClientMessage.BattleReportItem.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.BattleReportItem> enterReports_ = new pbc::RepeatedField<global::Msg.ClientMessage.BattleReportItem>();
    /// <summary>
    /// 进场时战报，一般是被动技效果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.BattleReportItem> EnterReports {
      get { return enterReports_; }
    }

    /// <summary>Field number for the "Rounds" field.</summary>
    public const int RoundsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.BattleRoundReports> _repeated_rounds_codec
        = pb::FieldCodec.ForMessage(42, global::Msg.ClientMessage.BattleRoundReports.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.BattleRoundReports> rounds_ = new pbc::RepeatedField<global::Msg.ClientMessage.BattleRoundReports>();
    /// <summary>
    /// 回合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.BattleRoundReports> Rounds {
      get { return rounds_; }
    }

    /// <summary>Field number for the "HasNextWave" field.</summary>
    public const int HasNextWaveFieldNumber = 10;
    private bool hasNextWave_;
    /// <summary>
    ///map&lt;int32, int32> MyMemberDamages		= 6; // 我方伤害统计
    ///map&lt;int32, int32> TargetMemberDamages 	= 7; // 敌方伤害统计
    ///map&lt;int32, int32> MyMemberCures			= 8; // 我方治疗统计
    ///map&lt;int32, int32> TargetMemberCures   	= 9; // 敌方治疗统计
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNextWave {
      get { return hasNextWave_; }
      set {
        hasNextWave_ = value;
      }
    }

    /// <summary>Field number for the "NextCampaignId" field.</summary>
    public const int NextCampaignIdFieldNumber = 11;
    private int nextCampaignId_;
    /// <summary>
    /// 下一个战役ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextCampaignId {
      get { return nextCampaignId_; }
      set {
        nextCampaignId_ = value;
      }
    }

    /// <summary>Field number for the "BattleType" field.</summary>
    public const int BattleTypeFieldNumber = 12;
    private int battleType_;
    /// <summary>
    /// 战斗类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleType {
      get { return battleType_; }
      set {
        battleType_ = value;
      }
    }

    /// <summary>Field number for the "BattleParam" field.</summary>
    public const int BattleParamFieldNumber = 13;
    private int battleParam_;
    /// <summary>
    /// 战斗参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleParam {
      get { return battleParam_; }
      set {
        battleParam_ = value;
      }
    }

    /// <summary>Field number for the "AssistFriendId" field.</summary>
    public const int AssistFriendIdFieldNumber = 14;
    private int assistFriendId_;
    /// <summary>
    /// 助战好友ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AssistFriendId {
      get { return assistFriendId_; }
      set {
        assistFriendId_ = value;
      }
    }

    /// <summary>Field number for the "AssistRoleId" field.</summary>
    public const int AssistRoleIdFieldNumber = 15;
    private int assistRoleId_;
    /// <summary>
    /// 助战角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AssistRoleId {
      get { return assistRoleId_; }
      set {
        assistRoleId_ = value;
      }
    }

    /// <summary>Field number for the "AssistPos" field.</summary>
    public const int AssistPosFieldNumber = 16;
    private int assistPos_;
    /// <summary>
    /// 助战角色阵型位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AssistPos {
      get { return assistPos_; }
      set {
        assistPos_ = value;
      }
    }

    /// <summary>Field number for the "SweepNum" field.</summary>
    public const int SweepNumFieldNumber = 17;
    private int sweepNum_;
    /// <summary>
    /// 扫荡次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SweepNum {
      get { return sweepNum_; }
      set {
        sweepNum_ = value;
      }
    }

    /// <summary>Field number for the "ExtraValue" field.</summary>
    public const int ExtraValueFieldNumber = 18;
    private int extraValue_;
    /// <summary>
    /// 额外的数据       类型 5 该值就是好友BOSS血量百分比   类型 9 公会副本时为BOSS血量百分比
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExtraValue {
      get { return extraValue_; }
      set {
        extraValue_ = value;
      }
    }

    /// <summary>Field number for the "MySpeedBonus" field.</summary>
    public const int MySpeedBonusFieldNumber = 19;
    private int mySpeedBonus_;
    /// <summary>
    /// 自己先手值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MySpeedBonus {
      get { return mySpeedBonus_; }
      set {
        mySpeedBonus_ = value;
      }
    }

    /// <summary>Field number for the "TargetSpeedBonus" field.</summary>
    public const int TargetSpeedBonusFieldNumber = 20;
    private int targetSpeedBonus_;
    /// <summary>
    /// 对方先手值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetSpeedBonus {
      get { return targetSpeedBonus_; }
      set {
        targetSpeedBonus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsWin != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsWin);
      }
      myTeam_.WriteTo(output, _repeated_myTeam_codec);
      targetTeam_.WriteTo(output, _repeated_targetTeam_codec);
      enterReports_.WriteTo(output, _repeated_enterReports_codec);
      rounds_.WriteTo(output, _repeated_rounds_codec);
      if (HasNextWave != false) {
        output.WriteRawTag(80);
        output.WriteBool(HasNextWave);
      }
      if (NextCampaignId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(NextCampaignId);
      }
      if (BattleType != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(BattleType);
      }
      if (BattleParam != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(BattleParam);
      }
      if (AssistFriendId != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(AssistFriendId);
      }
      if (AssistRoleId != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(AssistRoleId);
      }
      if (AssistPos != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(AssistPos);
      }
      if (SweepNum != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(SweepNum);
      }
      if (ExtraValue != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(ExtraValue);
      }
      if (MySpeedBonus != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(MySpeedBonus);
      }
      if (TargetSpeedBonus != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(TargetSpeedBonus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsWin != false) {
        size += 1 + 1;
      }
      size += myTeam_.CalculateSize(_repeated_myTeam_codec);
      size += targetTeam_.CalculateSize(_repeated_targetTeam_codec);
      size += enterReports_.CalculateSize(_repeated_enterReports_codec);
      size += rounds_.CalculateSize(_repeated_rounds_codec);
      if (HasNextWave != false) {
        size += 1 + 1;
      }
      if (NextCampaignId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextCampaignId);
      }
      if (BattleType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleType);
      }
      if (BattleParam != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleParam);
      }
      if (AssistFriendId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AssistFriendId);
      }
      if (AssistRoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AssistRoleId);
      }
      if (AssistPos != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AssistPos);
      }
      if (SweepNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SweepNum);
      }
      if (ExtraValue != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExtraValue);
      }
      if (MySpeedBonus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MySpeedBonus);
      }
      if (TargetSpeedBonus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TargetSpeedBonus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsWin = input.ReadBool();
            break;
          }
          case 18: {
            myTeam_.AddEntriesFrom(input, _repeated_myTeam_codec);
            break;
          }
          case 26: {
            targetTeam_.AddEntriesFrom(input, _repeated_targetTeam_codec);
            break;
          }
          case 34: {
            enterReports_.AddEntriesFrom(input, _repeated_enterReports_codec);
            break;
          }
          case 42: {
            rounds_.AddEntriesFrom(input, _repeated_rounds_codec);
            break;
          }
          case 80: {
            HasNextWave = input.ReadBool();
            break;
          }
          case 88: {
            NextCampaignId = input.ReadInt32();
            break;
          }
          case 96: {
            BattleType = input.ReadInt32();
            break;
          }
          case 104: {
            BattleParam = input.ReadInt32();
            break;
          }
          case 112: {
            AssistFriendId = input.ReadInt32();
            break;
          }
          case 120: {
            AssistRoleId = input.ReadInt32();
            break;
          }
          case 128: {
            AssistPos = input.ReadInt32();
            break;
          }
          case 136: {
            SweepNum = input.ReadInt32();
            break;
          }
          case 144: {
            ExtraValue = input.ReadInt32();
            break;
          }
          case 152: {
            MySpeedBonus = input.ReadInt32();
            break;
          }
          case 160: {
            TargetSpeedBonus = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 请求录像列表
  /// </summary>
  public sealed class C2SBattleRecordListRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SBattleRecordListRequest> _parser = new pb::MessageParser<C2SBattleRecordListRequest>(() => new C2SBattleRecordListRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SBattleRecordListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class BattleRecordData : pb::IMessage {
    private static readonly pb::MessageParser<BattleRecordData> _parser = new pb::MessageParser<BattleRecordData>(() => new BattleRecordData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleRecordData> Parser { get { return _parser; } }

    /// <summary>Field number for the "RecordId" field.</summary>
    public const int RecordIdFieldNumber = 1;
    private int recordId_;
    /// <summary>
    /// 录像ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecordId {
      get { return recordId_; }
      set {
        recordId_ = value;
      }
    }

    /// <summary>Field number for the "AttackerId" field.</summary>
    public const int AttackerIdFieldNumber = 2;
    private int attackerId_;
    /// <summary>
    /// 攻击者ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackerId {
      get { return attackerId_; }
      set {
        attackerId_ = value;
      }
    }

    /// <summary>Field number for the "AttackerName" field.</summary>
    public const int AttackerNameFieldNumber = 3;
    private string attackerName_ = "";
    /// <summary>
    /// 攻击者昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AttackerName {
      get { return attackerName_; }
      set {
        attackerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DefenserId" field.</summary>
    public const int DefenserIdFieldNumber = 4;
    private int defenserId_;
    /// <summary>
    /// 防守者ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefenserId {
      get { return defenserId_; }
      set {
        defenserId_ = value;
      }
    }

    /// <summary>Field number for the "DefenserName" field.</summary>
    public const int DefenserNameFieldNumber = 5;
    private string defenserName_ = "";
    /// <summary>
    /// 防守者昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefenserName {
      get { return defenserName_; }
      set {
        defenserName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RecordTime" field.</summary>
    public const int RecordTimeFieldNumber = 6;
    private int recordTime_;
    /// <summary>
    /// 录像时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecordTime {
      get { return recordTime_; }
      set {
        recordTime_ = value;
      }
    }

    /// <summary>Field number for the "IsWin" field.</summary>
    public const int IsWinFieldNumber = 7;
    private bool isWin_;
    /// <summary>
    /// 是否赢
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWin {
      get { return isWin_; }
      set {
        isWin_ = value;
      }
    }

    /// <summary>Field number for the "AddScore" field.</summary>
    public const int AddScoreFieldNumber = 8;
    private int addScore_;
    /// <summary>
    /// 增加积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddScore {
      get { return addScore_; }
      set {
        addScore_ = value;
      }
    }

    /// <summary>Field number for the "AttackerLevel" field.</summary>
    public const int AttackerLevelFieldNumber = 9;
    private int attackerLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackerLevel {
      get { return attackerLevel_; }
      set {
        attackerLevel_ = value;
      }
    }

    /// <summary>Field number for the "DefenserLevel" field.</summary>
    public const int DefenserLevelFieldNumber = 10;
    private int defenserLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefenserLevel {
      get { return defenserLevel_; }
      set {
        defenserLevel_ = value;
      }
    }

    /// <summary>Field number for the "AttackerHead" field.</summary>
    public const int AttackerHeadFieldNumber = 11;
    private int attackerHead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackerHead {
      get { return attackerHead_; }
      set {
        attackerHead_ = value;
      }
    }

    /// <summary>Field number for the "DefenserHead" field.</summary>
    public const int DefenserHeadFieldNumber = 12;
    private int defenserHead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefenserHead {
      get { return defenserHead_; }
      set {
        defenserHead_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RecordId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RecordId);
      }
      if (AttackerId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AttackerId);
      }
      if (AttackerName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AttackerName);
      }
      if (DefenserId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DefenserId);
      }
      if (DefenserName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DefenserName);
      }
      if (RecordTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RecordTime);
      }
      if (IsWin != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsWin);
      }
      if (AddScore != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(AddScore);
      }
      if (AttackerLevel != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(AttackerLevel);
      }
      if (DefenserLevel != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(DefenserLevel);
      }
      if (AttackerHead != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(AttackerHead);
      }
      if (DefenserHead != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(DefenserHead);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecordId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecordId);
      }
      if (AttackerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackerId);
      }
      if (AttackerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AttackerName);
      }
      if (DefenserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefenserId);
      }
      if (DefenserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DefenserName);
      }
      if (RecordTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecordTime);
      }
      if (IsWin != false) {
        size += 1 + 1;
      }
      if (AddScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddScore);
      }
      if (AttackerLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackerLevel);
      }
      if (DefenserLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefenserLevel);
      }
      if (AttackerHead != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackerHead);
      }
      if (DefenserHead != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefenserHead);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RecordId = input.ReadInt32();
            break;
          }
          case 16: {
            AttackerId = input.ReadInt32();
            break;
          }
          case 26: {
            AttackerName = input.ReadString();
            break;
          }
          case 32: {
            DefenserId = input.ReadInt32();
            break;
          }
          case 42: {
            DefenserName = input.ReadString();
            break;
          }
          case 48: {
            RecordTime = input.ReadInt32();
            break;
          }
          case 56: {
            IsWin = input.ReadBool();
            break;
          }
          case 64: {
            AddScore = input.ReadInt32();
            break;
          }
          case 72: {
            AttackerLevel = input.ReadInt32();
            break;
          }
          case 80: {
            DefenserLevel = input.ReadInt32();
            break;
          }
          case 88: {
            AttackerHead = input.ReadInt32();
            break;
          }
          case 96: {
            DefenserHead = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CBattleRecordListResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CBattleRecordListResponse> _parser = new pb::MessageParser<S2CBattleRecordListResponse>(() => new S2CBattleRecordListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CBattleRecordListResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "Records" field.</summary>
    public const int RecordsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.BattleRecordData> _repeated_records_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.ClientMessage.BattleRecordData.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.BattleRecordData> records_ = new pbc::RepeatedField<global::Msg.ClientMessage.BattleRecordData>();
    /// <summary>
    /// 录像列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.BattleRecordData> Records {
      get { return records_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      records_.WriteTo(output, _repeated_records_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += records_.CalculateSize(_repeated_records_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            records_.AddEntriesFrom(input, _repeated_records_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 请求录像
  /// </summary>
  public sealed class C2SBattleRecordRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SBattleRecordRequest> _parser = new pb::MessageParser<C2SBattleRecordRequest>(() => new C2SBattleRecordRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SBattleRecordRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 录像ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CBattleRecordResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CBattleRecordResponse> _parser = new pb::MessageParser<S2CBattleRecordResponse>(() => new S2CBattleRecordResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CBattleRecordResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 录像ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "AttackerId" field.</summary>
    public const int AttackerIdFieldNumber = 2;
    private int attackerId_;
    /// <summary>
    /// 攻击者ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackerId {
      get { return attackerId_; }
      set {
        attackerId_ = value;
      }
    }

    /// <summary>Field number for the "AttackerName" field.</summary>
    public const int AttackerNameFieldNumber = 3;
    private string attackerName_ = "";
    /// <summary>
    /// 攻击者昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AttackerName {
      get { return attackerName_; }
      set {
        attackerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DefenserId" field.</summary>
    public const int DefenserIdFieldNumber = 4;
    private int defenserId_;
    /// <summary>
    /// 防守者ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefenserId {
      get { return defenserId_; }
      set {
        defenserId_ = value;
      }
    }

    /// <summary>Field number for the "DefenserName" field.</summary>
    public const int DefenserNameFieldNumber = 5;
    private string defenserName_ = "";
    /// <summary>
    /// 防守者昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefenserName {
      get { return defenserName_; }
      set {
        defenserName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RecordData" field.</summary>
    public const int RecordDataFieldNumber = 6;
    private pb::ByteString recordData_ = pb::ByteString.Empty;
    /// <summary>
    /// 录像数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RecordData {
      get { return recordData_; }
      set {
        recordData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RecordTime" field.</summary>
    public const int RecordTimeFieldNumber = 7;
    private int recordTime_;
    /// <summary>
    /// 录像时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecordTime {
      get { return recordTime_; }
      set {
        recordTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (AttackerId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AttackerId);
      }
      if (AttackerName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AttackerName);
      }
      if (DefenserId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DefenserId);
      }
      if (DefenserName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DefenserName);
      }
      if (RecordData.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(RecordData);
      }
      if (RecordTime != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RecordTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (AttackerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackerId);
      }
      if (AttackerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AttackerName);
      }
      if (DefenserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefenserId);
      }
      if (DefenserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DefenserName);
      }
      if (RecordData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RecordData);
      }
      if (RecordTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecordTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            AttackerId = input.ReadInt32();
            break;
          }
          case 26: {
            AttackerName = input.ReadString();
            break;
          }
          case 32: {
            DefenserId = input.ReadInt32();
            break;
          }
          case 42: {
            DefenserName = input.ReadString();
            break;
          }
          case 50: {
            RecordData = input.ReadBytes();
            break;
          }
          case 56: {
            RecordTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 删除录像
  /// </summary>
  public sealed class C2SBattleRecordDeleteRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SBattleRecordDeleteRequest> _parser = new pb::MessageParser<C2SBattleRecordDeleteRequest>(() => new C2SBattleRecordDeleteRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SBattleRecordDeleteRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "RecordId" field.</summary>
    public const int RecordIdFieldNumber = 1;
    private int recordId_;
    /// <summary>
    /// 录像ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecordId {
      get { return recordId_; }
      set {
        recordId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RecordId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RecordId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecordId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecordId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RecordId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CBattleRecordDeleteResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CBattleRecordDeleteResponse> _parser = new pb::MessageParser<S2CBattleRecordDeleteResponse>(() => new S2CBattleRecordDeleteResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CBattleRecordDeleteResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "RecordId" field.</summary>
    public const int RecordIdFieldNumber = 1;
    private int recordId_;
    /// <summary>
    /// 录像Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecordId {
      get { return recordId_; }
      set {
        recordId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RecordId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RecordId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecordId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecordId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RecordId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战斗随机奖励
  /// </summary>
  public sealed class S2CBattleRandomRewardNotify : pb::IMessage {
    private static readonly pb::MessageParser<S2CBattleRandomRewardNotify> _parser = new pb::MessageParser<S2CBattleRandomRewardNotify>(() => new S2CBattleRandomRewardNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CBattleRandomRewardNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "Items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.ItemInfo> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.ClientMessage.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.ItemInfo> items_ = new pbc::RepeatedField<global::Msg.ClientMessage.ItemInfo>();
    /// <summary>
    /// 实际奖励物品  扫荡才有多个物品，非扫荡只有一个
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.ItemInfo> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "FakeItems" field.</summary>
    public const int FakeItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_fakeItems_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> fakeItems_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 假随机物品    扫荡不用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FakeItems {
      get { return fakeItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      fakeItems_.WriteTo(output, _repeated_fakeItems_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      size += fakeItems_.CalculateSize(_repeated_fakeItems_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 18:
          case 16: {
            fakeItems_.AddEntriesFrom(input, _repeated_fakeItems_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ---------------------------------- 关卡 ------------------------------------
  /// 请求战役关卡数据
  /// </summary>
  public sealed class C2SCampaignDataRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SCampaignDataRequest> _parser = new pb::MessageParser<C2SCampaignDataRequest>(() => new C2SCampaignDataRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SCampaignDataRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class S2CCampaignDataResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CCampaignDataResponse> _parser = new pb::MessageParser<S2CCampaignDataResponse>(() => new S2CCampaignDataResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CCampaignDataResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "PassedCampaignIds" field.</summary>
    public const int PassedCampaignIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_passedCampaignIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> passedCampaignIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 已打过的战役
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PassedCampaignIds {
      get { return passedCampaignIds_; }
    }

    /// <summary>Field number for the "UnlockCampaignId" field.</summary>
    public const int UnlockCampaignIdFieldNumber = 2;
    private int unlockCampaignId_;
    /// <summary>
    /// 已战役关卡ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnlockCampaignId {
      get { return unlockCampaignId_; }
      set {
        unlockCampaignId_ = value;
      }
    }

    /// <summary>Field number for the "HangupCampaignId" field.</summary>
    public const int HangupCampaignIdFieldNumber = 3;
    private int hangupCampaignId_;
    /// <summary>
    /// 挂机战役关卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HangupCampaignId {
      get { return hangupCampaignId_; }
      set {
        hangupCampaignId_ = value;
      }
    }

    /// <summary>Field number for the "StaticIncomes" field.</summary>
    public const int StaticIncomesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.ItemInfo> _repeated_staticIncomes_codec
        = pb::FieldCodec.ForMessage(34, global::Msg.ClientMessage.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.ItemInfo> staticIncomes_ = new pbc::RepeatedField<global::Msg.ClientMessage.ItemInfo>();
    /// <summary>
    /// 当前挂机固定收益
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.ItemInfo> StaticIncomes {
      get { return staticIncomes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      passedCampaignIds_.WriteTo(output, _repeated_passedCampaignIds_codec);
      if (UnlockCampaignId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnlockCampaignId);
      }
      if (HangupCampaignId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HangupCampaignId);
      }
      staticIncomes_.WriteTo(output, _repeated_staticIncomes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += passedCampaignIds_.CalculateSize(_repeated_passedCampaignIds_codec);
      if (UnlockCampaignId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnlockCampaignId);
      }
      if (HangupCampaignId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HangupCampaignId);
      }
      size += staticIncomes_.CalculateSize(_repeated_staticIncomes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            passedCampaignIds_.AddEntriesFrom(input, _repeated_passedCampaignIds_codec);
            break;
          }
          case 16: {
            UnlockCampaignId = input.ReadInt32();
            break;
          }
          case 24: {
            HangupCampaignId = input.ReadInt32();
            break;
          }
          case 34: {
            staticIncomes_.AddEntriesFrom(input, _repeated_staticIncomes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 请求战役挂机收益
  /// </summary>
  public sealed class C2SCampaignHangupIncomeRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SCampaignHangupIncomeRequest> _parser = new pb::MessageParser<C2SCampaignHangupIncomeRequest>(() => new C2SCampaignHangupIncomeRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SCampaignHangupIncomeRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "IncomeType" field.</summary>
    public const int IncomeTypeFieldNumber = 1;
    private int incomeType_;
    /// <summary>
    /// 0 固定收益  1 随机收益
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IncomeType {
      get { return incomeType_; }
      set {
        incomeType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IncomeType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IncomeType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IncomeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IncomeType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IncomeType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 关卡战斗结果奖励
  /// </summary>
  public sealed class S2CCampaignHangupIncomeResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CCampaignHangupIncomeResponse> _parser = new pb::MessageParser<S2CCampaignHangupIncomeResponse>(() => new S2CCampaignHangupIncomeResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CCampaignHangupIncomeResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "IncomeType" field.</summary>
    public const int IncomeTypeFieldNumber = 1;
    private int incomeType_;
    /// <summary>
    /// 收益类型  0 挂机固定收益  1 挂机随机收益  2 战役奖励  3 爬塔奖励  4 活动副本奖励  5 挑战好友BOSS  6 探索任务  7 公会副本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IncomeType {
      get { return incomeType_; }
      set {
        incomeType_ = value;
      }
    }

    /// <summary>Field number for the "Rewards" field.</summary>
    public const int RewardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.ItemInfo> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(18, global::Msg.ClientMessage.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.ItemInfo> rewards_ = new pbc::RepeatedField<global::Msg.ClientMessage.ItemInfo>();
    /// <summary>
    /// 奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.ItemInfo> Rewards {
      get { return rewards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IncomeType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IncomeType);
      }
      rewards_.WriteTo(output, _repeated_rewards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IncomeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IncomeType);
      }
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IncomeType = input.ReadInt32();
            break;
          }
          case 18: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 设置挂机战役关卡
  /// </summary>
  public sealed class C2SBattleSetHangupCampaignRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SBattleSetHangupCampaignRequest> _parser = new pb::MessageParser<C2SBattleSetHangupCampaignRequest>(() => new C2SBattleSetHangupCampaignRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SBattleSetHangupCampaignRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "CampaignId" field.</summary>
    public const int CampaignIdFieldNumber = 1;
    private int campaignId_;
    /// <summary>
    /// 战役ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CampaignId {
      get { return campaignId_; }
      set {
        campaignId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CampaignId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CampaignId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CampaignId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CampaignId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CampaignId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 设置挂机战役关卡返回
  /// </summary>
  public sealed class S2CBattleSetHangupCampaignResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CBattleSetHangupCampaignResponse> _parser = new pb::MessageParser<S2CBattleSetHangupCampaignResponse>(() => new S2CBattleSetHangupCampaignResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CBattleSetHangupCampaignResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "CampaignId" field.</summary>
    public const int CampaignIdFieldNumber = 1;
    private int campaignId_;
    /// <summary>
    /// 战役ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CampaignId {
      get { return campaignId_; }
      set {
        campaignId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CampaignId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CampaignId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CampaignId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CampaignId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CampaignId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ----------------------------------- 物品 ------------------------------------
  /// 请求同步物品数据
  /// </summary>
  public sealed class C2SItemsSyncRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SItemsSyncRequest> _parser = new pb::MessageParser<C2SItemsSyncRequest>(() => new C2SItemsSyncRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SItemsSyncRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 进入游戏同步物品数据
  /// </summary>
  public sealed class S2CItemsSync : pb::IMessage {
    private static readonly pb::MessageParser<S2CItemsSync> _parser = new pb::MessageParser<S2CItemsSync>(() => new S2CItemsSync());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CItemsSync> Parser { get { return _parser; } }

    /// <summary>Field number for the "Items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.ItemInfo> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.ClientMessage.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.ItemInfo> items_ = new pbc::RepeatedField<global::Msg.ClientMessage.ItemInfo>();
    /// <summary>
    /// 同步的物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.ItemInfo> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 物品数据更新
  /// </summary>
  public sealed class S2CItemsUpdate : pb::IMessage {
    private static readonly pb::MessageParser<S2CItemsUpdate> _parser = new pb::MessageParser<S2CItemsUpdate>(() => new S2CItemsUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CItemsUpdate> Parser { get { return _parser; } }

    /// <summary>Field number for the "ItemsAdd" field.</summary>
    public const int ItemsAddFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.ItemInfo> _repeated_itemsAdd_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.ClientMessage.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.ItemInfo> itemsAdd_ = new pbc::RepeatedField<global::Msg.ClientMessage.ItemInfo>();
    /// <summary>
    /// 增加的物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.ItemInfo> ItemsAdd {
      get { return itemsAdd_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      itemsAdd_.WriteTo(output, _repeated_itemsAdd_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += itemsAdd_.CalculateSize(_repeated_itemsAdd_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            itemsAdd_.AddEntriesFrom(input, _repeated_itemsAdd_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 物品合成
  /// </summary>
  public sealed class C2SItemFusionRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SItemFusionRequest> _parser = new pb::MessageParser<C2SItemFusionRequest>(() => new C2SItemFusionRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SItemFusionRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "PieceId" field.</summary>
    public const int PieceIdFieldNumber = 1;
    private int pieceId_;
    /// <summary>
    /// 碎片ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PieceId {
      get { return pieceId_; }
      set {
        pieceId_ = value;
      }
    }

    /// <summary>Field number for the "FusionNum" field.</summary>
    public const int FusionNumFieldNumber = 2;
    private int fusionNum_;
    /// <summary>
    /// 合成次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FusionNum {
      get { return fusionNum_; }
      set {
        fusionNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PieceId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PieceId);
      }
      if (FusionNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FusionNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PieceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PieceId);
      }
      if (FusionNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FusionNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PieceId = input.ReadInt32();
            break;
          }
          case 16: {
            FusionNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CItemFusionResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CItemFusionResponse> _parser = new pb::MessageParser<S2CItemFusionResponse>(() => new S2CItemFusionResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CItemFusionResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "Items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.ItemInfo> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.ClientMessage.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.ItemInfo> items_ = new pbc::RepeatedField<global::Msg.ClientMessage.ItemInfo>();
    /// <summary>
    /// 合成的物品或角色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.ItemInfo> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 出售物品
  /// </summary>
  public sealed class C2SItemSellRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SItemSellRequest> _parser = new pb::MessageParser<C2SItemSellRequest>(() => new C2SItemSellRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SItemSellRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "ItemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    /// <summary>
    /// 出售物品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "ItemNum" field.</summary>
    public const int ItemNumFieldNumber = 2;
    private int itemNum_;
    /// <summary>
    /// 出售物品数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemNum {
      get { return itemNum_; }
      set {
        itemNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (ItemNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (ItemNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 16: {
            ItemNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CItemSellResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CItemSellResponse> _parser = new pb::MessageParser<S2CItemSellResponse>(() => new S2CItemSellResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CItemSellResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "ItemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    /// <summary>
    /// 出售物品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "ItemNum" field.</summary>
    public const int ItemNumFieldNumber = 2;
    private int itemNum_;
    /// <summary>
    /// 出售物品数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemNum {
      get { return itemNum_; }
      set {
        itemNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (ItemNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (ItemNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 16: {
            ItemNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 装备物品
  /// </summary>
  public sealed class C2SItemEquipRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SItemEquipRequest> _parser = new pb::MessageParser<C2SItemEquipRequest>(() => new C2SItemEquipRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SItemEquipRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    /// <summary>
    /// 角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "ItemId" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private int itemId_;
    /// <summary>
    /// 物品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      if (ItemId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 16: {
            ItemId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CItemEquipResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CItemEquipResponse> _parser = new pb::MessageParser<S2CItemEquipResponse>(() => new S2CItemEquipResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CItemEquipResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    /// <summary>
    /// 角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "EquipSlot" field.</summary>
    public const int EquipSlotFieldNumber = 2;
    private int equipSlot_;
    /// <summary>
    /// 装备槽位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EquipSlot {
      get { return equipSlot_; }
      set {
        equipSlot_ = value;
      }
    }

    /// <summary>Field number for the "ItemId" field.</summary>
    public const int ItemIdFieldNumber = 3;
    private int itemId_;
    /// <summary>
    /// 物品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      if (EquipSlot != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EquipSlot);
      }
      if (ItemId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ItemId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      if (EquipSlot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EquipSlot);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 16: {
            EquipSlot = input.ReadInt32();
            break;
          }
          case 24: {
            ItemId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 卸载物品
  /// </summary>
  public sealed class C2SItemUnequipRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SItemUnequipRequest> _parser = new pb::MessageParser<C2SItemUnequipRequest>(() => new C2SItemUnequipRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SItemUnequipRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    /// <summary>
    /// 角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "EquipSlot" field.</summary>
    public const int EquipSlotFieldNumber = 2;
    private int equipSlot_;
    /// <summary>
    /// 装备槽位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EquipSlot {
      get { return equipSlot_; }
      set {
        equipSlot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      if (EquipSlot != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EquipSlot);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      if (EquipSlot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EquipSlot);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 16: {
            EquipSlot = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CItemUnequipResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CItemUnequipResponse> _parser = new pb::MessageParser<S2CItemUnequipResponse>(() => new S2CItemUnequipResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CItemUnequipResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    /// <summary>
    /// 角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "EquipSlot" field.</summary>
    public const int EquipSlotFieldNumber = 2;
    private int equipSlot_;
    /// <summary>
    /// 装备槽位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EquipSlot {
      get { return equipSlot_; }
      set {
        equipSlot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      if (EquipSlot != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EquipSlot);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      if (EquipSlot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EquipSlot);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 16: {
            EquipSlot = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 物品升级
  /// </summary>
  public sealed class C2SItemUpgradeRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SItemUpgradeRequest> _parser = new pb::MessageParser<C2SItemUpgradeRequest>(() => new C2SItemUpgradeRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SItemUpgradeRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    /// <summary>
    /// 角色ID   只有左槽右槽需要
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "ItemId" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private int itemId_;
    /// <summary>
    /// 物品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "UpgradeType" field.</summary>
    public const int UpgradeTypeFieldNumber = 3;
    private int upgradeType_;
    /// <summary>
    /// 升级类型   左槽有两种，对应ItemUpgrade.xml表中的UpgradeType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UpgradeType {
      get { return upgradeType_; }
      set {
        upgradeType_ = value;
      }
    }

    /// <summary>Field number for the "ItemNum" field.</summary>
    public const int ItemNumFieldNumber = 4;
    private int itemNum_;
    /// <summary>
    /// 数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemNum {
      get { return itemNum_; }
      set {
        itemNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      if (ItemId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemId);
      }
      if (UpgradeType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UpgradeType);
      }
      if (ItemNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ItemNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (UpgradeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UpgradeType);
      }
      if (ItemNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 16: {
            ItemId = input.ReadInt32();
            break;
          }
          case 24: {
            UpgradeType = input.ReadInt32();
            break;
          }
          case 32: {
            ItemNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CItemUpgradeResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CItemUpgradeResponse> _parser = new pb::MessageParser<S2CItemUpgradeResponse>(() => new S2CItemUpgradeResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CItemUpgradeResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    /// <summary>
    /// 角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 物品一键合成装备
  /// </summary>
  public sealed class C2SItemOneKeyUpgradeRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SItemOneKeyUpgradeRequest> _parser = new pb::MessageParser<C2SItemOneKeyUpgradeRequest>(() => new C2SItemOneKeyUpgradeRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SItemOneKeyUpgradeRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "ItemIds" field.</summary>
    public const int ItemIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_itemIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> itemIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 待合成的物品列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ItemIds {
      get { return itemIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      itemIds_.WriteTo(output, _repeated_itemIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += itemIds_.CalculateSize(_repeated_itemIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            itemIds_.AddEntriesFrom(input, _repeated_itemIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class S2CItemOneKeyUpgradeResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CItemOneKeyUpgradeResponse> _parser = new pb::MessageParser<S2CItemOneKeyUpgradeResponse>(() => new S2CItemOneKeyUpgradeResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CItemOneKeyUpgradeResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "ItemIds" field.</summary>
    public const int ItemIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_itemIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> itemIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 待合成的物品列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ItemIds {
      get { return itemIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      itemIds_.WriteTo(output, _repeated_itemIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += itemIds_.CalculateSize(_repeated_itemIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            itemIds_.AddEntriesFrom(input, _repeated_itemIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ----------------------------------- 角色 ------------------------------------
  /// 请求角色
  /// </summary>
  public sealed class C2SRolesRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SRolesRequest> _parser = new pb::MessageParser<C2SRolesRequest>(() => new C2SRolesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SRolesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class AttrData : pb::IMessage {
    private static readonly pb::MessageParser<AttrData> _parser = new pb::MessageParser<AttrData>(() => new AttrData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttrData> Parser { get { return _parser; } }

    /// <summary>Field number for the "AttrId" field.</summary>
    public const int AttrIdFieldNumber = 1;
    private int attrId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttrId {
      get { return attrId_; }
      set {
        attrId_ = value;
      }
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AttrId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AttrId);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AttrId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttrId);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AttrId = input.ReadInt32();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class Role : pb::IMessage {
    private static readonly pb::MessageParser<Role> _parser = new pb::MessageParser<Role>(() => new Role());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Role> Parser { get { return _parser; } }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "TableId" field.</summary>
    public const int TableIdFieldNumber = 2;
    private int tableId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TableId {
      get { return tableId_; }
      set {
        tableId_ = value;
      }
    }

    /// <summary>Field number for the "Rank" field.</summary>
    public const int RankFieldNumber = 3;
    private int rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 4;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "IsLock" field.</summary>
    public const int IsLockFieldNumber = 5;
    private bool isLock_;
    /// <summary>
    /// 锁定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLock {
      get { return isLock_; }
      set {
        isLock_ = value;
      }
    }

    /// <summary>Field number for the "Equips" field.</summary>
    public const int EquipsFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_equips_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> equips_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 装备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Equips {
      get { return equips_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (TableId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TableId);
      }
      if (Rank != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Rank);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      if (IsLock != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsLock);
      }
      equips_.WriteTo(output, _repeated_equips_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (TableId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableId);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (IsLock != false) {
        size += 1 + 1;
      }
      size += equips_.CalculateSize(_repeated_equips_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            TableId = input.ReadInt32();
            break;
          }
          case 24: {
            Rank = input.ReadInt32();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
          case 40: {
            IsLock = input.ReadBool();
            break;
          }
          case 50:
          case 48: {
            equips_.AddEntriesFrom(input, _repeated_equips_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 请求角色返回
  /// </summary>
  public sealed class S2CRolesResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CRolesResponse> _parser = new pb::MessageParser<S2CRolesResponse>(() => new S2CRolesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CRolesResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "Roles" field.</summary>
    public const int RolesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.Role> _repeated_roles_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.ClientMessage.Role.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.Role> roles_ = new pbc::RepeatedField<global::Msg.ClientMessage.Role>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.Role> Roles {
      get { return roles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roles_.WriteTo(output, _repeated_roles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roles_.CalculateSize(_repeated_roles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            roles_.AddEntriesFrom(input, _repeated_roles_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 角色信息更新通知
  /// </summary>
  public sealed class S2CRolesChangeNotify : pb::IMessage {
    private static readonly pb::MessageParser<S2CRolesChangeNotify> _parser = new pb::MessageParser<S2CRolesChangeNotify>(() => new S2CRolesChangeNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CRolesChangeNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "Adds" field.</summary>
    public const int AddsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.Role> _repeated_adds_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.ClientMessage.Role.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.Role> adds_ = new pbc::RepeatedField<global::Msg.ClientMessage.Role>();
    /// <summary>
    /// 增加
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.Role> Adds {
      get { return adds_; }
    }

    /// <summary>Field number for the "Removes" field.</summary>
    public const int RemovesFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_removes_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> removes_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 删除
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Removes {
      get { return removes_; }
    }

    /// <summary>Field number for the "Updates" field.</summary>
    public const int UpdatesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.Role> _repeated_updates_codec
        = pb::FieldCodec.ForMessage(26, global::Msg.ClientMessage.Role.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.Role> updates_ = new pbc::RepeatedField<global::Msg.ClientMessage.Role>();
    /// <summary>
    /// 更新
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.Role> Updates {
      get { return updates_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      adds_.WriteTo(output, _repeated_adds_codec);
      removes_.WriteTo(output, _repeated_removes_codec);
      updates_.WriteTo(output, _repeated_updates_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += adds_.CalculateSize(_repeated_adds_codec);
      size += removes_.CalculateSize(_repeated_removes_codec);
      size += updates_.CalculateSize(_repeated_updates_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            adds_.AddEntriesFrom(input, _repeated_adds_codec);
            break;
          }
          case 18:
          case 16: {
            removes_.AddEntriesFrom(input, _repeated_removes_codec);
            break;
          }
          case 26: {
            updates_.AddEntriesFrom(input, _repeated_updates_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 角色属性请求
  /// </summary>
  public sealed class C2SRoleAttrsRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SRoleAttrsRequest> _parser = new pb::MessageParser<C2SRoleAttrsRequest>(() => new C2SRoleAttrsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SRoleAttrsRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    /// <summary>
    /// 角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 角色属性返回
  /// </summary>
  public sealed class S2CRoleAttrsResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CRoleAttrsResponse> _parser = new pb::MessageParser<S2CRoleAttrsResponse>(() => new S2CRoleAttrsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CRoleAttrsResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    /// <summary>
    /// 角色Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "Attrs" field.</summary>
    public const int AttrsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_attrs_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> attrs_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 角色属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Attrs {
      get { return attrs_; }
    }

    /// <summary>Field number for the "Power" field.</summary>
    public const int PowerFieldNumber = 3;
    private int power_;
    /// <summary>
    /// 角色战力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      attrs_.WriteTo(output, _repeated_attrs_codec);
      if (Power != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Power);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      size += attrs_.CalculateSize(_repeated_attrs_codec);
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            attrs_.AddEntriesFrom(input, _repeated_attrs_codec);
            break;
          }
          case 24: {
            Power = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 角色升级
  /// </summary>
  public sealed class C2SRoleLevelUpRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SRoleLevelUpRequest> _parser = new pb::MessageParser<C2SRoleLevelUpRequest>(() => new C2SRoleLevelUpRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SRoleLevelUpRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    /// <summary>
    /// 角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "UpNum" field.</summary>
    public const int UpNumFieldNumber = 2;
    private int upNum_;
    /// <summary>
    /// 升多少级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UpNum {
      get { return upNum_; }
      set {
        upNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      if (UpNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UpNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      if (UpNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UpNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 16: {
            UpNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CRoleLevelUpResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CRoleLevelUpResponse> _parser = new pb::MessageParser<S2CRoleLevelUpResponse>(() => new S2CRoleLevelUpResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CRoleLevelUpResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    /// <summary>
    /// 角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "UpNum" field.</summary>
    public const int UpNumFieldNumber = 2;
    private int upNum_;
    /// <summary>
    /// 升多少级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UpNum {
      get { return upNum_; }
      set {
        upNum_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    /// <summary>
    /// 新等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      if (UpNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UpNum);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      if (UpNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UpNum);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 16: {
            UpNum = input.ReadInt32();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 角色升阶
  /// </summary>
  public sealed class C2SRoleRankUpRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SRoleRankUpRequest> _parser = new pb::MessageParser<C2SRoleRankUpRequest>(() => new C2SRoleRankUpRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SRoleRankUpRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    /// <summary>
    /// 角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CRoleRankUpResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CRoleRankUpResponse> _parser = new pb::MessageParser<S2CRoleRankUpResponse>(() => new S2CRoleRankUpResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CRoleRankUpResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    /// <summary>
    /// 角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "Rank" field.</summary>
    public const int RankFieldNumber = 2;
    private int rank_;
    /// <summary>
    /// 品阶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      if (Rank != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Rank);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 16: {
            Rank = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 角色分解
  /// </summary>
  public sealed class C2SRoleDecomposeRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SRoleDecomposeRequest> _parser = new pb::MessageParser<C2SRoleDecomposeRequest>(() => new C2SRoleDecomposeRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SRoleDecomposeRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "RoleIds" field.</summary>
    public const int RoleIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_roleIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> roleIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RoleIds {
      get { return roleIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roleIds_.WriteTo(output, _repeated_roleIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roleIds_.CalculateSize(_repeated_roleIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            roleIds_.AddEntriesFrom(input, _repeated_roleIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class S2CRoleDecomposeResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CRoleDecomposeResponse> _parser = new pb::MessageParser<S2CRoleDecomposeResponse>(() => new S2CRoleDecomposeResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CRoleDecomposeResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "RoleIds" field.</summary>
    public const int RoleIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_roleIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> roleIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RoleIds {
      get { return roleIds_; }
    }

    /// <summary>Field number for the "GetItems" field.</summary>
    public const int GetItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.ItemInfo> _repeated_getItems_codec
        = pb::FieldCodec.ForMessage(18, global::Msg.ClientMessage.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.ItemInfo> getItems_ = new pbc::RepeatedField<global::Msg.ClientMessage.ItemInfo>();
    /// <summary>
    /// 分解获得的物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.ItemInfo> GetItems {
      get { return getItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roleIds_.WriteTo(output, _repeated_roleIds_codec);
      getItems_.WriteTo(output, _repeated_getItems_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roleIds_.CalculateSize(_repeated_roleIds_codec);
      size += getItems_.CalculateSize(_repeated_getItems_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            roleIds_.AddEntriesFrom(input, _repeated_roleIds_codec);
            break;
          }
          case 18: {
            getItems_.AddEntriesFrom(input, _repeated_getItems_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 角色合成
  /// </summary>
  public sealed class C2SRoleFusionRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SRoleFusionRequest> _parser = new pb::MessageParser<C2SRoleFusionRequest>(() => new C2SRoleFusionRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SRoleFusionRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "FusionId" field.</summary>
    public const int FusionIdFieldNumber = 1;
    private int fusionId_;
    /// <summary>
    /// 合成ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FusionId {
      get { return fusionId_; }
      set {
        fusionId_ = value;
      }
    }

    /// <summary>Field number for the "MainCardId" field.</summary>
    public const int MainCardIdFieldNumber = 2;
    private int mainCardId_;
    /// <summary>
    /// 主卡ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MainCardId {
      get { return mainCardId_; }
      set {
        mainCardId_ = value;
      }
    }

    /// <summary>Field number for the "Cost1CardIds" field.</summary>
    public const int Cost1CardIdsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_cost1CardIds_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> cost1CardIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 消耗的card1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Cost1CardIds {
      get { return cost1CardIds_; }
    }

    /// <summary>Field number for the "Cost2CardIds" field.</summary>
    public const int Cost2CardIdsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_cost2CardIds_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> cost2CardIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 消耗的card2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Cost2CardIds {
      get { return cost2CardIds_; }
    }

    /// <summary>Field number for the "Cost3CardIds" field.</summary>
    public const int Cost3CardIdsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_cost3CardIds_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> cost3CardIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 消耗的card3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Cost3CardIds {
      get { return cost3CardIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FusionId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FusionId);
      }
      if (MainCardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MainCardId);
      }
      cost1CardIds_.WriteTo(output, _repeated_cost1CardIds_codec);
      cost2CardIds_.WriteTo(output, _repeated_cost2CardIds_codec);
      cost3CardIds_.WriteTo(output, _repeated_cost3CardIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FusionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FusionId);
      }
      if (MainCardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MainCardId);
      }
      size += cost1CardIds_.CalculateSize(_repeated_cost1CardIds_codec);
      size += cost2CardIds_.CalculateSize(_repeated_cost2CardIds_codec);
      size += cost3CardIds_.CalculateSize(_repeated_cost3CardIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FusionId = input.ReadInt32();
            break;
          }
          case 16: {
            MainCardId = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            cost1CardIds_.AddEntriesFrom(input, _repeated_cost1CardIds_codec);
            break;
          }
          case 34:
          case 32: {
            cost2CardIds_.AddEntriesFrom(input, _repeated_cost2CardIds_codec);
            break;
          }
          case 42:
          case 40: {
            cost3CardIds_.AddEntriesFrom(input, _repeated_cost3CardIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class S2CRoleFusionResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CRoleFusionResponse> _parser = new pb::MessageParser<S2CRoleFusionResponse>(() => new S2CRoleFusionResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CRoleFusionResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "NewCardId" field.</summary>
    public const int NewCardIdFieldNumber = 1;
    private int newCardId_;
    /// <summary>
    /// 生成的新卡，配置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewCardId {
      get { return newCardId_; }
      set {
        newCardId_ = value;
      }
    }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private int roleId_;
    /// <summary>
    /// 新卡的角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "GetItems" field.</summary>
    public const int GetItemsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.ItemInfo> _repeated_getItems_codec
        = pb::FieldCodec.ForMessage(26, global::Msg.ClientMessage.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.ItemInfo> getItems_ = new pbc::RepeatedField<global::Msg.ClientMessage.ItemInfo>();
    /// <summary>
    /// 返还的资源
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.ItemInfo> GetItems {
      get { return getItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NewCardId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NewCardId);
      }
      if (RoleId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoleId);
      }
      getItems_.WriteTo(output, _repeated_getItems_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NewCardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewCardId);
      }
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      size += getItems_.CalculateSize(_repeated_getItems_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NewCardId = input.ReadInt32();
            break;
          }
          case 16: {
            RoleId = input.ReadInt32();
            break;
          }
          case 26: {
            getItems_.AddEntriesFrom(input, _repeated_getItems_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 请求锁定角色
  /// </summary>
  public sealed class C2SRoleLockRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SRoleLockRequest> _parser = new pb::MessageParser<C2SRoleLockRequest>(() => new C2SRoleLockRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SRoleLockRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    /// <summary>
    /// 角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "IsLock" field.</summary>
    public const int IsLockFieldNumber = 2;
    private bool isLock_;
    /// <summary>
    /// 是否锁定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLock {
      get { return isLock_; }
      set {
        isLock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      if (IsLock != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsLock);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      if (IsLock != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 16: {
            IsLock = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CRoleLockResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CRoleLockResponse> _parser = new pb::MessageParser<S2CRoleLockResponse>(() => new S2CRoleLockResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CRoleLockResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    /// <summary>
    /// 角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "IsLock" field.</summary>
    public const int IsLockFieldNumber = 2;
    private bool isLock_;
    /// <summary>
    /// 是否锁定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLock {
      get { return isLock_; }
      set {
        isLock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      if (IsLock != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsLock);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      if (IsLock != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 16: {
            IsLock = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 角色图鉴请求
  /// </summary>
  public sealed class C2SRoleHandbookRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SRoleHandbookRequest> _parser = new pb::MessageParser<C2SRoleHandbookRequest>(() => new C2SRoleHandbookRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SRoleHandbookRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class S2CRoleHandbookResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CRoleHandbookResponse> _parser = new pb::MessageParser<S2CRoleHandbookResponse>(() => new S2CRoleHandbookResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CRoleHandbookResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "Roles" field.</summary>
    public const int RolesFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_roles_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> roles_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 图鉴
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Roles {
      get { return roles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roles_.WriteTo(output, _repeated_roles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roles_.CalculateSize(_repeated_roles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            roles_.AddEntriesFrom(input, _repeated_roles_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 左槽开启
  /// </summary>
  public sealed class C2SRoleLeftSlotOpenRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SRoleLeftSlotOpenRequest> _parser = new pb::MessageParser<C2SRoleLeftSlotOpenRequest>(() => new C2SRoleLeftSlotOpenRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SRoleLeftSlotOpenRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    /// <summary>
    /// 角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CRoleLeftSlotOpenResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CRoleLeftSlotOpenResponse> _parser = new pb::MessageParser<S2CRoleLeftSlotOpenResponse>(() => new S2CRoleLeftSlotOpenResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CRoleLeftSlotOpenResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    /// <summary>
    /// 角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 一键穿戴
  /// </summary>
  public sealed class C2SRoleOneKeyEquipRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SRoleOneKeyEquipRequest> _parser = new pb::MessageParser<C2SRoleOneKeyEquipRequest>(() => new C2SRoleOneKeyEquipRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SRoleOneKeyEquipRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    /// <summary>
    /// 角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "Equips" field.</summary>
    public const int EquipsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_equips_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> equips_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 待装备的物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Equips {
      get { return equips_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      equips_.WriteTo(output, _repeated_equips_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      size += equips_.CalculateSize(_repeated_equips_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            equips_.AddEntriesFrom(input, _repeated_equips_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class S2CRoleOneKeyEquipResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CRoleOneKeyEquipResponse> _parser = new pb::MessageParser<S2CRoleOneKeyEquipResponse>(() => new S2CRoleOneKeyEquipResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CRoleOneKeyEquipResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "Equips" field.</summary>
    public const int EquipsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_equips_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> equips_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 穿戴后的装备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Equips {
      get { return equips_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      equips_.WriteTo(output, _repeated_equips_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      size += equips_.CalculateSize(_repeated_equips_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            equips_.AddEntriesFrom(input, _repeated_equips_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 一键脱装
  /// </summary>
  public sealed class C2SRoleOnekeyUnequipRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SRoleOnekeyUnequipRequest> _parser = new pb::MessageParser<C2SRoleOnekeyUnequipRequest>(() => new C2SRoleOnekeyUnequipRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SRoleOnekeyUnequipRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CRoleOneKeyUnequipResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CRoleOneKeyUnequipResponse> _parser = new pb::MessageParser<S2CRoleOneKeyUnequipResponse>(() => new S2CRoleOneKeyUnequipResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CRoleOneKeyUnequipResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "Equips" field.</summary>
    public const int EquipsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_equips_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> equips_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 脱装后的装备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Equips {
      get { return equips_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      equips_.WriteTo(output, _repeated_equips_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      size += equips_.CalculateSize(_repeated_equips_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            equips_.AddEntriesFrom(input, _repeated_equips_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 左槽升级保存
  /// </summary>
  public sealed class C2SRoleLeftSlotResultSaveRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SRoleLeftSlotResultSaveRequest> _parser = new pb::MessageParser<C2SRoleLeftSlotResultSaveRequest>(() => new C2SRoleLeftSlotResultSaveRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SRoleLeftSlotResultSaveRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CRoleLeftSlotResultSaveResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CRoleLeftSlotResultSaveResponse> _parser = new pb::MessageParser<S2CRoleLeftSlotResultSaveResponse>(() => new S2CRoleLeftSlotResultSaveResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CRoleLeftSlotResultSaveResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 左槽升级取消
  /// </summary>
  public sealed class C2SRoleLeftSlotResultCancelRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SRoleLeftSlotResultCancelRequest> _parser = new pb::MessageParser<C2SRoleLeftSlotResultCancelRequest>(() => new C2SRoleLeftSlotResultCancelRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SRoleLeftSlotResultCancelRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CRoleLeftSlotResultCancelResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CRoleLeftSlotResultCancelResponse> _parser = new pb::MessageParser<S2CRoleLeftSlotResultCancelResponse>(() => new S2CRoleLeftSlotResultCancelResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CRoleLeftSlotResultCancelResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// --------------------------------- 邮件 -------------------------------------
  /// 发送邮件
  /// </summary>
  public sealed class C2SMailSendRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SMailSendRequest> _parser = new pb::MessageParser<C2SMailSendRequest>(() => new C2SMailSendRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SMailSendRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "ReceiverId" field.</summary>
    public const int ReceiverIdFieldNumber = 1;
    private int receiverId_;
    /// <summary>
    /// 接收者ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReceiverId {
      get { return receiverId_; }
      set {
        receiverId_ = value;
      }
    }

    /// <summary>Field number for the "MailType" field.</summary>
    public const int MailTypeFieldNumber = 2;
    private int mailType_;
    /// <summary>
    /// 邮件类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MailType {
      get { return mailType_; }
      set {
        mailType_ = value;
      }
    }

    /// <summary>Field number for the "MailTitle" field.</summary>
    public const int MailTitleFieldNumber = 3;
    private string mailTitle_ = "";
    /// <summary>
    /// 邮件标题
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MailTitle {
      get { return mailTitle_; }
      set {
        mailTitle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MailContent" field.</summary>
    public const int MailContentFieldNumber = 4;
    private string mailContent_ = "";
    /// <summary>
    /// 邮件内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MailContent {
      get { return mailContent_; }
      set {
        mailContent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AttachedItems" field.</summary>
    public const int AttachedItemsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.ItemInfo> _repeated_attachedItems_codec
        = pb::FieldCodec.ForMessage(42, global::Msg.ClientMessage.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.ItemInfo> attachedItems_ = new pbc::RepeatedField<global::Msg.ClientMessage.ItemInfo>();
    /// <summary>
    /// 附加物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.ItemInfo> AttachedItems {
      get { return attachedItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReceiverId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReceiverId);
      }
      if (MailType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MailType);
      }
      if (MailTitle.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MailTitle);
      }
      if (MailContent.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MailContent);
      }
      attachedItems_.WriteTo(output, _repeated_attachedItems_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReceiverId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReceiverId);
      }
      if (MailType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MailType);
      }
      if (MailTitle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MailTitle);
      }
      if (MailContent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MailContent);
      }
      size += attachedItems_.CalculateSize(_repeated_attachedItems_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReceiverId = input.ReadInt32();
            break;
          }
          case 16: {
            MailType = input.ReadInt32();
            break;
          }
          case 26: {
            MailTitle = input.ReadString();
            break;
          }
          case 34: {
            MailContent = input.ReadString();
            break;
          }
          case 42: {
            attachedItems_.AddEntriesFrom(input, _repeated_attachedItems_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class S2CMailSendResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CMailSendResponse> _parser = new pb::MessageParser<S2CMailSendResponse>(() => new S2CMailSendResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CMailSendResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "MailId" field.</summary>
    public const int MailIdFieldNumber = 1;
    private int mailId_;
    /// <summary>
    /// 邮件ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MailId {
      get { return mailId_; }
      set {
        mailId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MailId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MailId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MailId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MailId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MailId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获取邮件列表
  /// </summary>
  public sealed class C2SMailListRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SMailListRequest> _parser = new pb::MessageParser<C2SMailListRequest>(() => new C2SMailListRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SMailListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class MailBasicData : pb::IMessage {
    private static readonly pb::MessageParser<MailBasicData> _parser = new pb::MessageParser<MailBasicData>(() => new MailBasicData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MailBasicData> Parser { get { return _parser; } }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 邮件ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    /// 邮件类型   1 系统  2 个人  3 公会群发
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Title" field.</summary>
    public const int TitleFieldNumber = 3;
    private string title_ = "";
    /// <summary>
    /// 邮件标题
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SenderName" field.</summary>
    public const int SenderNameFieldNumber = 4;
    private string senderName_ = "";
    /// <summary>
    /// 发送者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SenderName {
      get { return senderName_; }
      set {
        senderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SenderId" field.</summary>
    public const int SenderIdFieldNumber = 5;
    private int senderId_;
    /// <summary>
    /// 发送者ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SenderId {
      get { return senderId_; }
      set {
        senderId_ = value;
      }
    }

    /// <summary>Field number for the "SendTime" field.</summary>
    public const int SendTimeFieldNumber = 6;
    private int sendTime_;
    /// <summary>
    /// 发送时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SendTime {
      get { return sendTime_; }
      set {
        sendTime_ = value;
      }
    }

    /// <summary>Field number for the "IsRead" field.</summary>
    public const int IsReadFieldNumber = 7;
    private bool isRead_;
    /// <summary>
    /// 是否已读
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRead {
      get { return isRead_; }
      set {
        isRead_ = value;
      }
    }

    /// <summary>Field number for the "IsGetAttached" field.</summary>
    public const int IsGetAttachedFieldNumber = 8;
    private bool isGetAttached_;
    /// <summary>
    /// 是否已领取附件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGetAttached {
      get { return isGetAttached_; }
      set {
        isGetAttached_ = value;
      }
    }

    /// <summary>Field number for the "HasAttached" field.</summary>
    public const int HasAttachedFieldNumber = 9;
    private bool hasAttached_;
    /// <summary>
    /// 是否有附件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAttached {
      get { return hasAttached_; }
      set {
        hasAttached_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Title);
      }
      if (SenderName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SenderName);
      }
      if (SenderId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SenderId);
      }
      if (SendTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SendTime);
      }
      if (IsRead != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsRead);
      }
      if (IsGetAttached != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsGetAttached);
      }
      if (HasAttached != false) {
        output.WriteRawTag(72);
        output.WriteBool(HasAttached);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (SenderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderName);
      }
      if (SenderId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SenderId);
      }
      if (SendTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SendTime);
      }
      if (IsRead != false) {
        size += 1 + 1;
      }
      if (IsGetAttached != false) {
        size += 1 + 1;
      }
      if (HasAttached != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 26: {
            Title = input.ReadString();
            break;
          }
          case 34: {
            SenderName = input.ReadString();
            break;
          }
          case 40: {
            SenderId = input.ReadInt32();
            break;
          }
          case 48: {
            SendTime = input.ReadInt32();
            break;
          }
          case 56: {
            IsRead = input.ReadBool();
            break;
          }
          case 64: {
            IsGetAttached = input.ReadBool();
            break;
          }
          case 72: {
            HasAttached = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CMailListResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CMailListResponse> _parser = new pb::MessageParser<S2CMailListResponse>(() => new S2CMailListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CMailListResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "Mails" field.</summary>
    public const int MailsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.MailBasicData> _repeated_mails_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.ClientMessage.MailBasicData.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.MailBasicData> mails_ = new pbc::RepeatedField<global::Msg.ClientMessage.MailBasicData>();
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.MailBasicData> Mails {
      get { return mails_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mails_.WriteTo(output, _repeated_mails_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mails_.CalculateSize(_repeated_mails_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            mails_.AddEntriesFrom(input, _repeated_mails_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 请求邮件具体内容
  /// </summary>
  public sealed class C2SMailDetailRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SMailDetailRequest> _parser = new pb::MessageParser<C2SMailDetailRequest>(() => new C2SMailDetailRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SMailDetailRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "Ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_ids_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> ids_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 邮件ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Ids {
      get { return ids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ids_.WriteTo(output, _repeated_ids_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ids_.CalculateSize(_repeated_ids_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class MailDetail : pb::IMessage {
    private static readonly pb::MessageParser<MailDetail> _parser = new pb::MessageParser<MailDetail>(() => new MailDetail());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MailDetail> Parser { get { return _parser; } }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 邮件ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 2;
    private string content_ = "";
    /// <summary>
    /// 邮件内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AttachedItems" field.</summary>
    public const int AttachedItemsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.ItemInfo> _repeated_attachedItems_codec
        = pb::FieldCodec.ForMessage(26, global::Msg.ClientMessage.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.ItemInfo> attachedItems_ = new pbc::RepeatedField<global::Msg.ClientMessage.ItemInfo>();
    /// <summary>
    /// 附加物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.ItemInfo> AttachedItems {
      get { return attachedItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Content);
      }
      attachedItems_.WriteTo(output, _repeated_attachedItems_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      size += attachedItems_.CalculateSize(_repeated_attachedItems_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Content = input.ReadString();
            break;
          }
          case 26: {
            attachedItems_.AddEntriesFrom(input, _repeated_attachedItems_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class S2CMailDetailResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CMailDetailResponse> _parser = new pb::MessageParser<S2CMailDetailResponse>(() => new S2CMailDetailResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CMailDetailResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "Mails" field.</summary>
    public const int MailsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.MailDetail> _repeated_mails_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.ClientMessage.MailDetail.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.MailDetail> mails_ = new pbc::RepeatedField<global::Msg.ClientMessage.MailDetail>();
    /// <summary>
    /// 邮件细节
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.MailDetail> Mails {
      get { return mails_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mails_.WriteTo(output, _repeated_mails_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mails_.CalculateSize(_repeated_mails_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            mails_.AddEntriesFrom(input, _repeated_mails_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获取邮件附加物品
  /// </summary>
  public sealed class C2SMailGetAttachedItemsRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SMailGetAttachedItemsRequest> _parser = new pb::MessageParser<C2SMailGetAttachedItemsRequest>(() => new C2SMailGetAttachedItemsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SMailGetAttachedItemsRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "MailIds" field.</summary>
    public const int MailIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_mailIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> mailIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 邮件ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MailIds {
      get { return mailIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mailIds_.WriteTo(output, _repeated_mailIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mailIds_.CalculateSize(_repeated_mailIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            mailIds_.AddEntriesFrom(input, _repeated_mailIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class S2CMailGetAttachedItemsResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CMailGetAttachedItemsResponse> _parser = new pb::MessageParser<S2CMailGetAttachedItemsResponse>(() => new S2CMailGetAttachedItemsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CMailGetAttachedItemsResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "MailIds" field.</summary>
    public const int MailIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_mailIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> mailIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 邮件ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MailIds {
      get { return mailIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mailIds_.WriteTo(output, _repeated_mailIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mailIds_.CalculateSize(_repeated_mailIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            mailIds_.AddEntriesFrom(input, _repeated_mailIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 删除邮件
  /// </summary>
  public sealed class C2SMailDeleteRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SMailDeleteRequest> _parser = new pb::MessageParser<C2SMailDeleteRequest>(() => new C2SMailDeleteRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SMailDeleteRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "MailIds" field.</summary>
    public const int MailIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_mailIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> mailIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 邮件ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MailIds {
      get { return mailIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mailIds_.WriteTo(output, _repeated_mailIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mailIds_.CalculateSize(_repeated_mailIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            mailIds_.AddEntriesFrom(input, _repeated_mailIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class S2CMailDeleteResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CMailDeleteResponse> _parser = new pb::MessageParser<S2CMailDeleteResponse>(() => new S2CMailDeleteResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CMailDeleteResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "MailIds" field.</summary>
    public const int MailIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_mailIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> mailIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 邮件ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MailIds {
      get { return mailIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mailIds_.WriteTo(output, _repeated_mailIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mailIds_.CalculateSize(_repeated_mailIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            mailIds_.AddEntriesFrom(input, _repeated_mailIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 新邮件通知
  /// </summary>
  public sealed class S2CMailsNewNotify : pb::IMessage {
    private static readonly pb::MessageParser<S2CMailsNewNotify> _parser = new pb::MessageParser<S2CMailsNewNotify>(() => new S2CMailsNewNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CMailsNewNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "Mails" field.</summary>
    public const int MailsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.MailBasicData> _repeated_mails_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.ClientMessage.MailBasicData.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.MailBasicData> mails_ = new pbc::RepeatedField<global::Msg.ClientMessage.MailBasicData>();
    /// <summary>
    /// 新邮件基本数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.MailBasicData> Mails {
      get { return mails_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mails_.WriteTo(output, _repeated_mails_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mails_.CalculateSize(_repeated_mails_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            mails_.AddEntriesFrom(input, _repeated_mails_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// --------------------------------- 天赋 -------------------------------------
  /// 天赋升级
  /// </summary>
  public sealed class C2STalentUpRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2STalentUpRequest> _parser = new pb::MessageParser<C2STalentUpRequest>(() => new C2STalentUpRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2STalentUpRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "TalentId" field.</summary>
    public const int TalentIdFieldNumber = 1;
    private int talentId_;
    /// <summary>
    /// 天赋基础ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TalentId {
      get { return talentId_; }
      set {
        talentId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TalentId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TalentId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TalentId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TalentId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TalentId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CTalentUpResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CTalentUpResponse> _parser = new pb::MessageParser<S2CTalentUpResponse>(() => new S2CTalentUpResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CTalentUpResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "TalentId" field.</summary>
    public const int TalentIdFieldNumber = 1;
    private int talentId_;
    /// <summary>
    /// 天赋基础ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TalentId {
      get { return talentId_; }
      set {
        talentId_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TalentId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TalentId);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TalentId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TalentId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TalentId = input.ReadInt32();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 请求天赋列表
  /// </summary>
  public sealed class C2STalentListRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2STalentListRequest> _parser = new pb::MessageParser<C2STalentListRequest>(() => new C2STalentListRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2STalentListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class TalentInfo : pb::IMessage {
    private static readonly pb::MessageParser<TalentInfo> _parser = new pb::MessageParser<TalentInfo>(() => new TalentInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TalentInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 天赋基础ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CTalentListResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CTalentListResponse> _parser = new pb::MessageParser<S2CTalentListResponse>(() => new S2CTalentListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CTalentListResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "Talents" field.</summary>
    public const int TalentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.TalentInfo> _repeated_talents_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.ClientMessage.TalentInfo.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.TalentInfo> talents_ = new pbc::RepeatedField<global::Msg.ClientMessage.TalentInfo>();
    /// <summary>
    /// 天赋列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.TalentInfo> Talents {
      get { return talents_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      talents_.WriteTo(output, _repeated_talents_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += talents_.CalculateSize(_repeated_talents_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            talents_.AddEntriesFrom(input, _repeated_talents_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 天赋重置
  /// </summary>
  public sealed class C2STalentResetRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2STalentResetRequest> _parser = new pb::MessageParser<C2STalentResetRequest>(() => new C2STalentResetRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2STalentResetRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "Tag" field.</summary>
    public const int TagFieldNumber = 1;
    private int tag_;
    /// <summary>
    /// 页签
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tag {
      get { return tag_; }
      set {
        tag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tag != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Tag);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tag);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Tag = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CTalentResetResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CTalentResetResponse> _parser = new pb::MessageParser<S2CTalentResetResponse>(() => new S2CTalentResetResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CTalentResetResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "Tag" field.</summary>
    public const int TagFieldNumber = 1;
    private int tag_;
    /// <summary>
    /// 页签
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tag {
      get { return tag_; }
      set {
        tag_ = value;
      }
    }

    /// <summary>Field number for the "CostDiamond" field.</summary>
    public const int CostDiamondFieldNumber = 2;
    private int costDiamond_;
    /// <summary>
    /// 消耗的物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CostDiamond {
      get { return costDiamond_; }
      set {
        costDiamond_ = value;
      }
    }

    /// <summary>Field number for the "ReturnItems" field.</summary>
    public const int ReturnItemsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_returnItems_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> returnItems_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 返还的物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ReturnItems {
      get { return returnItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tag != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Tag);
      }
      if (CostDiamond != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CostDiamond);
      }
      returnItems_.WriteTo(output, _repeated_returnItems_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tag);
      }
      if (CostDiamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CostDiamond);
      }
      size += returnItems_.CalculateSize(_repeated_returnItems_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Tag = input.ReadInt32();
            break;
          }
          case 16: {
            CostDiamond = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            returnItems_.AddEntriesFrom(input, _repeated_returnItems_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// --------------------------------- 爬塔 ------------------------------------
  /// 请求爬塔数据
  /// </summary>
  public sealed class C2STowerDataRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2STowerDataRequest> _parser = new pb::MessageParser<C2STowerDataRequest>(() => new C2STowerDataRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2STowerDataRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class S2CTowerDataResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CTowerDataResponse> _parser = new pb::MessageParser<S2CTowerDataResponse>(() => new S2CTowerDataResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CTowerDataResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "CurrTowerId" field.</summary>
    public const int CurrTowerIdFieldNumber = 1;
    private int currTowerId_;
    /// <summary>
    /// 当前层
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrTowerId {
      get { return currTowerId_; }
      set {
        currTowerId_ = value;
      }
    }

    /// <summary>Field number for the "TowerKeys" field.</summary>
    public const int TowerKeysFieldNumber = 2;
    private int towerKeys_;
    /// <summary>
    /// 钥匙数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TowerKeys {
      get { return towerKeys_; }
      set {
        towerKeys_ = value;
      }
    }

    /// <summary>Field number for the "RemainSeconds" field.</summary>
    public const int RemainSecondsFieldNumber = 3;
    private int remainSeconds_;
    /// <summary>
    /// 剩余秒数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainSeconds {
      get { return remainSeconds_; }
      set {
        remainSeconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrTowerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrTowerId);
      }
      if (TowerKeys != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TowerKeys);
      }
      if (RemainSeconds != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RemainSeconds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrTowerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrTowerId);
      }
      if (TowerKeys != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TowerKeys);
      }
      if (RemainSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainSeconds);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurrTowerId = input.ReadInt32();
            break;
          }
          case 16: {
            TowerKeys = input.ReadInt32();
            break;
          }
          case 24: {
            RemainSeconds = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 请求爬塔某层录像
  /// </summary>
  public sealed class C2STowerRecordsInfoRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2STowerRecordsInfoRequest> _parser = new pb::MessageParser<C2STowerRecordsInfoRequest>(() => new C2STowerRecordsInfoRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2STowerRecordsInfoRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "TowerId" field.</summary>
    public const int TowerIdFieldNumber = 1;
    private int towerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TowerId {
      get { return towerId_; }
      set {
        towerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TowerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TowerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TowerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TowerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TowerId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class TowerFightRecord : pb::IMessage {
    private static readonly pb::MessageParser<TowerFightRecord> _parser = new pb::MessageParser<TowerFightRecord>(() => new TowerFightRecord());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TowerFightRecord> Parser { get { return _parser; } }

    /// <summary>Field number for the "TowerFightId" field.</summary>
    public const int TowerFightIdFieldNumber = 1;
    private int towerFightId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TowerFightId {
      get { return towerFightId_; }
      set {
        towerFightId_ = value;
      }
    }

    /// <summary>Field number for the "AttackerId" field.</summary>
    public const int AttackerIdFieldNumber = 2;
    private int attackerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackerId {
      get { return attackerId_; }
      set {
        attackerId_ = value;
      }
    }

    /// <summary>Field number for the "AttackerName" field.</summary>
    public const int AttackerNameFieldNumber = 3;
    private string attackerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AttackerName {
      get { return attackerName_; }
      set {
        attackerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CreateTime" field.</summary>
    public const int CreateTimeFieldNumber = 4;
    private int createTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "AttackerHead" field.</summary>
    public const int AttackerHeadFieldNumber = 5;
    private int attackerHead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackerHead {
      get { return attackerHead_; }
      set {
        attackerHead_ = value;
      }
    }

    /// <summary>Field number for the "AttackerLevel" field.</summary>
    public const int AttackerLevelFieldNumber = 6;
    private int attackerLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackerLevel {
      get { return attackerLevel_; }
      set {
        attackerLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TowerFightId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TowerFightId);
      }
      if (AttackerId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AttackerId);
      }
      if (AttackerName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AttackerName);
      }
      if (CreateTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CreateTime);
      }
      if (AttackerHead != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AttackerHead);
      }
      if (AttackerLevel != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AttackerLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TowerFightId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TowerFightId);
      }
      if (AttackerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackerId);
      }
      if (AttackerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AttackerName);
      }
      if (CreateTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CreateTime);
      }
      if (AttackerHead != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackerHead);
      }
      if (AttackerLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackerLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TowerFightId = input.ReadInt32();
            break;
          }
          case 16: {
            AttackerId = input.ReadInt32();
            break;
          }
          case 26: {
            AttackerName = input.ReadString();
            break;
          }
          case 32: {
            CreateTime = input.ReadInt32();
            break;
          }
          case 40: {
            AttackerHead = input.ReadInt32();
            break;
          }
          case 48: {
            AttackerLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CTowerRecordsInfoResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CTowerRecordsInfoResponse> _parser = new pb::MessageParser<S2CTowerRecordsInfoResponse>(() => new S2CTowerRecordsInfoResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CTowerRecordsInfoResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "Records" field.</summary>
    public const int RecordsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.TowerFightRecord> _repeated_records_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.ClientMessage.TowerFightRecord.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.TowerFightRecord> records_ = new pbc::RepeatedField<global::Msg.ClientMessage.TowerFightRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.TowerFightRecord> Records {
      get { return records_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      records_.WriteTo(output, _repeated_records_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += records_.CalculateSize(_repeated_records_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            records_.AddEntriesFrom(input, _repeated_records_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 请求爬塔的某个录像具体数据
  /// </summary>
  public sealed class C2STowerRecordDataRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2STowerRecordDataRequest> _parser = new pb::MessageParser<C2STowerRecordDataRequest>(() => new C2STowerRecordDataRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2STowerRecordDataRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "TowerFightId" field.</summary>
    public const int TowerFightIdFieldNumber = 1;
    private int towerFightId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TowerFightId {
      get { return towerFightId_; }
      set {
        towerFightId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TowerFightId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TowerFightId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TowerFightId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TowerFightId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TowerFightId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CTowerRecordDataResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CTowerRecordDataResponse> _parser = new pb::MessageParser<S2CTowerRecordDataResponse>(() => new S2CTowerRecordDataResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CTowerRecordDataResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "RecordData" field.</summary>
    public const int RecordDataFieldNumber = 1;
    private pb::ByteString recordData_ = pb::ByteString.Empty;
    /// <summary>
    /// 对应S2CBattleResultResponse的pb序列化数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RecordData {
      get { return recordData_; }
      set {
        recordData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RecordData.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(RecordData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecordData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RecordData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RecordData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 请求爬塔排行榜
  /// </summary>
  public sealed class C2STowerRankingListRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2STowerRankingListRequest> _parser = new pb::MessageParser<C2STowerRankingListRequest>(() => new C2STowerRankingListRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2STowerRankingListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class TowerRankInfo : pb::IMessage {
    private static readonly pb::MessageParser<TowerRankInfo> _parser = new pb::MessageParser<TowerRankInfo>(() => new TowerRankInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TowerRankInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "PlayerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "PlayerName" field.</summary>
    public const int PlayerNameFieldNumber = 2;
    private string playerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TowerId" field.</summary>
    public const int TowerIdFieldNumber = 3;
    private int towerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TowerId {
      get { return towerId_; }
      set {
        towerId_ = value;
      }
    }

    /// <summary>Field number for the "PlayerLevel" field.</summary>
    public const int PlayerLevelFieldNumber = 4;
    private int playerLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerLevel {
      get { return playerLevel_; }
      set {
        playerLevel_ = value;
      }
    }

    /// <summary>Field number for the "PlayerHead" field.</summary>
    public const int PlayerHeadFieldNumber = 5;
    private int playerHead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerHead {
      get { return playerHead_; }
      set {
        playerHead_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerName);
      }
      if (TowerId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TowerId);
      }
      if (PlayerLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PlayerLevel);
      }
      if (PlayerHead != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PlayerHead);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (TowerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TowerId);
      }
      if (PlayerLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerLevel);
      }
      if (PlayerHead != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerHead);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 18: {
            PlayerName = input.ReadString();
            break;
          }
          case 24: {
            TowerId = input.ReadInt32();
            break;
          }
          case 32: {
            PlayerLevel = input.ReadInt32();
            break;
          }
          case 40: {
            PlayerHead = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CTowerRankingListResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CTowerRankingListResponse> _parser = new pb::MessageParser<S2CTowerRankingListResponse>(() => new S2CTowerRankingListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CTowerRankingListResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "Ranks" field.</summary>
    public const int RanksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.TowerRankInfo> _repeated_ranks_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.ClientMessage.TowerRankInfo.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.TowerRankInfo> ranks_ = new pbc::RepeatedField<global::Msg.ClientMessage.TowerRankInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.TowerRankInfo> Ranks {
      get { return ranks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ranks_.WriteTo(output, _repeated_ranks_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ranks_.CalculateSize(_repeated_ranks_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ranks_.AddEntriesFrom(input, _repeated_ranks_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ---------------------------------- 抽卡 ------------------------------------
  /// 请求抽卡数据
  /// </summary>
  public sealed class C2SDrawDataRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SDrawDataRequest> _parser = new pb::MessageParser<C2SDrawDataRequest>(() => new C2SDrawDataRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SDrawDataRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///map&lt;int32,int32> FreeDrawRemainSeconds	= 1; // 免费抽卡剩余时间    key 抽卡ID  value 抽卡剩余时间
  /// </summary>
  public sealed class S2CDrawDataResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CDrawDataResponse> _parser = new pb::MessageParser<S2CDrawDataResponse>(() => new S2CDrawDataResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CDrawDataResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 请求抽卡
  /// </summary>
  public sealed class C2SDrawCardRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SDrawCardRequest> _parser = new pb::MessageParser<C2SDrawCardRequest>(() => new C2SDrawCardRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SDrawCardRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "DrawType" field.</summary>
    public const int DrawTypeFieldNumber = 1;
    private int drawType_;
    /// <summary>
    /// 抽卡类型  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DrawType {
      get { return drawType_; }
      set {
        drawType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DrawType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DrawType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DrawType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DrawType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DrawType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CDrawCardResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CDrawCardResponse> _parser = new pb::MessageParser<S2CDrawCardResponse>(() => new S2CDrawCardResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CDrawCardResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "DrawType" field.</summary>
    public const int DrawTypeFieldNumber = 1;
    private int drawType_;
    /// <summary>
    /// 抽卡类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DrawType {
      get { return drawType_; }
      set {
        drawType_ = value;
      }
    }

    /// <summary>Field number for the "RoleTableId" field.</summary>
    public const int RoleTableIdFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_roleTableId_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> roleTableId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 抽到的角色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RoleTableId {
      get { return roleTableId_; }
    }

    /// <summary>Field number for the "IsFreeDraw" field.</summary>
    public const int IsFreeDrawFieldNumber = 3;
    private bool isFreeDraw_;
    /// <summary>
    /// 是否免费抽卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFreeDraw {
      get { return isFreeDraw_; }
      set {
        isFreeDraw_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DrawType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DrawType);
      }
      roleTableId_.WriteTo(output, _repeated_roleTableId_codec);
      if (IsFreeDraw != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsFreeDraw);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DrawType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DrawType);
      }
      size += roleTableId_.CalculateSize(_repeated_roleTableId_codec);
      if (IsFreeDraw != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DrawType = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            roleTableId_.AddEntriesFrom(input, _repeated_roleTableId_codec);
            break;
          }
          case 24: {
            IsFreeDraw = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ---------------------------------- 点金手 ----------------------------------
  /// 请求点金
  /// </summary>
  public sealed class C2STouchGoldRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2STouchGoldRequest> _parser = new pb::MessageParser<C2STouchGoldRequest>(() => new C2STouchGoldRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2STouchGoldRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    /// 点金类型   1(免费), 2, 3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CTouchGoldResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CTouchGoldResponse> _parser = new pb::MessageParser<S2CTouchGoldResponse>(() => new S2CTouchGoldResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CTouchGoldResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    /// 点金类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "GetGold" field.</summary>
    public const int GetGoldFieldNumber = 2;
    private int getGold_;
    /// <summary>
    /// 获得金币数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GetGold {
      get { return getGold_; }
      set {
        getGold_ = value;
      }
    }

    /// <summary>Field number for the "CostDiamond" field.</summary>
    public const int CostDiamondFieldNumber = 3;
    private int costDiamond_;
    /// <summary>
    /// 消耗钻石数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CostDiamond {
      get { return costDiamond_; }
      set {
        costDiamond_ = value;
      }
    }

    /// <summary>Field number for the "NextRefreshRemainSeconds" field.</summary>
    public const int NextRefreshRemainSecondsFieldNumber = 4;
    private int nextRefreshRemainSeconds_;
    /// <summary>
    /// 下次剩余刷新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextRefreshRemainSeconds {
      get { return nextRefreshRemainSeconds_; }
      set {
        nextRefreshRemainSeconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (GetGold != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GetGold);
      }
      if (CostDiamond != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CostDiamond);
      }
      if (NextRefreshRemainSeconds != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NextRefreshRemainSeconds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (GetGold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GetGold);
      }
      if (CostDiamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CostDiamond);
      }
      if (NextRefreshRemainSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextRefreshRemainSeconds);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            GetGold = input.ReadInt32();
            break;
          }
          case 24: {
            CostDiamond = input.ReadInt32();
            break;
          }
          case 32: {
            NextRefreshRemainSeconds = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 点金手数据
  /// </summary>
  public sealed class C2SGoldHandDataRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SGoldHandDataRequest> _parser = new pb::MessageParser<C2SGoldHandDataRequest>(() => new C2SGoldHandDataRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SGoldHandDataRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class S2CGoldHandDataResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CGoldHandDataResponse> _parser = new pb::MessageParser<S2CGoldHandDataResponse>(() => new S2CGoldHandDataResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGoldHandDataResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "RemainRefreshSeconds" field.</summary>
    public const int RemainRefreshSecondsFieldNumber = 1;
    private int remainRefreshSeconds_;
    /// <summary>
    /// 剩余刷新时间(秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainRefreshSeconds {
      get { return remainRefreshSeconds_; }
      set {
        remainRefreshSeconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RemainRefreshSeconds != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RemainRefreshSeconds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RemainRefreshSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainRefreshSeconds);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RemainRefreshSeconds = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ---------------------------------- 商店 ------------------------------------
  /// 请求商店
  /// </summary>
  public sealed class C2SShopDataRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SShopDataRequest> _parser = new pb::MessageParser<C2SShopDataRequest>(() => new C2SShopDataRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SShopDataRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "ShopId" field.</summary>
    public const int ShopIdFieldNumber = 1;
    private int shopId_;
    /// <summary>
    /// 商店ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShopId {
      get { return shopId_; }
      set {
        shopId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShopId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ShopId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShopId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShopId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShopId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ShopItem : pb::IMessage {
    private static readonly pb::MessageParser<ShopItem> _parser = new pb::MessageParser<ShopItem>(() => new ShopItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShopItem> Parser { get { return _parser; } }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 商品ID  服务器自动生成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "ItemId" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private int itemId_;
    /// <summary>
    /// 商品配置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "CostResource" field.</summary>
    public const int CostResourceFieldNumber = 3;
    private global::Msg.ClientMessage.ItemInfo costResource_;
    /// <summary>
    /// 需要花费的货币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.ClientMessage.ItemInfo CostResource {
      get { return costResource_; }
      set {
        costResource_ = value;
      }
    }

    /// <summary>Field number for the "BuyNum" field.</summary>
    public const int BuyNumFieldNumber = 4;
    private int buyNum_;
    /// <summary>
    /// 剩余购买次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuyNum {
      get { return buyNum_; }
      set {
        buyNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (ItemId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemId);
      }
      if (costResource_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CostResource);
      }
      if (BuyNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BuyNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (costResource_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CostResource);
      }
      if (BuyNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuyNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            ItemId = input.ReadInt32();
            break;
          }
          case 26: {
            if (costResource_ == null) {
              costResource_ = new global::Msg.ClientMessage.ItemInfo();
            }
            input.ReadMessage(costResource_);
            break;
          }
          case 32: {
            BuyNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CShopDataResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CShopDataResponse> _parser = new pb::MessageParser<S2CShopDataResponse>(() => new S2CShopDataResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CShopDataResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "ShopId" field.</summary>
    public const int ShopIdFieldNumber = 1;
    private int shopId_;
    /// <summary>
    /// 商店ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShopId {
      get { return shopId_; }
      set {
        shopId_ = value;
      }
    }

    /// <summary>Field number for the "Items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.ShopItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(18, global::Msg.ClientMessage.ShopItem.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.ShopItem> items_ = new pbc::RepeatedField<global::Msg.ClientMessage.ShopItem>();
    /// <summary>
    /// 商店商品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.ShopItem> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "NextFreeRefreshRemainSeconds" field.</summary>
    public const int NextFreeRefreshRemainSecondsFieldNumber = 3;
    private int nextFreeRefreshRemainSeconds_;
    /// <summary>
    /// -1 代表没有
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextFreeRefreshRemainSeconds {
      get { return nextFreeRefreshRemainSeconds_; }
      set {
        nextFreeRefreshRemainSeconds_ = value;
      }
    }

    /// <summary>Field number for the "NextAutoRefreshRemainSeconds" field.</summary>
    public const int NextAutoRefreshRemainSecondsFieldNumber = 4;
    private int nextAutoRefreshRemainSeconds_;
    /// <summary>
    /// -1 代表没有
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextAutoRefreshRemainSeconds {
      get { return nextAutoRefreshRemainSeconds_; }
      set {
        nextAutoRefreshRemainSeconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShopId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ShopId);
      }
      items_.WriteTo(output, _repeated_items_codec);
      if (NextFreeRefreshRemainSeconds != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NextFreeRefreshRemainSeconds);
      }
      if (NextAutoRefreshRemainSeconds != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NextAutoRefreshRemainSeconds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShopId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShopId);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      if (NextFreeRefreshRemainSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextFreeRefreshRemainSeconds);
      }
      if (NextAutoRefreshRemainSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextAutoRefreshRemainSeconds);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShopId = input.ReadInt32();
            break;
          }
          case 18: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 24: {
            NextFreeRefreshRemainSeconds = input.ReadInt32();
            break;
          }
          case 32: {
            NextAutoRefreshRemainSeconds = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 请求购买商品
  /// </summary>
  public sealed class C2SShopBuyItemRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SShopBuyItemRequest> _parser = new pb::MessageParser<C2SShopBuyItemRequest>(() => new C2SShopBuyItemRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SShopBuyItemRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "ShopId" field.</summary>
    public const int ShopIdFieldNumber = 1;
    private int shopId_;
    /// <summary>
    /// 商店ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShopId {
      get { return shopId_; }
      set {
        shopId_ = value;
      }
    }

    /// <summary>Field number for the "ItemId" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private int itemId_;
    /// <summary>
    /// 商品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "BuyNum" field.</summary>
    public const int BuyNumFieldNumber = 3;
    private int buyNum_;
    /// <summary>
    /// 商品数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuyNum {
      get { return buyNum_; }
      set {
        buyNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShopId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ShopId);
      }
      if (ItemId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemId);
      }
      if (BuyNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BuyNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShopId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShopId);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (BuyNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuyNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShopId = input.ReadInt32();
            break;
          }
          case 16: {
            ItemId = input.ReadInt32();
            break;
          }
          case 24: {
            BuyNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CShopBuyItemResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CShopBuyItemResponse> _parser = new pb::MessageParser<S2CShopBuyItemResponse>(() => new S2CShopBuyItemResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CShopBuyItemResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "ShopId" field.</summary>
    public const int ShopIdFieldNumber = 1;
    private int shopId_;
    /// <summary>
    /// 商店ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShopId {
      get { return shopId_; }
      set {
        shopId_ = value;
      }
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    /// <summary>
    /// 商品ID  服务器自动生成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "BuyNum" field.</summary>
    public const int BuyNumFieldNumber = 3;
    private int buyNum_;
    /// <summary>
    /// 购买次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuyNum {
      get { return buyNum_; }
      set {
        buyNum_ = value;
      }
    }

    /// <summary>Field number for the "RemainBuyNum" field.</summary>
    public const int RemainBuyNumFieldNumber = 4;
    private int remainBuyNum_;
    /// <summary>
    /// 剩余购买购买
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainBuyNum {
      get { return remainBuyNum_; }
      set {
        remainBuyNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShopId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ShopId);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (BuyNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BuyNum);
      }
      if (RemainBuyNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RemainBuyNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShopId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShopId);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (BuyNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuyNum);
      }
      if (RemainBuyNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainBuyNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShopId = input.ReadInt32();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 24: {
            BuyNum = input.ReadInt32();
            break;
          }
          case 32: {
            RemainBuyNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 刷新商店
  /// </summary>
  public sealed class C2SShopRefreshRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SShopRefreshRequest> _parser = new pb::MessageParser<C2SShopRefreshRequest>(() => new C2SShopRefreshRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SShopRefreshRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "ShopId" field.</summary>
    public const int ShopIdFieldNumber = 1;
    private int shopId_;
    /// <summary>
    /// 商店ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShopId {
      get { return shopId_; }
      set {
        shopId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShopId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ShopId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShopId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShopId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShopId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CShopRefreshResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CShopRefreshResponse> _parser = new pb::MessageParser<S2CShopRefreshResponse>(() => new S2CShopRefreshResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CShopRefreshResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "ShopId" field.</summary>
    public const int ShopIdFieldNumber = 1;
    private int shopId_;
    /// <summary>
    /// 商店ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShopId {
      get { return shopId_; }
      set {
        shopId_ = value;
      }
    }

    /// <summary>Field number for the "IsFreeRefresh" field.</summary>
    public const int IsFreeRefreshFieldNumber = 2;
    private bool isFreeRefresh_;
    /// <summary>
    /// 是否免费 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFreeRefresh {
      get { return isFreeRefresh_; }
      set {
        isFreeRefresh_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShopId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ShopId);
      }
      if (IsFreeRefresh != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsFreeRefresh);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShopId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShopId);
      }
      if (IsFreeRefresh != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShopId = input.ReadInt32();
            break;
          }
          case 16: {
            IsFreeRefresh = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 商店自动刷新通知
  /// </summary>
  public sealed class S2CShopAutoRefreshNotify : pb::IMessage {
    private static readonly pb::MessageParser<S2CShopAutoRefreshNotify> _parser = new pb::MessageParser<S2CShopAutoRefreshNotify>(() => new S2CShopAutoRefreshNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CShopAutoRefreshNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "ShopId" field.</summary>
    public const int ShopIdFieldNumber = 1;
    private int shopId_;
    /// <summary>
    /// 商店ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShopId {
      get { return shopId_; }
      set {
        shopId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShopId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ShopId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShopId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShopId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShopId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// --------------------------------- 排行榜 -----------------------------------
  /// 排行项
  /// </summary>
  public sealed class RankItemInfo : pb::IMessage {
    private static readonly pb::MessageParser<RankItemInfo> _parser = new pb::MessageParser<RankItemInfo>(() => new RankItemInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankItemInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "Rank" field.</summary>
    public const int RankFieldNumber = 1;
    private int rank_;
    /// <summary>
    /// 排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "PlayerId" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private int playerId_;
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "PlayerName" field.</summary>
    public const int PlayerNameFieldNumber = 3;
    private string playerName_ = "";
    /// <summary>
    /// 玩家昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PlayerLevel" field.</summary>
    public const int PlayerLevelFieldNumber = 4;
    private int playerLevel_;
    /// <summary>
    /// 玩家等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerLevel {
      get { return playerLevel_; }
      set {
        playerLevel_ = value;
      }
    }

    /// <summary>Field number for the "PlayerHead" field.</summary>
    public const int PlayerHeadFieldNumber = 5;
    private int playerHead_;
    /// <summary>
    /// 玩家头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerHead {
      get { return playerHead_; }
      set {
        playerHead_ = value;
      }
    }

    /// <summary>Field number for the "PlayerArenaScore" field.</summary>
    public const int PlayerArenaScoreFieldNumber = 6;
    private int playerArenaScore_;
    /// <summary>
    /// 玩家竞技场积分	   用于竞技场排行榜
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerArenaScore {
      get { return playerArenaScore_; }
      set {
        playerArenaScore_ = value;
      }
    }

    /// <summary>Field number for the "PlayerArenaGrade" field.</summary>
    public const int PlayerArenaGradeFieldNumber = 7;
    private int playerArenaGrade_;
    /// <summary>
    /// 玩家竞技场段位     用于竞技场排行榜
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerArenaGrade {
      get { return playerArenaGrade_; }
      set {
        playerArenaGrade_ = value;
      }
    }

    /// <summary>Field number for the "PlayerPower" field.</summary>
    public const int PlayerPowerFieldNumber = 8;
    private int playerPower_;
    /// <summary>
    /// 玩家战力           用于竞技场排行榜
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerPower {
      get { return playerPower_; }
      set {
        playerPower_ = value;
      }
    }

    /// <summary>Field number for the "PlayerPassedCampaignId" field.</summary>
    public const int PlayerPassedCampaignIdFieldNumber = 9;
    private int playerPassedCampaignId_;
    /// <summary>
    /// 玩家最新通关ID     用于战役排行榜
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerPassedCampaignId {
      get { return playerPassedCampaignId_; }
      set {
        playerPassedCampaignId_ = value;
      }
    }

    /// <summary>Field number for the "PlayerRolesPower" field.</summary>
    public const int PlayerRolesPowerFieldNumber = 10;
    private int playerRolesPower_;
    /// <summary>
    /// 玩家角色战力      用于角色战力排行榜
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerRolesPower {
      get { return playerRolesPower_; }
      set {
        playerRolesPower_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rank != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Rank);
      }
      if (PlayerId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerId);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PlayerName);
      }
      if (PlayerLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PlayerLevel);
      }
      if (PlayerHead != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PlayerHead);
      }
      if (PlayerArenaScore != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PlayerArenaScore);
      }
      if (PlayerArenaGrade != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PlayerArenaGrade);
      }
      if (PlayerPower != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(PlayerPower);
      }
      if (PlayerPassedCampaignId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(PlayerPassedCampaignId);
      }
      if (PlayerRolesPower != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(PlayerRolesPower);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (PlayerLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerLevel);
      }
      if (PlayerHead != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerHead);
      }
      if (PlayerArenaScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerArenaScore);
      }
      if (PlayerArenaGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerArenaGrade);
      }
      if (PlayerPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerPower);
      }
      if (PlayerPassedCampaignId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerPassedCampaignId);
      }
      if (PlayerRolesPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerRolesPower);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Rank = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 26: {
            PlayerName = input.ReadString();
            break;
          }
          case 32: {
            PlayerLevel = input.ReadInt32();
            break;
          }
          case 40: {
            PlayerHead = input.ReadInt32();
            break;
          }
          case 48: {
            PlayerArenaScore = input.ReadInt32();
            break;
          }
          case 56: {
            PlayerArenaGrade = input.ReadInt32();
            break;
          }
          case 64: {
            PlayerPower = input.ReadInt32();
            break;
          }
          case 72: {
            PlayerPassedCampaignId = input.ReadInt32();
            break;
          }
          case 80: {
            PlayerRolesPower = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 请求排行榜
  /// </summary>
  public sealed class C2SRankListRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SRankListRequest> _parser = new pb::MessageParser<C2SRankListRequest>(() => new C2SRankListRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SRankListRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "RankListType" field.</summary>
    public const int RankListTypeFieldNumber = 1;
    private int rankListType_;
    /// <summary>
    /// 排行榜类型    1 竞技场  2 关卡  3 战力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankListType {
      get { return rankListType_; }
      set {
        rankListType_ = value;
      }
    }

    /// <summary>Field number for the "Params" field.</summary>
    public const int ParamsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_params_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> params_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 参数, 跟具体类型有关
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Params {
      get { return params_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RankListType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RankListType);
      }
      params_.WriteTo(output, _repeated_params_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RankListType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RankListType);
      }
      size += params_.CalculateSize(_repeated_params_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RankListType = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class S2CRankListResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CRankListResponse> _parser = new pb::MessageParser<S2CRankListResponse>(() => new S2CRankListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CRankListResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "RankListType" field.</summary>
    public const int RankListTypeFieldNumber = 1;
    private int rankListType_;
    /// <summary>
    /// 排行榜类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankListType {
      get { return rankListType_; }
      set {
        rankListType_ = value;
      }
    }

    /// <summary>Field number for the "RankItems" field.</summary>
    public const int RankItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.RankItemInfo> _repeated_rankItems_codec
        = pb::FieldCodec.ForMessage(18, global::Msg.ClientMessage.RankItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.RankItemInfo> rankItems_ = new pbc::RepeatedField<global::Msg.ClientMessage.RankItemInfo>();
    /// <summary>
    /// 排名项
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.RankItemInfo> RankItems {
      get { return rankItems_; }
    }

    /// <summary>Field number for the "SelfHistoryTopRank" field.</summary>
    public const int SelfHistoryTopRankFieldNumber = 3;
    private int selfHistoryTopRank_;
    /// <summary>
    /// 自己历史最高排名，暂时只有竞技场有
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelfHistoryTopRank {
      get { return selfHistoryTopRank_; }
      set {
        selfHistoryTopRank_ = value;
      }
    }

    /// <summary>Field number for the "SelfRank" field.</summary>
    public const int SelfRankFieldNumber = 4;
    private int selfRank_;
    /// <summary>
    /// 自己排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelfRank {
      get { return selfRank_; }
      set {
        selfRank_ = value;
      }
    }

    /// <summary>Field number for the "SelfValue" field.</summary>
    public const int SelfValueFieldNumber = 5;
    private int selfValue_;
    /// <summary>
    /// 数据值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelfValue {
      get { return selfValue_; }
      set {
        selfValue_ = value;
      }
    }

    /// <summary>Field number for the "SelfValue2" field.</summary>
    public const int SelfValue2FieldNumber = 6;
    private int selfValue2_;
    /// <summary>
    /// 数据值2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelfValue2 {
      get { return selfValue2_; }
      set {
        selfValue2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RankListType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RankListType);
      }
      rankItems_.WriteTo(output, _repeated_rankItems_codec);
      if (SelfHistoryTopRank != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SelfHistoryTopRank);
      }
      if (SelfRank != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SelfRank);
      }
      if (SelfValue != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SelfValue);
      }
      if (SelfValue2 != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SelfValue2);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RankListType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RankListType);
      }
      size += rankItems_.CalculateSize(_repeated_rankItems_codec);
      if (SelfHistoryTopRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelfHistoryTopRank);
      }
      if (SelfRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelfRank);
      }
      if (SelfValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelfValue);
      }
      if (SelfValue2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelfValue2);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RankListType = input.ReadInt32();
            break;
          }
          case 18: {
            rankItems_.AddEntriesFrom(input, _repeated_rankItems_codec);
            break;
          }
          case 24: {
            SelfHistoryTopRank = input.ReadInt32();
            break;
          }
          case 32: {
            SelfRank = input.ReadInt32();
            break;
          }
          case 40: {
            SelfValue = input.ReadInt32();
            break;
          }
          case 48: {
            SelfValue2 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// --------------------------------- 竞技场 -----------------------------------
  /// 竞技场数据请求
  /// </summary>
  public sealed class C2SArenaDataRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SArenaDataRequest> _parser = new pb::MessageParser<C2SArenaDataRequest>(() => new C2SArenaDataRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SArenaDataRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class S2CArenaDataResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CArenaDataResponse> _parser = new pb::MessageParser<S2CArenaDataResponse>(() => new S2CArenaDataResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CArenaDataResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "Score" field.</summary>
    public const int ScoreFieldNumber = 1;
    private int score_;
    /// <summary>
    /// 积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "Grade" field.</summary>
    public const int GradeFieldNumber = 2;
    private int grade_;
    /// <summary>
    /// 段位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Grade {
      get { return grade_; }
      set {
        grade_ = value;
      }
    }

    /// <summary>Field number for the "Rank" field.</summary>
    public const int RankFieldNumber = 3;
    private int rank_;
    /// <summary>
    /// 排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "TopRank" field.</summary>
    public const int TopRankFieldNumber = 4;
    private int topRank_;
    /// <summary>
    /// 历史最高排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TopRank {
      get { return topRank_; }
      set {
        topRank_ = value;
      }
    }

    /// <summary>Field number for the "DayRemainSeconds" field.</summary>
    public const int DayRemainSecondsFieldNumber = 5;
    private int dayRemainSeconds_;
    /// <summary>
    /// 每天结算剩余结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DayRemainSeconds {
      get { return dayRemainSeconds_; }
      set {
        dayRemainSeconds_ = value;
      }
    }

    /// <summary>Field number for the "SeasonRemainSeconds" field.</summary>
    public const int SeasonRemainSecondsFieldNumber = 6;
    private int seasonRemainSeconds_;
    /// <summary>
    /// 赛季结算剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeasonRemainSeconds {
      get { return seasonRemainSeconds_; }
      set {
        seasonRemainSeconds_ = value;
      }
    }

    /// <summary>Field number for the "TicketsRefreshRemainSeconds" field.</summary>
    public const int TicketsRefreshRemainSecondsFieldNumber = 7;
    private int ticketsRefreshRemainSeconds_;
    /// <summary>
    /// 门票剩余刷新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TicketsRefreshRemainSeconds {
      get { return ticketsRefreshRemainSeconds_; }
      set {
        ticketsRefreshRemainSeconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Score != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Score);
      }
      if (Grade != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Grade);
      }
      if (Rank != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Rank);
      }
      if (TopRank != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TopRank);
      }
      if (DayRemainSeconds != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DayRemainSeconds);
      }
      if (SeasonRemainSeconds != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SeasonRemainSeconds);
      }
      if (TicketsRefreshRemainSeconds != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TicketsRefreshRemainSeconds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (Grade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Grade);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (TopRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TopRank);
      }
      if (DayRemainSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DayRemainSeconds);
      }
      if (SeasonRemainSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeasonRemainSeconds);
      }
      if (TicketsRefreshRemainSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TicketsRefreshRemainSeconds);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Score = input.ReadInt32();
            break;
          }
          case 16: {
            Grade = input.ReadInt32();
            break;
          }
          case 24: {
            Rank = input.ReadInt32();
            break;
          }
          case 32: {
            TopRank = input.ReadInt32();
            break;
          }
          case 40: {
            DayRemainSeconds = input.ReadInt32();
            break;
          }
          case 48: {
            SeasonRemainSeconds = input.ReadInt32();
            break;
          }
          case 56: {
            TicketsRefreshRemainSeconds = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 请求竞技场对方防守阵容
  /// </summary>
  public sealed class C2SArenaPlayerDefenseTeamRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SArenaPlayerDefenseTeamRequest> _parser = new pb::MessageParser<C2SArenaPlayerDefenseTeamRequest>(() => new C2SArenaPlayerDefenseTeamRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SArenaPlayerDefenseTeamRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "PlayerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class PlayerTeamRole : pb::IMessage {
    private static readonly pb::MessageParser<PlayerTeamRole> _parser = new pb::MessageParser<PlayerTeamRole>(() => new PlayerTeamRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerTeamRole> Parser { get { return _parser; } }

    /// <summary>Field number for the "TableId" field.</summary>
    public const int TableIdFieldNumber = 1;
    private int tableId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TableId {
      get { return tableId_; }
      set {
        tableId_ = value;
      }
    }

    /// <summary>Field number for the "Pos" field.</summary>
    public const int PosFieldNumber = 2;
    private int pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Rank" field.</summary>
    public const int RankFieldNumber = 4;
    private int rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TableId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TableId);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pos);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (Rank != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Rank);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TableId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableId);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TableId = input.ReadInt32();
            break;
          }
          case 16: {
            Pos = input.ReadInt32();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            Rank = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CArenaPlayerDefenseTeamResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CArenaPlayerDefenseTeamResponse> _parser = new pb::MessageParser<S2CArenaPlayerDefenseTeamResponse>(() => new S2CArenaPlayerDefenseTeamResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CArenaPlayerDefenseTeamResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "PlayerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "PlayerLevel" field.</summary>
    public const int PlayerLevelFieldNumber = 2;
    private int playerLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerLevel {
      get { return playerLevel_; }
      set {
        playerLevel_ = value;
      }
    }

    /// <summary>Field number for the "PlayerHead" field.</summary>
    public const int PlayerHeadFieldNumber = 3;
    private int playerHead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerHead {
      get { return playerHead_; }
      set {
        playerHead_ = value;
      }
    }

    /// <summary>Field number for the "Power" field.</summary>
    public const int PowerFieldNumber = 5;
    private int power_;
    /// <summary>
    ///map&lt;int32,PlayerTeamRole> DefenseTeam	= 4;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "GuildId" field.</summary>
    public const int GuildIdFieldNumber = 6;
    private int guildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (PlayerLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerLevel);
      }
      if (PlayerHead != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlayerHead);
      }
      if (Power != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Power);
      }
      if (GuildId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(GuildId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (PlayerLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerLevel);
      }
      if (PlayerHead != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerHead);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      if (GuildId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuildId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerLevel = input.ReadInt32();
            break;
          }
          case 24: {
            PlayerHead = input.ReadInt32();
            break;
          }
          case 40: {
            Power = input.ReadInt32();
            break;
          }
          case 48: {
            GuildId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 请求竞技场匹配
  /// </summary>
  public sealed class C2SArenaMatchPlayerRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SArenaMatchPlayerRequest> _parser = new pb::MessageParser<C2SArenaMatchPlayerRequest>(() => new C2SArenaMatchPlayerRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SArenaMatchPlayerRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class S2CArenaMatchPlayerResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CArenaMatchPlayerResponse> _parser = new pb::MessageParser<S2CArenaMatchPlayerResponse>(() => new S2CArenaMatchPlayerResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CArenaMatchPlayerResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "PlayerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private int playerId_;
    /// <summary>
    /// ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "PlayerName" field.</summary>
    public const int PlayerNameFieldNumber = 2;
    private string playerName_ = "";
    /// <summary>
    /// 昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PlayerLevel" field.</summary>
    public const int PlayerLevelFieldNumber = 3;
    private int playerLevel_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerLevel {
      get { return playerLevel_; }
      set {
        playerLevel_ = value;
      }
    }

    /// <summary>Field number for the "PlayerHead" field.</summary>
    public const int PlayerHeadFieldNumber = 4;
    private int playerHead_;
    /// <summary>
    /// 头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerHead {
      get { return playerHead_; }
      set {
        playerHead_ = value;
      }
    }

    /// <summary>Field number for the "PlayerGrade" field.</summary>
    public const int PlayerGradeFieldNumber = 5;
    private int playerGrade_;
    /// <summary>
    /// 段位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerGrade {
      get { return playerGrade_; }
      set {
        playerGrade_ = value;
      }
    }

    /// <summary>Field number for the "PlayerScore" field.</summary>
    public const int PlayerScoreFieldNumber = 6;
    private int playerScore_;
    /// <summary>
    /// 积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerScore {
      get { return playerScore_; }
      set {
        playerScore_ = value;
      }
    }

    /// <summary>Field number for the "PlayerPower" field.</summary>
    public const int PlayerPowerFieldNumber = 7;
    private int playerPower_;
    /// <summary>
    /// 战力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerPower {
      get { return playerPower_; }
      set {
        playerPower_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerName);
      }
      if (PlayerLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlayerLevel);
      }
      if (PlayerHead != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PlayerHead);
      }
      if (PlayerGrade != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PlayerGrade);
      }
      if (PlayerScore != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PlayerScore);
      }
      if (PlayerPower != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PlayerPower);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (PlayerLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerLevel);
      }
      if (PlayerHead != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerHead);
      }
      if (PlayerGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerGrade);
      }
      if (PlayerScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerScore);
      }
      if (PlayerPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerPower);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 18: {
            PlayerName = input.ReadString();
            break;
          }
          case 24: {
            PlayerLevel = input.ReadInt32();
            break;
          }
          case 32: {
            PlayerHead = input.ReadInt32();
            break;
          }
          case 40: {
            PlayerGrade = input.ReadInt32();
            break;
          }
          case 48: {
            PlayerScore = input.ReadInt32();
            break;
          }
          case 56: {
            PlayerPower = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 段位奖励
  /// </summary>
  public sealed class S2CArenaGradeRewardNotify : pb::IMessage {
    private static readonly pb::MessageParser<S2CArenaGradeRewardNotify> _parser = new pb::MessageParser<S2CArenaGradeRewardNotify>(() => new S2CArenaGradeRewardNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CArenaGradeRewardNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "Grade" field.</summary>
    public const int GradeFieldNumber = 1;
    private int grade_;
    /// <summary>
    /// 段位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Grade {
      get { return grade_; }
      set {
        grade_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Grade != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Grade);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Grade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Grade);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Grade = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ---------------------------------- 活动副本 --------------------------------
  /// 活动副本数据
  /// </summary>
  public sealed class C2SActiveStageDataRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SActiveStageDataRequest> _parser = new pb::MessageParser<C2SActiveStageDataRequest>(() => new C2SActiveStageDataRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SActiveStageDataRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "StageType" field.</summary>
    public const int StageTypeFieldNumber = 1;
    private int stageType_;
    /// <summary>
    /// 类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StageType {
      get { return stageType_; }
      set {
        stageType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StageType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StageType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StageType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StageType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StageType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ActiveStageData : pb::IMessage {
    private static readonly pb::MessageParser<ActiveStageData> _parser = new pb::MessageParser<ActiveStageData>(() => new ActiveStageData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActiveStageData> Parser { get { return _parser; } }

    /// <summary>Field number for the "RemainChallengeNum" field.</summary>
    public const int RemainChallengeNumFieldNumber = 1;
    private int remainChallengeNum_;
    /// <summary>
    /// 剩余挑战次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainChallengeNum {
      get { return remainChallengeNum_; }
      set {
        remainChallengeNum_ = value;
      }
    }

    /// <summary>Field number for the "RemainBuyChallengeNum" field.</summary>
    public const int RemainBuyChallengeNumFieldNumber = 2;
    private int remainBuyChallengeNum_;
    /// <summary>
    /// 剩余购买次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainBuyChallengeNum {
      get { return remainBuyChallengeNum_; }
      set {
        remainBuyChallengeNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RemainChallengeNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RemainChallengeNum);
      }
      if (RemainBuyChallengeNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RemainBuyChallengeNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RemainChallengeNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainChallengeNum);
      }
      if (RemainBuyChallengeNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainBuyChallengeNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RemainChallengeNum = input.ReadInt32();
            break;
          }
          case 16: {
            RemainBuyChallengeNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CActiveStageDataResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CActiveStageDataResponse> _parser = new pb::MessageParser<S2CActiveStageDataResponse>(() => new S2CActiveStageDataResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CActiveStageDataResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "RemainSeconds4Refresh" field.</summary>
    public const int RemainSeconds4RefreshFieldNumber = 2;
    private int remainSeconds4Refresh_;
    /// <summary>
    ///map&lt;int32,ActiveStageData> StageData	= 1; // 返回活动副本数据   key 类型  value 数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainSeconds4Refresh {
      get { return remainSeconds4Refresh_; }
      set {
        remainSeconds4Refresh_ = value;
      }
    }

    /// <summary>Field number for the "GetPointsDay" field.</summary>
    public const int GetPointsDayFieldNumber = 3;
    private int getPointsDay_;
    /// <summary>
    /// 获得好友点数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GetPointsDay {
      get { return getPointsDay_; }
      set {
        getPointsDay_ = value;
      }
    }

    /// <summary>Field number for the "MaxChallengeNum" field.</summary>
    public const int MaxChallengeNumFieldNumber = 4;
    private int maxChallengeNum_;
    /// <summary>
    /// 最大挑战次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxChallengeNum {
      get { return maxChallengeNum_; }
      set {
        maxChallengeNum_ = value;
      }
    }

    /// <summary>Field number for the "ChallengeNumPrice" field.</summary>
    public const int ChallengeNumPriceFieldNumber = 5;
    private int challengeNumPrice_;
    /// <summary>
    /// 挑战次数购买价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChallengeNumPrice {
      get { return challengeNumPrice_; }
      set {
        challengeNumPrice_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RemainSeconds4Refresh != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RemainSeconds4Refresh);
      }
      if (GetPointsDay != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GetPointsDay);
      }
      if (MaxChallengeNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxChallengeNum);
      }
      if (ChallengeNumPrice != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ChallengeNumPrice);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RemainSeconds4Refresh != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainSeconds4Refresh);
      }
      if (GetPointsDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GetPointsDay);
      }
      if (MaxChallengeNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxChallengeNum);
      }
      if (ChallengeNumPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChallengeNumPrice);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            RemainSeconds4Refresh = input.ReadInt32();
            break;
          }
          case 24: {
            GetPointsDay = input.ReadInt32();
            break;
          }
          case 32: {
            MaxChallengeNum = input.ReadInt32();
            break;
          }
          case 40: {
            ChallengeNumPrice = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 活动副本挑战次数购买
  /// </summary>
  public sealed class C2SActiveStageBuyChallengeNumRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SActiveStageBuyChallengeNumRequest> _parser = new pb::MessageParser<C2SActiveStageBuyChallengeNumRequest>(() => new C2SActiveStageBuyChallengeNumRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SActiveStageBuyChallengeNumRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "StageType" field.</summary>
    public const int StageTypeFieldNumber = 1;
    private int stageType_;
    /// <summary>
    /// 类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StageType {
      get { return stageType_; }
      set {
        stageType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StageType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StageType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StageType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StageType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StageType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CActiveStageBuyChallengeNumResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CActiveStageBuyChallengeNumResponse> _parser = new pb::MessageParser<S2CActiveStageBuyChallengeNumResponse>(() => new S2CActiveStageBuyChallengeNumResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CActiveStageBuyChallengeNumResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "StageType" field.</summary>
    public const int StageTypeFieldNumber = 1;
    private int stageType_;
    /// <summary>
    /// 类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StageType {
      get { return stageType_; }
      set {
        stageType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StageType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StageType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StageType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StageType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StageType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 活动副本刷新通知
  /// </summary>
  public sealed class S2CActiveStageRefreshNotify : pb::IMessage {
    private static readonly pb::MessageParser<S2CActiveStageRefreshNotify> _parser = new pb::MessageParser<S2CActiveStageRefreshNotify>(() => new S2CActiveStageRefreshNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CActiveStageRefreshNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 获取好友列表的助战角色
  /// </summary>
  public sealed class C2SActiveStageAssistRoleListRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SActiveStageAssistRoleListRequest> _parser = new pb::MessageParser<C2SActiveStageAssistRoleListRequest>(() => new C2SActiveStageAssistRoleListRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SActiveStageAssistRoleListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///map&lt;int32, Role> Roles					= 1; // key 好友ID  value 角色数据
  /// </summary>
  public sealed class S2CActiveStageAssistRoleListResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CActiveStageAssistRoleListResponse> _parser = new pb::MessageParser<S2CActiveStageAssistRoleListResponse>(() => new S2CActiveStageAssistRoleListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CActiveStageAssistRoleListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// ----------------------------------- 好友 -----------------------------------
  /// </summary>
  public sealed class PlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Head" field.</summary>
    public const int HeadFieldNumber = 4;
    private int head_;
    /// <summary>
    /// 头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Head {
      get { return head_; }
      set {
        head_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (Head != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Head);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Head != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Head);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            Head = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class FriendInfo : pb::IMessage {
    private static readonly pb::MessageParser<FriendInfo> _parser = new pb::MessageParser<FriendInfo>(() => new FriendInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FriendInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Head" field.</summary>
    public const int HeadFieldNumber = 4;
    private int head_;
    /// <summary>
    /// 头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Head {
      get { return head_; }
      set {
        head_ = value;
      }
    }

    /// <summary>Field number for the "IsOnline" field.</summary>
    public const int IsOnlineFieldNumber = 5;
    private bool isOnline_;
    /// <summary>
    /// 是否在线
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOnline {
      get { return isOnline_; }
      set {
        isOnline_ = value;
      }
    }

    /// <summary>Field number for the "OfflineSeconds" field.</summary>
    public const int OfflineSecondsFieldNumber = 6;
    private int offlineSeconds_;
    /// <summary>
    /// 离线时间(秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OfflineSeconds {
      get { return offlineSeconds_; }
      set {
        offlineSeconds_ = value;
      }
    }

    /// <summary>Field number for the "RemainGivePointsSeconds" field.</summary>
    public const int RemainGivePointsSecondsFieldNumber = 7;
    private int remainGivePointsSeconds_;
    /// <summary>
    /// 剩余赠送友情点秒数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainGivePointsSeconds {
      get { return remainGivePointsSeconds_; }
      set {
        remainGivePointsSeconds_ = value;
      }
    }

    /// <summary>Field number for the "BossId" field.</summary>
    public const int BossIdFieldNumber = 8;
    private int bossId_;
    /// <summary>
    /// BOSS
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BossId {
      get { return bossId_; }
      set {
        bossId_ = value;
      }
    }

    /// <summary>Field number for the "BossHpPercent" field.</summary>
    public const int BossHpPercentFieldNumber = 9;
    private int bossHpPercent_;
    /// <summary>
    /// BOSS血量百分比
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BossHpPercent {
      get { return bossHpPercent_; }
      set {
        bossHpPercent_ = value;
      }
    }

    /// <summary>Field number for the "Power" field.</summary>
    public const int PowerFieldNumber = 10;
    private int power_;
    /// <summary>
    /// 战力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "GetPoints" field.</summary>
    public const int GetPointsFieldNumber = 11;
    private int getPoints_;
    /// <summary>
    /// 收取的友情点  -1 已收取  0 还未赠送  >0 可收取的友情点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GetPoints {
      get { return getPoints_; }
      set {
        getPoints_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (Head != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Head);
      }
      if (IsOnline != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsOnline);
      }
      if (OfflineSeconds != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(OfflineSeconds);
      }
      if (RemainGivePointsSeconds != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RemainGivePointsSeconds);
      }
      if (BossId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(BossId);
      }
      if (BossHpPercent != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(BossHpPercent);
      }
      if (Power != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Power);
      }
      if (GetPoints != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(GetPoints);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Head != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Head);
      }
      if (IsOnline != false) {
        size += 1 + 1;
      }
      if (OfflineSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OfflineSeconds);
      }
      if (RemainGivePointsSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainGivePointsSeconds);
      }
      if (BossId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BossId);
      }
      if (BossHpPercent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BossHpPercent);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      if (GetPoints != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GetPoints);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            Head = input.ReadInt32();
            break;
          }
          case 40: {
            IsOnline = input.ReadBool();
            break;
          }
          case 48: {
            OfflineSeconds = input.ReadInt32();
            break;
          }
          case 56: {
            RemainGivePointsSeconds = input.ReadInt32();
            break;
          }
          case 64: {
            BossId = input.ReadInt32();
            break;
          }
          case 72: {
            BossHpPercent = input.ReadInt32();
            break;
          }
          case 80: {
            Power = input.ReadInt32();
            break;
          }
          case 88: {
            GetPoints = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 请求推荐好友
  /// </summary>
  public sealed class C2SFriendRecommendRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SFriendRecommendRequest> _parser = new pb::MessageParser<C2SFriendRecommendRequest>(() => new C2SFriendRecommendRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SFriendRecommendRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class S2CFriendRecommendResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CFriendRecommendResponse> _parser = new pb::MessageParser<S2CFriendRecommendResponse>(() => new S2CFriendRecommendResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CFriendRecommendResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "Players" field.</summary>
    public const int PlayersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.FriendInfo> _repeated_players_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.ClientMessage.FriendInfo.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.FriendInfo> players_ = new pbc::RepeatedField<global::Msg.ClientMessage.FriendInfo>();
    /// <summary>
    /// 推荐列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.FriendInfo> Players {
      get { return players_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      players_.WriteTo(output, _repeated_players_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += players_.CalculateSize(_repeated_players_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 请求好友列表
  /// </summary>
  public sealed class C2SFriendListRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SFriendListRequest> _parser = new pb::MessageParser<C2SFriendListRequest>(() => new C2SFriendListRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SFriendListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class S2CFriendListResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CFriendListResponse> _parser = new pb::MessageParser<S2CFriendListResponse>(() => new S2CFriendListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CFriendListResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "Friends" field.</summary>
    public const int FriendsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.FriendInfo> _repeated_friends_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.ClientMessage.FriendInfo.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.FriendInfo> friends_ = new pbc::RepeatedField<global::Msg.ClientMessage.FriendInfo>();
    /// <summary>
    /// 好友列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.FriendInfo> Friends {
      get { return friends_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      friends_.WriteTo(output, _repeated_friends_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += friends_.CalculateSize(_repeated_friends_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            friends_.AddEntriesFrom(input, _repeated_friends_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 申请好友
  /// </summary>
  public sealed class C2SFriendAskRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SFriendAskRequest> _parser = new pb::MessageParser<C2SFriendAskRequest>(() => new C2SFriendAskRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SFriendAskRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "PlayerIds" field.</summary>
    public const int PlayerIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_playerIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> playerIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PlayerIds {
      get { return playerIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      playerIds_.WriteTo(output, _repeated_playerIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerIds_.CalculateSize(_repeated_playerIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            playerIds_.AddEntriesFrom(input, _repeated_playerIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class S2CFriendAskResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CFriendAskResponse> _parser = new pb::MessageParser<S2CFriendAskResponse>(() => new S2CFriendAskResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CFriendAskResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "PlayerIds" field.</summary>
    public const int PlayerIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_playerIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> playerIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PlayerIds {
      get { return playerIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      playerIds_.WriteTo(output, _repeated_playerIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerIds_.CalculateSize(_repeated_playerIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            playerIds_.AddEntriesFrom(input, _repeated_playerIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 请求获得申请玩家列表
  /// </summary>
  public sealed class C2SFriendAskPlayerListRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SFriendAskPlayerListRequest> _parser = new pb::MessageParser<C2SFriendAskPlayerListRequest>(() => new C2SFriendAskPlayerListRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SFriendAskPlayerListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class S2CFriendAskPlayerListResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CFriendAskPlayerListResponse> _parser = new pb::MessageParser<S2CFriendAskPlayerListResponse>(() => new S2CFriendAskPlayerListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CFriendAskPlayerListResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "Players" field.</summary>
    public const int PlayersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.PlayerInfo> _repeated_players_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.ClientMessage.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.PlayerInfo> players_ = new pbc::RepeatedField<global::Msg.ClientMessage.PlayerInfo>();
    /// <summary>
    /// 申请列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.PlayerInfo> Players {
      get { return players_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      players_.WriteTo(output, _repeated_players_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += players_.CalculateSize(_repeated_players_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 申请玩家列表增加通知
  /// </summary>
  public sealed class S2CFriendAskPlayerListAddNotify : pb::IMessage {
    private static readonly pb::MessageParser<S2CFriendAskPlayerListAddNotify> _parser = new pb::MessageParser<S2CFriendAskPlayerListAddNotify>(() => new S2CFriendAskPlayerListAddNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CFriendAskPlayerListAddNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "PlayersAdd" field.</summary>
    public const int PlayersAddFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.PlayerInfo> _repeated_playersAdd_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.ClientMessage.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.PlayerInfo> playersAdd_ = new pbc::RepeatedField<global::Msg.ClientMessage.PlayerInfo>();
    /// <summary>
    /// 列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.PlayerInfo> PlayersAdd {
      get { return playersAdd_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      playersAdd_.WriteTo(output, _repeated_playersAdd_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playersAdd_.CalculateSize(_repeated_playersAdd_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            playersAdd_.AddEntriesFrom(input, _repeated_playersAdd_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 同意添加好友
  /// </summary>
  public sealed class C2SFriendAgreeRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SFriendAgreeRequest> _parser = new pb::MessageParser<C2SFriendAgreeRequest>(() => new C2SFriendAgreeRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SFriendAgreeRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "PlayerIds" field.</summary>
    public const int PlayerIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_playerIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> playerIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PlayerIds {
      get { return playerIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      playerIds_.WriteTo(output, _repeated_playerIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerIds_.CalculateSize(_repeated_playerIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            playerIds_.AddEntriesFrom(input, _repeated_playerIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class S2CFriendAgreeResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CFriendAgreeResponse> _parser = new pb::MessageParser<S2CFriendAgreeResponse>(() => new S2CFriendAgreeResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CFriendAgreeResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "Friends" field.</summary>
    public const int FriendsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.FriendInfo> _repeated_friends_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.ClientMessage.FriendInfo.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.FriendInfo> friends_ = new pbc::RepeatedField<global::Msg.ClientMessage.FriendInfo>();
    /// <summary>
    /// 好友列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.FriendInfo> Friends {
      get { return friends_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      friends_.WriteTo(output, _repeated_friends_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += friends_.CalculateSize(_repeated_friends_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            friends_.AddEntriesFrom(input, _repeated_friends_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 好友列表增加通知
  /// </summary>
  public sealed class S2CFriendListAddNotify : pb::IMessage {
    private static readonly pb::MessageParser<S2CFriendListAddNotify> _parser = new pb::MessageParser<S2CFriendListAddNotify>(() => new S2CFriendListAddNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CFriendListAddNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "FriendsAdd" field.</summary>
    public const int FriendsAddFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.FriendInfo> _repeated_friendsAdd_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.ClientMessage.FriendInfo.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.FriendInfo> friendsAdd_ = new pbc::RepeatedField<global::Msg.ClientMessage.FriendInfo>();
    /// <summary>
    /// 增加的好友列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.FriendInfo> FriendsAdd {
      get { return friendsAdd_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      friendsAdd_.WriteTo(output, _repeated_friendsAdd_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += friendsAdd_.CalculateSize(_repeated_friendsAdd_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            friendsAdd_.AddEntriesFrom(input, _repeated_friendsAdd_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 拒绝添加好友
  /// </summary>
  public sealed class C2SFriendRefuseRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SFriendRefuseRequest> _parser = new pb::MessageParser<C2SFriendRefuseRequest>(() => new C2SFriendRefuseRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SFriendRefuseRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "PlayerIds" field.</summary>
    public const int PlayerIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_playerIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> playerIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PlayerIds {
      get { return playerIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      playerIds_.WriteTo(output, _repeated_playerIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerIds_.CalculateSize(_repeated_playerIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            playerIds_.AddEntriesFrom(input, _repeated_playerIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class S2CFriendRefuseResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CFriendRefuseResponse> _parser = new pb::MessageParser<S2CFriendRefuseResponse>(() => new S2CFriendRefuseResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CFriendRefuseResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "PlayerIds" field.</summary>
    public const int PlayerIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_playerIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> playerIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PlayerIds {
      get { return playerIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      playerIds_.WriteTo(output, _repeated_playerIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerIds_.CalculateSize(_repeated_playerIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            playerIds_.AddEntriesFrom(input, _repeated_playerIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 删除好友
  /// </summary>
  public sealed class C2SFriendRemoveRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SFriendRemoveRequest> _parser = new pb::MessageParser<C2SFriendRemoveRequest>(() => new C2SFriendRemoveRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SFriendRemoveRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "PlayerIds" field.</summary>
    public const int PlayerIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_playerIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> playerIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PlayerIds {
      get { return playerIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      playerIds_.WriteTo(output, _repeated_playerIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerIds_.CalculateSize(_repeated_playerIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            playerIds_.AddEntriesFrom(input, _repeated_playerIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class S2CFriendRemoveResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CFriendRemoveResponse> _parser = new pb::MessageParser<S2CFriendRemoveResponse>(() => new S2CFriendRemoveResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CFriendRemoveResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "PlayerIds" field.</summary>
    public const int PlayerIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_playerIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> playerIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PlayerIds {
      get { return playerIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      playerIds_.WriteTo(output, _repeated_playerIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerIds_.CalculateSize(_repeated_playerIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            playerIds_.AddEntriesFrom(input, _repeated_playerIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 赠送友情点
  /// </summary>
  public sealed class C2SFriendGivePointsRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SFriendGivePointsRequest> _parser = new pb::MessageParser<C2SFriendGivePointsRequest>(() => new C2SFriendGivePointsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SFriendGivePointsRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "FriendIds" field.</summary>
    public const int FriendIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_friendIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> friendIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FriendIds {
      get { return friendIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      friendIds_.WriteTo(output, _repeated_friendIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += friendIds_.CalculateSize(_repeated_friendIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            friendIds_.AddEntriesFrom(input, _repeated_friendIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class S2CFriendGivePointsResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CFriendGivePointsResponse> _parser = new pb::MessageParser<S2CFriendGivePointsResponse>(() => new S2CFriendGivePointsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CFriendGivePointsResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "FriendIds" field.</summary>
    public const int FriendIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_friendIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> friendIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FriendIds {
      get { return friendIds_; }
    }

    /// <summary>Field number for the "IsGivePoints" field.</summary>
    public const int IsGivePointsFieldNumber = 2;
    private static readonly pb::FieldCodec<bool> _repeated_isGivePoints_codec
        = pb::FieldCodec.ForBool(18);
    private readonly pbc::RepeatedField<bool> isGivePoints_ = new pbc::RepeatedField<bool>();
    /// <summary>
    /// 是否赠送
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> IsGivePoints {
      get { return isGivePoints_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      friendIds_.WriteTo(output, _repeated_friendIds_codec);
      isGivePoints_.WriteTo(output, _repeated_isGivePoints_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += friendIds_.CalculateSize(_repeated_friendIds_codec);
      size += isGivePoints_.CalculateSize(_repeated_isGivePoints_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            friendIds_.AddEntriesFrom(input, _repeated_friendIds_codec);
            break;
          }
          case 18:
          case 16: {
            isGivePoints_.AddEntriesFrom(input, _repeated_isGivePoints_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 领取友情点
  /// </summary>
  public sealed class C2SFriendGetPointsRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SFriendGetPointsRequest> _parser = new pb::MessageParser<C2SFriendGetPointsRequest>(() => new C2SFriendGetPointsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SFriendGetPointsRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "FriendIds" field.</summary>
    public const int FriendIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_friendIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> friendIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FriendIds {
      get { return friendIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      friendIds_.WriteTo(output, _repeated_friendIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += friendIds_.CalculateSize(_repeated_friendIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            friendIds_.AddEntriesFrom(input, _repeated_friendIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class S2CFriendGetPointsResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CFriendGetPointsResponse> _parser = new pb::MessageParser<S2CFriendGetPointsResponse>(() => new S2CFriendGetPointsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CFriendGetPointsResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "FriendIds" field.</summary>
    public const int FriendIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_friendIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> friendIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FriendIds {
      get { return friendIds_; }
    }

    /// <summary>Field number for the "GetPoints" field.</summary>
    public const int GetPointsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_getPoints_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> getPoints_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 领取的友情点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> GetPoints {
      get { return getPoints_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      friendIds_.WriteTo(output, _repeated_friendIds_codec);
      getPoints_.WriteTo(output, _repeated_getPoints_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += friendIds_.CalculateSize(_repeated_friendIds_codec);
      size += getPoints_.CalculateSize(_repeated_getPoints_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            friendIds_.AddEntriesFrom(input, _repeated_friendIds_codec);
            break;
          }
          case 18:
          case 16: {
            getPoints_.AddEntriesFrom(input, _repeated_getPoints_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 好友BOSS搜索
  /// </summary>
  public sealed class C2SFriendSearchBossRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SFriendSearchBossRequest> _parser = new pb::MessageParser<C2SFriendSearchBossRequest>(() => new C2SFriendSearchBossRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SFriendSearchBossRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class S2CFriendSearchBossResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CFriendSearchBossResponse> _parser = new pb::MessageParser<S2CFriendSearchBossResponse>(() => new S2CFriendSearchBossResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CFriendSearchBossResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "FriendBossTableId" field.</summary>
    public const int FriendBossTableIdFieldNumber = 1;
    private int friendBossTableId_;
    /// <summary>
    /// 好友BOSS配置表ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FriendBossTableId {
      get { return friendBossTableId_; }
      set {
        friendBossTableId_ = value;
      }
    }

    /// <summary>Field number for the "Items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.ItemInfo> _repeated_items_codec
        = pb::FieldCodec.ForMessage(18, global::Msg.ClientMessage.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.ItemInfo> items_ = new pbc::RepeatedField<global::Msg.ClientMessage.ItemInfo>();
    /// <summary>
    /// 搜索不到关卡的掉落物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.ItemInfo> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FriendBossTableId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FriendBossTableId);
      }
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FriendBossTableId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendBossTableId);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FriendBossTableId = input.ReadInt32();
            break;
          }
          case 18: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获得好友BOSS列表
  /// </summary>
  public sealed class C2SFriendsBossListRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SFriendsBossListRequest> _parser = new pb::MessageParser<C2SFriendsBossListRequest>(() => new C2SFriendsBossListRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SFriendsBossListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class FriendBossInfo : pb::IMessage {
    private static readonly pb::MessageParser<FriendBossInfo> _parser = new pb::MessageParser<FriendBossInfo>(() => new FriendBossInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FriendBossInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "FriendId" field.</summary>
    public const int FriendIdFieldNumber = 1;
    private int friendId_;
    /// <summary>
    /// 好友ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FriendId {
      get { return friendId_; }
      set {
        friendId_ = value;
      }
    }

    /// <summary>Field number for the "FriendBossTableId" field.</summary>
    public const int FriendBossTableIdFieldNumber = 2;
    private int friendBossTableId_;
    /// <summary>
    /// 好友BOSS配置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FriendBossTableId {
      get { return friendBossTableId_; }
      set {
        friendBossTableId_ = value;
      }
    }

    /// <summary>Field number for the "FriendBossHpPercent" field.</summary>
    public const int FriendBossHpPercentFieldNumber = 3;
    private int friendBossHpPercent_;
    /// <summary>
    /// 好友BOSS血量百分比
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FriendBossHpPercent {
      get { return friendBossHpPercent_; }
      set {
        friendBossHpPercent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FriendId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FriendId);
      }
      if (FriendBossTableId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FriendBossTableId);
      }
      if (FriendBossHpPercent != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FriendBossHpPercent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FriendId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendId);
      }
      if (FriendBossTableId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendBossTableId);
      }
      if (FriendBossHpPercent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendBossHpPercent);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FriendId = input.ReadInt32();
            break;
          }
          case 16: {
            FriendBossTableId = input.ReadInt32();
            break;
          }
          case 24: {
            FriendBossHpPercent = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CFriendsBossListResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CFriendsBossListResponse> _parser = new pb::MessageParser<S2CFriendsBossListResponse>(() => new S2CFriendsBossListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CFriendsBossListResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "BossList" field.</summary>
    public const int BossListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.FriendBossInfo> _repeated_bossList_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.ClientMessage.FriendBossInfo.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.FriendBossInfo> bossList_ = new pbc::RepeatedField<global::Msg.ClientMessage.FriendBossInfo>();
    /// <summary>
    /// BOSS列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.FriendBossInfo> BossList {
      get { return bossList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      bossList_.WriteTo(output, _repeated_bossList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += bossList_.CalculateSize(_repeated_bossList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bossList_.AddEntriesFrom(input, _repeated_bossList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获得好友BOSS助战列表
  /// </summary>
  public sealed class C2SFriendBossAttackListRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SFriendBossAttackListRequest> _parser = new pb::MessageParser<C2SFriendBossAttackListRequest>(() => new C2SFriendBossAttackListRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SFriendBossAttackListRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "FriendId" field.</summary>
    public const int FriendIdFieldNumber = 1;
    private int friendId_;
    /// <summary>
    /// 好友ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FriendId {
      get { return friendId_; }
      set {
        friendId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FriendId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FriendId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FriendId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FriendId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CFriendBossAttackListResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CFriendBossAttackListResponse> _parser = new pb::MessageParser<S2CFriendBossAttackListResponse>(() => new S2CFriendBossAttackListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CFriendBossAttackListResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "AttackList" field.</summary>
    public const int AttackListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.PlayerInfo> _repeated_attackList_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.ClientMessage.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.PlayerInfo> attackList_ = new pbc::RepeatedField<global::Msg.ClientMessage.PlayerInfo>();
    /// <summary>
    /// 攻击列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.PlayerInfo> AttackList {
      get { return attackList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      attackList_.WriteTo(output, _repeated_attackList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += attackList_.CalculateSize(_repeated_attackList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            attackList_.AddEntriesFrom(input, _repeated_attackList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 好友一般数据(体力之类)
  /// </summary>
  public sealed class C2SFriendDataRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SFriendDataRequest> _parser = new pb::MessageParser<C2SFriendDataRequest>(() => new C2SFriendDataRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SFriendDataRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class S2CFriendDataResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CFriendDataResponse> _parser = new pb::MessageParser<S2CFriendDataResponse>(() => new S2CFriendDataResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CFriendDataResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "StaminaItemId" field.</summary>
    public const int StaminaItemIdFieldNumber = 1;
    private int staminaItemId_;
    /// <summary>
    /// 体力物品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StaminaItemId {
      get { return staminaItemId_; }
      set {
        staminaItemId_ = value;
      }
    }

    /// <summary>Field number for the "AddStamina" field.</summary>
    public const int AddStaminaFieldNumber = 2;
    private int addStamina_;
    /// <summary>
    /// 增加的体力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddStamina {
      get { return addStamina_; }
      set {
        addStamina_ = value;
      }
    }

    /// <summary>Field number for the "RemainSecondsNextStamina" field.</summary>
    public const int RemainSecondsNextStaminaFieldNumber = 3;
    private int remainSecondsNextStamina_;
    /// <summary>
    /// 下一点体力剩余秒数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainSecondsNextStamina {
      get { return remainSecondsNextStamina_; }
      set {
        remainSecondsNextStamina_ = value;
      }
    }

    /// <summary>Field number for the "StaminaLimit" field.</summary>
    public const int StaminaLimitFieldNumber = 4;
    private int staminaLimit_;
    /// <summary>
    /// 体力上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StaminaLimit {
      get { return staminaLimit_; }
      set {
        staminaLimit_ = value;
      }
    }

    /// <summary>Field number for the "StaminaResumeOneCostTime" field.</summary>
    public const int StaminaResumeOneCostTimeFieldNumber = 5;
    private int staminaResumeOneCostTime_;
    /// <summary>
    /// 恢复一点体力需要时间(小时)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StaminaResumeOneCostTime {
      get { return staminaResumeOneCostTime_; }
      set {
        staminaResumeOneCostTime_ = value;
      }
    }

    /// <summary>Field number for the "BossId" field.</summary>
    public const int BossIdFieldNumber = 6;
    private int bossId_;
    /// <summary>
    /// BOSS
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BossId {
      get { return bossId_; }
      set {
        bossId_ = value;
      }
    }

    /// <summary>Field number for the "BossHpPercent" field.</summary>
    public const int BossHpPercentFieldNumber = 7;
    private int bossHpPercent_;
    /// <summary>
    /// 血量百分比
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BossHpPercent {
      get { return bossHpPercent_; }
      set {
        bossHpPercent_ = value;
      }
    }

    /// <summary>Field number for the "AssistGetPoints" field.</summary>
    public const int AssistGetPointsFieldNumber = 8;
    private int assistGetPoints_;
    /// <summary>
    /// 助战获取友情点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AssistGetPoints {
      get { return assistGetPoints_; }
      set {
        assistGetPoints_ = value;
      }
    }

    /// <summary>Field number for the "SearchBossRemainSeconds" field.</summary>
    public const int SearchBossRemainSecondsFieldNumber = 9;
    private int searchBossRemainSeconds_;
    /// <summary>
    /// 搜索BOSS剩余秒数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SearchBossRemainSeconds {
      get { return searchBossRemainSeconds_; }
      set {
        searchBossRemainSeconds_ = value;
      }
    }

    /// <summary>Field number for the "AssistRoleId" field.</summary>
    public const int AssistRoleIdFieldNumber = 10;
    private int assistRoleId_;
    /// <summary>
    /// 助战角色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AssistRoleId {
      get { return assistRoleId_; }
      set {
        assistRoleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StaminaItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StaminaItemId);
      }
      if (AddStamina != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AddStamina);
      }
      if (RemainSecondsNextStamina != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RemainSecondsNextStamina);
      }
      if (StaminaLimit != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(StaminaLimit);
      }
      if (StaminaResumeOneCostTime != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(StaminaResumeOneCostTime);
      }
      if (BossId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BossId);
      }
      if (BossHpPercent != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(BossHpPercent);
      }
      if (AssistGetPoints != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(AssistGetPoints);
      }
      if (SearchBossRemainSeconds != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SearchBossRemainSeconds);
      }
      if (AssistRoleId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(AssistRoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StaminaItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StaminaItemId);
      }
      if (AddStamina != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddStamina);
      }
      if (RemainSecondsNextStamina != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainSecondsNextStamina);
      }
      if (StaminaLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StaminaLimit);
      }
      if (StaminaResumeOneCostTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StaminaResumeOneCostTime);
      }
      if (BossId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BossId);
      }
      if (BossHpPercent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BossHpPercent);
      }
      if (AssistGetPoints != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AssistGetPoints);
      }
      if (SearchBossRemainSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SearchBossRemainSeconds);
      }
      if (AssistRoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AssistRoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StaminaItemId = input.ReadInt32();
            break;
          }
          case 16: {
            AddStamina = input.ReadInt32();
            break;
          }
          case 24: {
            RemainSecondsNextStamina = input.ReadInt32();
            break;
          }
          case 32: {
            StaminaLimit = input.ReadInt32();
            break;
          }
          case 40: {
            StaminaResumeOneCostTime = input.ReadInt32();
            break;
          }
          case 48: {
            BossId = input.ReadInt32();
            break;
          }
          case 56: {
            BossHpPercent = input.ReadInt32();
            break;
          }
          case 64: {
            AssistGetPoints = input.ReadInt32();
            break;
          }
          case 72: {
            SearchBossRemainSeconds = input.ReadInt32();
            break;
          }
          case 80: {
            AssistRoleId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 设置助战角色给好友
  /// </summary>
  public sealed class C2SFriendSetAssistRoleRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SFriendSetAssistRoleRequest> _parser = new pb::MessageParser<C2SFriendSetAssistRoleRequest>(() => new C2SFriendSetAssistRoleRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SFriendSetAssistRoleRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    /// <summary>
    /// 角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CFriendSetAssistRoleResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CFriendSetAssistRoleResponse> _parser = new pb::MessageParser<S2CFriendSetAssistRoleResponse>(() => new S2CFriendSetAssistRoleResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CFriendSetAssistRoleResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    /// <summary>
    /// 角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 一键收发友情点 (返回S2CFriendGivePointsResponse和S2CFriendGetPointsResponse两条消息)
  /// </summary>
  public sealed class C2SFriendGiveAndGetPointsRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SFriendGiveAndGetPointsRequest> _parser = new pb::MessageParser<C2SFriendGiveAndGetPointsRequest>(() => new C2SFriendGiveAndGetPointsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SFriendGiveAndGetPointsRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "FriendIds" field.</summary>
    public const int FriendIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_friendIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> friendIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 好友ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FriendIds {
      get { return friendIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      friendIds_.WriteTo(output, _repeated_friendIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += friendIds_.CalculateSize(_repeated_friendIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            friendIds_.AddEntriesFrom(input, _repeated_friendIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获取助战友情点
  /// </summary>
  public sealed class C2SFriendGetAssistPointsRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SFriendGetAssistPointsRequest> _parser = new pb::MessageParser<C2SFriendGetAssistPointsRequest>(() => new C2SFriendGetAssistPointsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SFriendGetAssistPointsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class S2CFriendGetAssistPointsResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CFriendGetAssistPointsResponse> _parser = new pb::MessageParser<S2CFriendGetAssistPointsResponse>(() => new S2CFriendGetAssistPointsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CFriendGetAssistPointsResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "GetPoints" field.</summary>
    public const int GetPointsFieldNumber = 1;
    private int getPoints_;
    /// <summary>
    /// 获得友情点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GetPoints {
      get { return getPoints_; }
      set {
        getPoints_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GetPoints != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GetPoints);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GetPoints != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GetPoints);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GetPoints = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 任务数据
  /// </summary>
  public sealed class TaskData : pb::IMessage {
    private static readonly pb::MessageParser<TaskData> _parser = new pb::MessageParser<TaskData>(() => new TaskData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskData> Parser { get { return _parser; } }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 任务Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    /// <summary>
    /// 任务值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "State" field.</summary>
    public const int StateFieldNumber = 3;
    private int state_;
    /// <summary>
    /// 任务状态   0 未完成 1 完成 2 已领奖
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
          case 24: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端向服务器请求日常任务数据
  /// </summary>
  public sealed class C2STaskDataRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2STaskDataRequest> _parser = new pb::MessageParser<C2STaskDataRequest>(() => new C2STaskDataRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2STaskDataRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "TaskType" field.</summary>
    public const int TaskTypeFieldNumber = 1;
    private int taskType_;
    /// <summary>
    /// 任务类型   0 全部   1 日常  2 成就
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskType {
      get { return taskType_; }
      set {
        taskType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TaskType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器向客户端发送任务数据
  /// </summary>
  public sealed class S2CTaskDataResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CTaskDataResponse> _parser = new pb::MessageParser<S2CTaskDataResponse>(() => new S2CTaskDataResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CTaskDataResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "TaskType" field.</summary>
    public const int TaskTypeFieldNumber = 1;
    private int taskType_;
    /// <summary>
    /// 任务类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskType {
      get { return taskType_; }
      set {
        taskType_ = value;
      }
    }

    /// <summary>Field number for the "TaskList" field.</summary>
    public const int TaskListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.TaskData> _repeated_taskList_codec
        = pb::FieldCodec.ForMessage(18, global::Msg.ClientMessage.TaskData.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.TaskData> taskList_ = new pbc::RepeatedField<global::Msg.ClientMessage.TaskData>();
    /// <summary>
    /// 任务数据列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.TaskData> TaskList {
      get { return taskList_; }
    }

    /// <summary>Field number for the "DailyTaskRefreshRemainSeconds" field.</summary>
    public const int DailyTaskRefreshRemainSecondsFieldNumber = 3;
    private int dailyTaskRefreshRemainSeconds_;
    /// <summary>
    /// 每日任务剩余刷新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DailyTaskRefreshRemainSeconds {
      get { return dailyTaskRefreshRemainSeconds_; }
      set {
        dailyTaskRefreshRemainSeconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TaskType);
      }
      taskList_.WriteTo(output, _repeated_taskList_codec);
      if (DailyTaskRefreshRemainSeconds != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DailyTaskRefreshRemainSeconds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskType);
      }
      size += taskList_.CalculateSize(_repeated_taskList_codec);
      if (DailyTaskRefreshRemainSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DailyTaskRefreshRemainSeconds);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskType = input.ReadInt32();
            break;
          }
          case 18: {
            taskList_.AddEntriesFrom(input, _repeated_taskList_codec);
            break;
          }
          case 24: {
            DailyTaskRefreshRemainSeconds = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器向客户端通知任务值变化
  /// </summary>
  public sealed class S2CTaskValueNotify : pb::IMessage {
    private static readonly pb::MessageParser<S2CTaskValueNotify> _parser = new pb::MessageParser<S2CTaskValueNotify>(() => new S2CTaskValueNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CTaskValueNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 1;
    private global::Msg.ClientMessage.TaskData data_;
    /// <summary>
    /// 任务状态变化或者有新任务
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.ClientMessage.TaskData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (data_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (data_ == null) {
              data_ = new global::Msg.ClientMessage.TaskData();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端向服务器请求任务奖励
  /// </summary>
  public sealed class C2STaskRewardRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2STaskRewardRequest> _parser = new pb::MessageParser<C2STaskRewardRequest>(() => new C2STaskRewardRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2STaskRewardRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "TaskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private int taskId_;
    /// <summary>
    /// 任务ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TaskId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器向客户端发送任务结果
  /// </summary>
  public sealed class S2CTaskRewardResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CTaskRewardResponse> _parser = new pb::MessageParser<S2CTaskRewardResponse>(() => new S2CTaskRewardResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CTaskRewardResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "TaskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private int taskId_;
    /// <summary>
    /// 任务Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TaskId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ------------------------------------ 探索 ----------------------------------
  /// 探索数据
  /// </summary>
  public sealed class ExploreData : pb::IMessage {
    private static readonly pb::MessageParser<ExploreData> _parser = new pb::MessageParser<ExploreData>(() => new ExploreData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExploreData> Parser { get { return _parser; } }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 服务器生成的ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "TaskId" field.</summary>
    public const int TaskIdFieldNumber = 2;
    private int taskId_;
    /// <summary>
    /// 配置表中的ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "RoleCampsCanSel" field.</summary>
    public const int RoleCampsCanSelFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_roleCampsCanSel_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> roleCampsCanSel_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 可选择的角色阵营，未开始时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RoleCampsCanSel {
      get { return roleCampsCanSel_; }
    }

    /// <summary>Field number for the "RoleTypesCanSel" field.</summary>
    public const int RoleTypesCanSelFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_roleTypesCanSel_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> roleTypesCanSel_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 可选择的角色类型，未开始时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RoleTypesCanSel {
      get { return roleTypesCanSel_; }
    }

    /// <summary>Field number for the "State" field.</summary>
    public const int StateFieldNumber = 5;
    private int state_;
    /// <summary>
    /// 0 未开始  1 进行中  2 完成  3 可挑战BOSS 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "RoleId4Title" field.</summary>
    public const int RoleId4TitleFieldNumber = 6;
    private int roleId4Title_;
    /// <summary>
    /// 任务标题的角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId4Title {
      get { return roleId4Title_; }
      set {
        roleId4Title_ = value;
      }
    }

    /// <summary>Field number for the "NameId4Title" field.</summary>
    public const int NameId4TitleFieldNumber = 7;
    private int nameId4Title_;
    /// <summary>
    /// 任务标题的语言表ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NameId4Title {
      get { return nameId4Title_; }
      set {
        nameId4Title_ = value;
      }
    }

    /// <summary>Field number for the "RoleIds" field.</summary>
    public const int RoleIdsFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_roleIds_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> roleIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 已选择角色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RoleIds {
      get { return roleIds_; }
    }

    /// <summary>Field number for the "RemainSeconds" field.</summary>
    public const int RemainSecondsFieldNumber = 9;
    private int remainSeconds_;
    /// <summary>
    /// 任务剩余秒数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainSeconds {
      get { return remainSeconds_; }
      set {
        remainSeconds_ = value;
      }
    }

    /// <summary>Field number for the "RandomRewards" field.</summary>
    public const int RandomRewardsFieldNumber = 10;
    private static readonly pb::FieldCodec<int> _repeated_randomRewards_codec
        = pb::FieldCodec.ForInt32(82);
    private readonly pbc::RepeatedField<int> randomRewards_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 随机奖励  格式(id,num,id,num...)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RandomRewards {
      get { return randomRewards_; }
    }

    /// <summary>Field number for the "IsLock" field.</summary>
    public const int IsLockFieldNumber = 11;
    private bool isLock_;
    /// <summary>
    /// 是否锁定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLock {
      get { return isLock_; }
      set {
        isLock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (TaskId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TaskId);
      }
      roleCampsCanSel_.WriteTo(output, _repeated_roleCampsCanSel_codec);
      roleTypesCanSel_.WriteTo(output, _repeated_roleTypesCanSel_codec);
      if (State != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(State);
      }
      if (RoleId4Title != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RoleId4Title);
      }
      if (NameId4Title != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(NameId4Title);
      }
      roleIds_.WriteTo(output, _repeated_roleIds_codec);
      if (RemainSeconds != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(RemainSeconds);
      }
      randomRewards_.WriteTo(output, _repeated_randomRewards_codec);
      if (IsLock != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsLock);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskId);
      }
      size += roleCampsCanSel_.CalculateSize(_repeated_roleCampsCanSel_codec);
      size += roleTypesCanSel_.CalculateSize(_repeated_roleTypesCanSel_codec);
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (RoleId4Title != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId4Title);
      }
      if (NameId4Title != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NameId4Title);
      }
      size += roleIds_.CalculateSize(_repeated_roleIds_codec);
      if (RemainSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainSeconds);
      }
      size += randomRewards_.CalculateSize(_repeated_randomRewards_codec);
      if (IsLock != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            TaskId = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            roleCampsCanSel_.AddEntriesFrom(input, _repeated_roleCampsCanSel_codec);
            break;
          }
          case 34:
          case 32: {
            roleTypesCanSel_.AddEntriesFrom(input, _repeated_roleTypesCanSel_codec);
            break;
          }
          case 40: {
            State = input.ReadInt32();
            break;
          }
          case 48: {
            RoleId4Title = input.ReadInt32();
            break;
          }
          case 56: {
            NameId4Title = input.ReadInt32();
            break;
          }
          case 66:
          case 64: {
            roleIds_.AddEntriesFrom(input, _repeated_roleIds_codec);
            break;
          }
          case 72: {
            RemainSeconds = input.ReadInt32();
            break;
          }
          case 82:
          case 80: {
            randomRewards_.AddEntriesFrom(input, _repeated_randomRewards_codec);
            break;
          }
          case 88: {
            IsLock = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 请求探索数据
  /// </summary>
  public sealed class C2SExploreDataRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SExploreDataRequest> _parser = new pb::MessageParser<C2SExploreDataRequest>(() => new C2SExploreDataRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SExploreDataRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class S2CExploreDataResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CExploreDataResponse> _parser = new pb::MessageParser<S2CExploreDataResponse>(() => new S2CExploreDataResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CExploreDataResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "Datas" field.</summary>
    public const int DatasFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.ExploreData> _repeated_datas_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.ClientMessage.ExploreData.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.ExploreData> datas_ = new pbc::RepeatedField<global::Msg.ClientMessage.ExploreData>();
    /// <summary>
    /// 任务列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.ExploreData> Datas {
      get { return datas_; }
    }

    /// <summary>Field number for the "StoryDatas" field.</summary>
    public const int StoryDatasFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.ExploreData> _repeated_storyDatas_codec
        = pb::FieldCodec.ForMessage(18, global::Msg.ClientMessage.ExploreData.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.ExploreData> storyDatas_ = new pbc::RepeatedField<global::Msg.ClientMessage.ExploreData>();
    /// <summary>
    /// 剧情任务列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.ExploreData> StoryDatas {
      get { return storyDatas_; }
    }

    /// <summary>Field number for the "RefreshRemainSeconds" field.</summary>
    public const int RefreshRemainSecondsFieldNumber = 3;
    private int refreshRemainSeconds_;
    /// <summary>
    /// 任务剩余刷新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RefreshRemainSeconds {
      get { return refreshRemainSeconds_; }
      set {
        refreshRemainSeconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      datas_.WriteTo(output, _repeated_datas_codec);
      storyDatas_.WriteTo(output, _repeated_storyDatas_codec);
      if (RefreshRemainSeconds != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RefreshRemainSeconds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += datas_.CalculateSize(_repeated_datas_codec);
      size += storyDatas_.CalculateSize(_repeated_storyDatas_codec);
      if (RefreshRemainSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefreshRemainSeconds);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            datas_.AddEntriesFrom(input, _repeated_datas_codec);
            break;
          }
          case 18: {
            storyDatas_.AddEntriesFrom(input, _repeated_storyDatas_codec);
            break;
          }
          case 24: {
            RefreshRemainSeconds = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 选择探索角色
  /// </summary>
  public sealed class C2SExploreSelRoleRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SExploreSelRoleRequest> _parser = new pb::MessageParser<C2SExploreSelRoleRequest>(() => new C2SExploreSelRoleRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SExploreSelRoleRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 任务ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "IsStory" field.</summary>
    public const int IsStoryFieldNumber = 2;
    private bool isStory_;
    /// <summary>
    /// 是否剧情任务
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStory {
      get { return isStory_; }
      set {
        isStory_ = value;
      }
    }

    /// <summary>Field number for the "RoleIds" field.</summary>
    public const int RoleIdsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_roleIds_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> roleIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 角色列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RoleIds {
      get { return roleIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (IsStory != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsStory);
      }
      roleIds_.WriteTo(output, _repeated_roleIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (IsStory != false) {
        size += 1 + 1;
      }
      size += roleIds_.CalculateSize(_repeated_roleIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            IsStory = input.ReadBool();
            break;
          }
          case 26:
          case 24: {
            roleIds_.AddEntriesFrom(input, _repeated_roleIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class S2CExploreSelRoleResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CExploreSelRoleResponse> _parser = new pb::MessageParser<S2CExploreSelRoleResponse>(() => new S2CExploreSelRoleResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CExploreSelRoleResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 任务ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "IsStory" field.</summary>
    public const int IsStoryFieldNumber = 2;
    private bool isStory_;
    /// <summary>
    /// 是否剧情任务
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStory {
      get { return isStory_; }
      set {
        isStory_ = value;
      }
    }

    /// <summary>Field number for the "RoleIds" field.</summary>
    public const int RoleIdsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_roleIds_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> roleIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 角色列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RoleIds {
      get { return roleIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (IsStory != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsStory);
      }
      roleIds_.WriteTo(output, _repeated_roleIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (IsStory != false) {
        size += 1 + 1;
      }
      size += roleIds_.CalculateSize(_repeated_roleIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            IsStory = input.ReadBool();
            break;
          }
          case 26:
          case 24: {
            roleIds_.AddEntriesFrom(input, _repeated_roleIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 开始探索
  /// </summary>
  public sealed class C2SExploreStartRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SExploreStartRequest> _parser = new pb::MessageParser<C2SExploreStartRequest>(() => new C2SExploreStartRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SExploreStartRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "Ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_ids_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> ids_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 任务ID列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Ids {
      get { return ids_; }
    }

    /// <summary>Field number for the "IsStory" field.</summary>
    public const int IsStoryFieldNumber = 2;
    private bool isStory_;
    /// <summary>
    /// 是否剧情任务
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStory {
      get { return isStory_; }
      set {
        isStory_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ids_.WriteTo(output, _repeated_ids_codec);
      if (IsStory != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsStory);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ids_.CalculateSize(_repeated_ids_codec);
      if (IsStory != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
          case 16: {
            IsStory = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CExploreStartResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CExploreStartResponse> _parser = new pb::MessageParser<S2CExploreStartResponse>(() => new S2CExploreStartResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CExploreStartResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "Ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_ids_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> ids_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// ID列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Ids {
      get { return ids_; }
    }

    /// <summary>Field number for the "IsStory" field.</summary>
    public const int IsStoryFieldNumber = 2;
    private bool isStory_;
    /// <summary>
    /// 是否剧情
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStory {
      get { return isStory_; }
      set {
        isStory_ = value;
      }
    }

    /// <summary>Field number for the "IsLock" field.</summary>
    public const int IsLockFieldNumber = 3;
    private bool isLock_;
    /// <summary>
    /// 是否锁定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLock {
      get { return isLock_; }
      set {
        isLock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ids_.WriteTo(output, _repeated_ids_codec);
      if (IsStory != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsStory);
      }
      if (IsLock != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsLock);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ids_.CalculateSize(_repeated_ids_codec);
      if (IsStory != false) {
        size += 1 + 1;
      }
      if (IsLock != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
          case 16: {
            IsStory = input.ReadBool();
            break;
          }
          case 24: {
            IsLock = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 加速
  /// </summary>
  public sealed class C2SExploreSpeedupRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SExploreSpeedupRequest> _parser = new pb::MessageParser<C2SExploreSpeedupRequest>(() => new C2SExploreSpeedupRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SExploreSpeedupRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "Ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_ids_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> ids_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 任务ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Ids {
      get { return ids_; }
    }

    /// <summary>Field number for the "IsStory" field.</summary>
    public const int IsStoryFieldNumber = 2;
    private bool isStory_;
    /// <summary>
    /// 是否剧情任务
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStory {
      get { return isStory_; }
      set {
        isStory_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ids_.WriteTo(output, _repeated_ids_codec);
      if (IsStory != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsStory);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ids_.CalculateSize(_repeated_ids_codec);
      if (IsStory != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
          case 16: {
            IsStory = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CExploreSpeedupResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CExploreSpeedupResponse> _parser = new pb::MessageParser<S2CExploreSpeedupResponse>(() => new S2CExploreSpeedupResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CExploreSpeedupResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "Ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_ids_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> ids_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 任务ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Ids {
      get { return ids_; }
    }

    /// <summary>Field number for the "IsStory" field.</summary>
    public const int IsStoryFieldNumber = 2;
    private bool isStory_;
    /// <summary>
    /// 是否剧情任务
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStory {
      get { return isStory_; }
      set {
        isStory_ = value;
      }
    }

    /// <summary>Field number for the "CostDiamond" field.</summary>
    public const int CostDiamondFieldNumber = 3;
    private int costDiamond_;
    /// <summary>
    /// 花费钻石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CostDiamond {
      get { return costDiamond_; }
      set {
        costDiamond_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ids_.WriteTo(output, _repeated_ids_codec);
      if (IsStory != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsStory);
      }
      if (CostDiamond != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CostDiamond);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ids_.CalculateSize(_repeated_ids_codec);
      if (IsStory != false) {
        size += 1 + 1;
      }
      if (CostDiamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CostDiamond);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
          case 16: {
            IsStory = input.ReadBool();
            break;
          }
          case 24: {
            CostDiamond = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 刷新探索任务
  /// </summary>
  public sealed class C2SExploreRefreshRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SExploreRefreshRequest> _parser = new pb::MessageParser<C2SExploreRefreshRequest>(() => new C2SExploreRefreshRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SExploreRefreshRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class S2CExploreRefreshResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CExploreRefreshResponse> _parser = new pb::MessageParser<S2CExploreRefreshResponse>(() => new S2CExploreRefreshResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CExploreRefreshResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "Datas" field.</summary>
    public const int DatasFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.ExploreData> _repeated_datas_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.ClientMessage.ExploreData.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.ExploreData> datas_ = new pbc::RepeatedField<global::Msg.ClientMessage.ExploreData>();
    /// <summary>
    /// 数据列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.ExploreData> Datas {
      get { return datas_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      datas_.WriteTo(output, _repeated_datas_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += datas_.CalculateSize(_repeated_datas_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            datas_.AddEntriesFrom(input, _repeated_datas_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 自动刷新通知
  /// </summary>
  public sealed class S2CExploreAutoRefreshNotify : pb::IMessage {
    private static readonly pb::MessageParser<S2CExploreAutoRefreshNotify> _parser = new pb::MessageParser<S2CExploreAutoRefreshNotify>(() => new S2CExploreAutoRefreshNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CExploreAutoRefreshNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 锁定或解锁探索任务
  /// </summary>
  public sealed class C2SExploreLockRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SExploreLockRequest> _parser = new pb::MessageParser<C2SExploreLockRequest>(() => new C2SExploreLockRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SExploreLockRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "Ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_ids_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> ids_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// ID列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Ids {
      get { return ids_; }
    }

    /// <summary>Field number for the "IsLock" field.</summary>
    public const int IsLockFieldNumber = 2;
    private bool isLock_;
    /// <summary>
    /// 是否锁定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLock {
      get { return isLock_; }
      set {
        isLock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ids_.WriteTo(output, _repeated_ids_codec);
      if (IsLock != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsLock);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ids_.CalculateSize(_repeated_ids_codec);
      if (IsLock != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
          case 16: {
            IsLock = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CExploreLockResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CExploreLockResponse> _parser = new pb::MessageParser<S2CExploreLockResponse>(() => new S2CExploreLockResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CExploreLockResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "Ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_ids_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> ids_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// ID列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Ids {
      get { return ids_; }
    }

    /// <summary>Field number for the "IsLock" field.</summary>
    public const int IsLockFieldNumber = 2;
    private bool isLock_;
    /// <summary>
    /// 是否锁定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLock {
      get { return isLock_; }
      set {
        isLock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ids_.WriteTo(output, _repeated_ids_codec);
      if (IsLock != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsLock);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ids_.CalculateSize(_repeated_ids_codec);
      if (IsLock != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
          case 16: {
            IsLock = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 探索奖励
  /// </summary>
  public sealed class C2SExploreGetRewardRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SExploreGetRewardRequest> _parser = new pb::MessageParser<C2SExploreGetRewardRequest>(() => new C2SExploreGetRewardRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SExploreGetRewardRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 任务ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "IsStory" field.</summary>
    public const int IsStoryFieldNumber = 2;
    private bool isStory_;
    /// <summary>
    /// 是否剧情任务
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStory {
      get { return isStory_; }
      set {
        isStory_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (IsStory != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsStory);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (IsStory != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            IsStory = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CExploreGetRewardResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CExploreGetRewardResponse> _parser = new pb::MessageParser<S2CExploreGetRewardResponse>(() => new S2CExploreGetRewardResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CExploreGetRewardResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "IsStory" field.</summary>
    public const int IsStoryFieldNumber = 2;
    private bool isStory_;
    /// <summary>
    /// 是否剧情任务
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStory {
      get { return isStory_; }
      set {
        isStory_ = value;
      }
    }

    /// <summary>Field number for the "RandomItems" field.</summary>
    public const int RandomItemsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.ItemInfo> _repeated_randomItems_codec
        = pb::FieldCodec.ForMessage(26, global::Msg.ClientMessage.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.ItemInfo> randomItems_ = new pbc::RepeatedField<global::Msg.ClientMessage.ItemInfo>();
    /// <summary>
    /// 随机奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.ItemInfo> RandomItems {
      get { return randomItems_; }
    }

    /// <summary>Field number for the "HasRewardStage" field.</summary>
    public const int HasRewardStageFieldNumber = 4;
    private bool hasRewardStage_;
    /// <summary>
    /// 是否有奖励关卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRewardStage {
      get { return hasRewardStage_; }
      set {
        hasRewardStage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (IsStory != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsStory);
      }
      randomItems_.WriteTo(output, _repeated_randomItems_codec);
      if (HasRewardStage != false) {
        output.WriteRawTag(32);
        output.WriteBool(HasRewardStage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (IsStory != false) {
        size += 1 + 1;
      }
      size += randomItems_.CalculateSize(_repeated_randomItems_codec);
      if (HasRewardStage != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            IsStory = input.ReadBool();
            break;
          }
          case 26: {
            randomItems_.AddEntriesFrom(input, _repeated_randomItems_codec);
            break;
          }
          case 32: {
            HasRewardStage = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 剧情探索任务通知
  /// </summary>
  public sealed class S2CExploreStoryNewNotify : pb::IMessage {
    private static readonly pb::MessageParser<S2CExploreStoryNewNotify> _parser = new pb::MessageParser<S2CExploreStoryNewNotify>(() => new S2CExploreStoryNewNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CExploreStoryNewNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "TaskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private int taskId_;
    /// <summary>
    /// 探索任务配置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TaskId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 探索任务被删除
  /// </summary>
  public sealed class S2CExploreRemoveNotify : pb::IMessage {
    private static readonly pb::MessageParser<S2CExploreRemoveNotify> _parser = new pb::MessageParser<S2CExploreRemoveNotify>(() => new S2CExploreRemoveNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CExploreRemoveNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 任务ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "IsStory" field.</summary>
    public const int IsStoryFieldNumber = 2;
    private bool isStory_;
    /// <summary>
    /// 是否剧情任务
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStory {
      get { return isStory_; }
      set {
        isStory_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (IsStory != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsStory);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (IsStory != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            IsStory = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ----------------------------------- 聊天 -----------------------------------
  /// 发送世界聊天消息
  /// </summary>
  public sealed class C2SChatRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SChatRequest> _parser = new pb::MessageParser<C2SChatRequest>(() => new C2SChatRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SChatRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "Channel" field.</summary>
    public const int ChannelFieldNumber = 1;
    private int channel_;
    /// <summary>
    /// 频道  1 世界  2 公会  3 招募
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 2;
    private pb::ByteString content_ = pb::ByteString.Empty;
    /// <summary>
    /// 内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Channel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Channel);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Content);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Channel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Channel);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Channel = input.ReadInt32();
            break;
          }
          case 18: {
            Content = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CChatResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CChatResponse> _parser = new pb::MessageParser<S2CChatResponse>(() => new S2CChatResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CChatResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "Channel" field.</summary>
    public const int ChannelFieldNumber = 1;
    private int channel_;
    /// <summary>
    /// 频道  1 世界  2 公会  3 招募
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 2;
    private pb::ByteString content_ = pb::ByteString.Empty;
    /// <summary>
    /// 内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Channel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Channel);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Content);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Channel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Channel);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Channel = input.ReadInt32();
            break;
          }
          case 18: {
            Content = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 拉取聊天消息
  /// </summary>
  public sealed class C2SChatMsgPullRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SChatMsgPullRequest> _parser = new pb::MessageParser<C2SChatMsgPullRequest>(() => new C2SChatMsgPullRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SChatMsgPullRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "Channel" field.</summary>
    public const int ChannelFieldNumber = 1;
    private int channel_;
    /// <summary>
    /// 频道
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Channel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Channel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Channel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Channel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Channel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ChatItem : pb::IMessage {
    private static readonly pb::MessageParser<ChatItem> _parser = new pb::MessageParser<ChatItem>(() => new ChatItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatItem> Parser { get { return _parser; } }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 1;
    private pb::ByteString content_ = pb::ByteString.Empty;
    /// <summary>
    /// 内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PlayerId" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private int playerId_;
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "PlayerName" field.</summary>
    public const int PlayerNameFieldNumber = 3;
    private string playerName_ = "";
    /// <summary>
    /// 玩家名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PlayerHead" field.</summary>
    public const int PlayerHeadFieldNumber = 4;
    private int playerHead_;
    /// <summary>
    /// 玩家头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerHead {
      get { return playerHead_; }
      set {
        playerHead_ = value;
      }
    }

    /// <summary>Field number for the "PlayerLevel" field.</summary>
    public const int PlayerLevelFieldNumber = 5;
    private int playerLevel_;
    /// <summary>
    /// 玩家等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerLevel {
      get { return playerLevel_; }
      set {
        playerLevel_ = value;
      }
    }

    /// <summary>Field number for the "IsFriend" field.</summary>
    public const int IsFriendFieldNumber = 6;
    private int isFriend_;
    /// <summary>
    /// 是否好友
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsFriend {
      get { return isFriend_; }
      set {
        isFriend_ = value;
      }
    }

    /// <summary>Field number for the "SendTime" field.</summary>
    public const int SendTimeFieldNumber = 7;
    private int sendTime_;
    /// <summary>
    /// 发送时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SendTime {
      get { return sendTime_; }
      set {
        sendTime_ = value;
      }
    }

    /// <summary>Field number for the "ExtraValue" field.</summary>
    public const int ExtraValueFieldNumber = 8;
    private int extraValue_;
    /// <summary>
    /// 额外数据   招聘频道时为公会ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExtraValue {
      get { return extraValue_; }
      set {
        extraValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Content.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Content);
      }
      if (PlayerId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerId);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PlayerName);
      }
      if (PlayerHead != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PlayerHead);
      }
      if (PlayerLevel != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PlayerLevel);
      }
      if (IsFriend != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(IsFriend);
      }
      if (SendTime != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SendTime);
      }
      if (ExtraValue != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ExtraValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
      }
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (PlayerHead != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerHead);
      }
      if (PlayerLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerLevel);
      }
      if (IsFriend != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFriend);
      }
      if (SendTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SendTime);
      }
      if (ExtraValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExtraValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Content = input.ReadBytes();
            break;
          }
          case 16: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 26: {
            PlayerName = input.ReadString();
            break;
          }
          case 32: {
            PlayerHead = input.ReadInt32();
            break;
          }
          case 40: {
            PlayerLevel = input.ReadInt32();
            break;
          }
          case 48: {
            IsFriend = input.ReadInt32();
            break;
          }
          case 56: {
            SendTime = input.ReadInt32();
            break;
          }
          case 64: {
            ExtraValue = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CChatMsgPullResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CChatMsgPullResponse> _parser = new pb::MessageParser<S2CChatMsgPullResponse>(() => new S2CChatMsgPullResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CChatMsgPullResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "Channel" field.</summary>
    public const int ChannelFieldNumber = 1;
    private int channel_;
    /// <summary>
    /// 频道
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    /// <summary>Field number for the "Items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.ChatItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(18, global::Msg.ClientMessage.ChatItem.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.ChatItem> items_ = new pbc::RepeatedField<global::Msg.ClientMessage.ChatItem>();
    /// <summary>
    /// 拉取的聊天队列
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.ChatItem> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Channel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Channel);
      }
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Channel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Channel);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Channel = input.ReadInt32();
            break;
          }
          case 18: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ----------------------------------- 公会 -----------------------------------
  /// 公会数据
  /// </summary>
  public sealed class C2SGuildDataRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SGuildDataRequest> _parser = new pb::MessageParser<C2SGuildDataRequest>(() => new C2SGuildDataRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SGuildDataRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class GuildInfo : pb::IMessage {
    private static readonly pb::MessageParser<GuildInfo> _parser = new pb::MessageParser<GuildInfo>(() => new GuildInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Exp" field.</summary>
    public const int ExpFieldNumber = 4;
    private int exp_;
    /// <summary>
    /// 经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "Logo" field.</summary>
    public const int LogoFieldNumber = 5;
    private int logo_;
    /// <summary>
    /// 标志
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Logo {
      get { return logo_; }
      set {
        logo_ = value;
      }
    }

    /// <summary>Field number for the "Anouncement" field.</summary>
    public const int AnouncementFieldNumber = 6;
    private string anouncement_ = "";
    /// <summary>
    /// 公告
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Anouncement {
      get { return anouncement_; }
      set {
        anouncement_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DismissRemainSeconds" field.</summary>
    public const int DismissRemainSecondsFieldNumber = 7;
    private int dismissRemainSeconds_;
    /// <summary>
    /// 解散剩余秒数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DismissRemainSeconds {
      get { return dismissRemainSeconds_; }
      set {
        dismissRemainSeconds_ = value;
      }
    }

    /// <summary>Field number for the "SignRemainSeconds" field.</summary>
    public const int SignRemainSecondsFieldNumber = 8;
    private int signRemainSeconds_;
    /// <summary>
    /// 签到剩余秒数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SignRemainSeconds {
      get { return signRemainSeconds_; }
      set {
        signRemainSeconds_ = value;
      }
    }

    /// <summary>Field number for the "AskDonateRemainSeconds" field.</summary>
    public const int AskDonateRemainSecondsFieldNumber = 9;
    private int askDonateRemainSeconds_;
    /// <summary>
    /// 请求捐赠剩余秒数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AskDonateRemainSeconds {
      get { return askDonateRemainSeconds_; }
      set {
        askDonateRemainSeconds_ = value;
      }
    }

    /// <summary>Field number for the "DonateResetRemainSeconds" field.</summary>
    public const int DonateResetRemainSecondsFieldNumber = 10;
    private int donateResetRemainSeconds_;
    /// <summary>
    /// 捐赠重置剩余秒数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DonateResetRemainSeconds {
      get { return donateResetRemainSeconds_; }
      set {
        donateResetRemainSeconds_ = value;
      }
    }

    /// <summary>Field number for the "DonateNum" field.</summary>
    public const int DonateNumFieldNumber = 11;
    private int donateNum_;
    /// <summary>
    /// 已捐赠数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DonateNum {
      get { return donateNum_; }
      set {
        donateNum_ = value;
      }
    }

    /// <summary>Field number for the "MaxDonateNum" field.</summary>
    public const int MaxDonateNumFieldNumber = 12;
    private int maxDonateNum_;
    /// <summary>
    /// 最大捐赠数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxDonateNum {
      get { return maxDonateNum_; }
      set {
        maxDonateNum_ = value;
      }
    }

    /// <summary>Field number for the "President" field.</summary>
    public const int PresidentFieldNumber = 13;
    private int president_;
    /// <summary>
    /// 会长
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int President {
      get { return president_; }
      set {
        president_ = value;
      }
    }

    /// <summary>Field number for the "PresidentName" field.</summary>
    public const int PresidentNameFieldNumber = 14;
    private string presidentName_ = "";
    /// <summary>
    /// 会长名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PresidentName {
      get { return presidentName_; }
      set {
        presidentName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MemberNum" field.</summary>
    public const int MemberNumFieldNumber = 15;
    private int memberNum_;
    /// <summary>
    /// 成员数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MemberNum {
      get { return memberNum_; }
      set {
        memberNum_ = value;
      }
    }

    /// <summary>Field number for the "MemberNumLimit" field.</summary>
    public const int MemberNumLimitFieldNumber = 16;
    private int memberNumLimit_;
    /// <summary>
    /// 最大成员数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MemberNumLimit {
      get { return memberNumLimit_; }
      set {
        memberNumLimit_ = value;
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 17;
    private int position_;
    /// <summary>
    /// 职位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Exp);
      }
      if (Logo != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Logo);
      }
      if (Anouncement.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Anouncement);
      }
      if (DismissRemainSeconds != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(DismissRemainSeconds);
      }
      if (SignRemainSeconds != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(SignRemainSeconds);
      }
      if (AskDonateRemainSeconds != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(AskDonateRemainSeconds);
      }
      if (DonateResetRemainSeconds != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(DonateResetRemainSeconds);
      }
      if (DonateNum != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(DonateNum);
      }
      if (MaxDonateNum != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(MaxDonateNum);
      }
      if (President != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(President);
      }
      if (PresidentName.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(PresidentName);
      }
      if (MemberNum != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(MemberNum);
      }
      if (MemberNumLimit != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(MemberNumLimit);
      }
      if (Position != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (Logo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Logo);
      }
      if (Anouncement.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Anouncement);
      }
      if (DismissRemainSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DismissRemainSeconds);
      }
      if (SignRemainSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SignRemainSeconds);
      }
      if (AskDonateRemainSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AskDonateRemainSeconds);
      }
      if (DonateResetRemainSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DonateResetRemainSeconds);
      }
      if (DonateNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DonateNum);
      }
      if (MaxDonateNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxDonateNum);
      }
      if (President != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(President);
      }
      if (PresidentName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PresidentName);
      }
      if (MemberNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MemberNum);
      }
      if (MemberNumLimit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MemberNumLimit);
      }
      if (Position != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            Exp = input.ReadInt32();
            break;
          }
          case 40: {
            Logo = input.ReadInt32();
            break;
          }
          case 50: {
            Anouncement = input.ReadString();
            break;
          }
          case 56: {
            DismissRemainSeconds = input.ReadInt32();
            break;
          }
          case 64: {
            SignRemainSeconds = input.ReadInt32();
            break;
          }
          case 72: {
            AskDonateRemainSeconds = input.ReadInt32();
            break;
          }
          case 80: {
            DonateResetRemainSeconds = input.ReadInt32();
            break;
          }
          case 88: {
            DonateNum = input.ReadInt32();
            break;
          }
          case 96: {
            MaxDonateNum = input.ReadInt32();
            break;
          }
          case 104: {
            President = input.ReadInt32();
            break;
          }
          case 114: {
            PresidentName = input.ReadString();
            break;
          }
          case 120: {
            MemberNum = input.ReadInt32();
            break;
          }
          case 128: {
            MemberNumLimit = input.ReadInt32();
            break;
          }
          case 136: {
            Position = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CGuildDataResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CGuildDataResponse> _parser = new pb::MessageParser<S2CGuildDataResponse>(() => new S2CGuildDataResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGuildDataResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "Info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Msg.ClientMessage.GuildInfo info_;
    /// <summary>
    /// 信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.ClientMessage.GuildInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::Msg.ClientMessage.GuildInfo();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 搜索公会
  /// </summary>
  public sealed class C2SGuildSearchRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SGuildSearchRequest> _parser = new pb::MessageParser<C2SGuildSearchRequest>(() => new C2SGuildSearchRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SGuildSearchRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    /// <summary>
    /// 关键字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class GuildBaseInfo : pb::IMessage {
    private static readonly pb::MessageParser<GuildBaseInfo> _parser = new pb::MessageParser<GuildBaseInfo>(() => new GuildBaseInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildBaseInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Logo" field.</summary>
    public const int LogoFieldNumber = 4;
    private int logo_;
    /// <summary>
    /// 经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Logo {
      get { return logo_; }
      set {
        logo_ = value;
      }
    }

    /// <summary>Field number for the "MemberNum" field.</summary>
    public const int MemberNumFieldNumber = 5;
    private int memberNum_;
    /// <summary>
    /// 成员数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MemberNum {
      get { return memberNum_; }
      set {
        memberNum_ = value;
      }
    }

    /// <summary>Field number for the "MemberNumLimit" field.</summary>
    public const int MemberNumLimitFieldNumber = 6;
    private int memberNumLimit_;
    /// <summary>
    /// 成员上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MemberNumLimit {
      get { return memberNumLimit_; }
      set {
        memberNumLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (Logo != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Logo);
      }
      if (MemberNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MemberNum);
      }
      if (MemberNumLimit != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MemberNumLimit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Logo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Logo);
      }
      if (MemberNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MemberNum);
      }
      if (MemberNumLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MemberNumLimit);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            Logo = input.ReadInt32();
            break;
          }
          case 40: {
            MemberNum = input.ReadInt32();
            break;
          }
          case 48: {
            MemberNumLimit = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CGuildSearchResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CGuildSearchResponse> _parser = new pb::MessageParser<S2CGuildSearchResponse>(() => new S2CGuildSearchResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGuildSearchResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "InfoList" field.</summary>
    public const int InfoListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.GuildBaseInfo> _repeated_infoList_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.ClientMessage.GuildBaseInfo.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.GuildBaseInfo> infoList_ = new pbc::RepeatedField<global::Msg.ClientMessage.GuildBaseInfo>();
    /// <summary>
    /// 搜索到的公会
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.GuildBaseInfo> InfoList {
      get { return infoList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      infoList_.WriteTo(output, _repeated_infoList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += infoList_.CalculateSize(_repeated_infoList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            infoList_.AddEntriesFrom(input, _repeated_infoList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 推荐公会
  /// </summary>
  public sealed class C2SGuildRecommendRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SGuildRecommendRequest> _parser = new pb::MessageParser<C2SGuildRecommendRequest>(() => new C2SGuildRecommendRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SGuildRecommendRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class S2CGuildRecommendResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CGuildRecommendResponse> _parser = new pb::MessageParser<S2CGuildRecommendResponse>(() => new S2CGuildRecommendResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGuildRecommendResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "InfoList" field.</summary>
    public const int InfoListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.GuildBaseInfo> _repeated_infoList_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.ClientMessage.GuildBaseInfo.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.GuildBaseInfo> infoList_ = new pbc::RepeatedField<global::Msg.ClientMessage.GuildBaseInfo>();
    /// <summary>
    /// 推荐的公会
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.GuildBaseInfo> InfoList {
      get { return infoList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      infoList_.WriteTo(output, _repeated_infoList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += infoList_.CalculateSize(_repeated_infoList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            infoList_.AddEntriesFrom(input, _repeated_infoList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 创建公会
  /// </summary>
  public sealed class C2SGuildCreateRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SGuildCreateRequest> _parser = new pb::MessageParser<C2SGuildCreateRequest>(() => new C2SGuildCreateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SGuildCreateRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "GuildName" field.</summary>
    public const int GuildNameFieldNumber = 1;
    private string guildName_ = "";
    /// <summary>
    /// 名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GuildName {
      get { return guildName_; }
      set {
        guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GuildLogo" field.</summary>
    public const int GuildLogoFieldNumber = 2;
    private int guildLogo_;
    /// <summary>
    /// 标志
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuildLogo {
      get { return guildLogo_; }
      set {
        guildLogo_ = value;
      }
    }

    /// <summary>Field number for the "Anouncement" field.</summary>
    public const int AnouncementFieldNumber = 3;
    private pb::ByteString anouncement_ = pb::ByteString.Empty;
    /// <summary>
    /// 公告
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Anouncement {
      get { return anouncement_; }
      set {
        anouncement_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GuildName);
      }
      if (GuildLogo != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GuildLogo);
      }
      if (Anouncement.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Anouncement);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GuildName);
      }
      if (GuildLogo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuildLogo);
      }
      if (Anouncement.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Anouncement);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GuildName = input.ReadString();
            break;
          }
          case 16: {
            GuildLogo = input.ReadInt32();
            break;
          }
          case 26: {
            Anouncement = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CGuildCreateResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CGuildCreateResponse> _parser = new pb::MessageParser<S2CGuildCreateResponse>(() => new S2CGuildCreateResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGuildCreateResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "Info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Msg.ClientMessage.GuildInfo info_;
    /// <summary>
    /// 信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.ClientMessage.GuildInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "CostDiamond" field.</summary>
    public const int CostDiamondFieldNumber = 2;
    private int costDiamond_;
    /// <summary>
    /// 消耗钻石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CostDiamond {
      get { return costDiamond_; }
      set {
        costDiamond_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (CostDiamond != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CostDiamond);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (CostDiamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CostDiamond);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::Msg.ClientMessage.GuildInfo();
            }
            input.ReadMessage(info_);
            break;
          }
          case 16: {
            CostDiamond = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 解散公会
  /// </summary>
  public sealed class C2SGuildDismissRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SGuildDismissRequest> _parser = new pb::MessageParser<C2SGuildDismissRequest>(() => new C2SGuildDismissRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SGuildDismissRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class S2CGuildDismissResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CGuildDismissResponse> _parser = new pb::MessageParser<S2CGuildDismissResponse>(() => new S2CGuildDismissResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGuildDismissResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "RealDismissRemainSeconds" field.</summary>
    public const int RealDismissRemainSecondsFieldNumber = 1;
    private int realDismissRemainSeconds_;
    /// <summary>
    /// 真正解散剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RealDismissRemainSeconds {
      get { return realDismissRemainSeconds_; }
      set {
        realDismissRemainSeconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RealDismissRemainSeconds != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RealDismissRemainSeconds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RealDismissRemainSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RealDismissRemainSeconds);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RealDismissRemainSeconds = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 取消解散公会
  /// </summary>
  public sealed class C2SGuildCancelDismissRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SGuildCancelDismissRequest> _parser = new pb::MessageParser<C2SGuildCancelDismissRequest>(() => new C2SGuildCancelDismissRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SGuildCancelDismissRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class S2CGuildCancelDismissResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CGuildCancelDismissResponse> _parser = new pb::MessageParser<S2CGuildCancelDismissResponse>(() => new S2CGuildCancelDismissResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGuildCancelDismissResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 公会删除通知
  /// </summary>
  public sealed class S2CGuildDeleteNotify : pb::IMessage {
    private static readonly pb::MessageParser<S2CGuildDeleteNotify> _parser = new pb::MessageParser<S2CGuildDeleteNotify>(() => new S2CGuildDeleteNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGuildDeleteNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "GuildId" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private int guildId_;
    /// <summary>
    /// ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GuildId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuildId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GuildId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 公会信息修改
  /// </summary>
  public sealed class C2SGuildInfoModifyRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SGuildInfoModifyRequest> _parser = new pb::MessageParser<C2SGuildInfoModifyRequest>(() => new C2SGuildInfoModifyRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SGuildInfoModifyRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "NewGuildName" field.</summary>
    public const int NewGuildNameFieldNumber = 1;
    private string newGuildName_ = "";
    /// <summary>
    /// 新名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NewGuildName {
      get { return newGuildName_; }
      set {
        newGuildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NewGuildLogo" field.</summary>
    public const int NewGuildLogoFieldNumber = 2;
    private int newGuildLogo_;
    /// <summary>
    /// 新Logo
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewGuildLogo {
      get { return newGuildLogo_; }
      set {
        newGuildLogo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NewGuildName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NewGuildName);
      }
      if (NewGuildLogo != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NewGuildLogo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NewGuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NewGuildName);
      }
      if (NewGuildLogo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewGuildLogo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            NewGuildName = input.ReadString();
            break;
          }
          case 16: {
            NewGuildLogo = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CGuildInfoModifyResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CGuildInfoModifyResponse> _parser = new pb::MessageParser<S2CGuildInfoModifyResponse>(() => new S2CGuildInfoModifyResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGuildInfoModifyResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "NewGuildName" field.</summary>
    public const int NewGuildNameFieldNumber = 1;
    private string newGuildName_ = "";
    /// <summary>
    /// 新名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NewGuildName {
      get { return newGuildName_; }
      set {
        newGuildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NewGuildLogo" field.</summary>
    public const int NewGuildLogoFieldNumber = 2;
    private int newGuildLogo_;
    /// <summary>
    /// 新Logo
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewGuildLogo {
      get { return newGuildLogo_; }
      set {
        newGuildLogo_ = value;
      }
    }

    /// <summary>Field number for the "CostDiamond" field.</summary>
    public const int CostDiamondFieldNumber = 3;
    private int costDiamond_;
    /// <summary>
    /// 消耗钻石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CostDiamond {
      get { return costDiamond_; }
      set {
        costDiamond_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NewGuildName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NewGuildName);
      }
      if (NewGuildLogo != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NewGuildLogo);
      }
      if (CostDiamond != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CostDiamond);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NewGuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NewGuildName);
      }
      if (NewGuildLogo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewGuildLogo);
      }
      if (CostDiamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CostDiamond);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            NewGuildName = input.ReadString();
            break;
          }
          case 16: {
            NewGuildLogo = input.ReadInt32();
            break;
          }
          case 24: {
            CostDiamond = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 公会修改公告
  /// </summary>
  public sealed class C2SGuildAnouncementRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SGuildAnouncementRequest> _parser = new pb::MessageParser<C2SGuildAnouncementRequest>(() => new C2SGuildAnouncementRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SGuildAnouncementRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 1;
    private string content_ = "";
    /// <summary>
    /// 新内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Content.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Content);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Content = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CGuildAnouncementResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CGuildAnouncementResponse> _parser = new pb::MessageParser<S2CGuildAnouncementResponse>(() => new S2CGuildAnouncementResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGuildAnouncementResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 1;
    private string content_ = "";
    /// <summary>
    /// 新内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Content.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Content);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Content = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 公会成员列表
  /// </summary>
  public sealed class C2SGuildMembersRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SGuildMembersRequest> _parser = new pb::MessageParser<C2SGuildMembersRequest>(() => new C2SGuildMembersRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SGuildMembersRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class GuildMember : pb::IMessage {
    private static readonly pb::MessageParser<GuildMember> _parser = new pb::MessageParser<GuildMember>(() => new GuildMember());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildMember> Parser { get { return _parser; } }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Head" field.</summary>
    public const int HeadFieldNumber = 4;
    private int head_;
    /// <summary>
    /// 头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Head {
      get { return head_; }
      set {
        head_ = value;
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 5;
    private int position_;
    /// <summary>
    /// 职位类型  1 会长   2 官员   0 会员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "LastOnlineTime" field.</summary>
    public const int LastOnlineTimeFieldNumber = 6;
    private int lastOnlineTime_;
    /// <summary>
    /// 最近在线时间距离当前时间  0 表示在线
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastOnlineTime {
      get { return lastOnlineTime_; }
      set {
        lastOnlineTime_ = value;
      }
    }

    /// <summary>Field number for the "NextSignRemainSeconds" field.</summary>
    public const int NextSignRemainSecondsFieldNumber = 7;
    private int nextSignRemainSeconds_;
    /// <summary>
    /// 下次签到剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextSignRemainSeconds {
      get { return nextSignRemainSeconds_; }
      set {
        nextSignRemainSeconds_ = value;
      }
    }

    /// <summary>Field number for the "JoinTime" field.</summary>
    public const int JoinTimeFieldNumber = 8;
    private int joinTime_;
    /// <summary>
    /// 加入时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JoinTime {
      get { return joinTime_; }
      set {
        joinTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (Head != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Head);
      }
      if (Position != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Position);
      }
      if (LastOnlineTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(LastOnlineTime);
      }
      if (NextSignRemainSeconds != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(NextSignRemainSeconds);
      }
      if (JoinTime != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(JoinTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Head != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Head);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      if (LastOnlineTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastOnlineTime);
      }
      if (NextSignRemainSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextSignRemainSeconds);
      }
      if (JoinTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JoinTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            Head = input.ReadInt32();
            break;
          }
          case 40: {
            Position = input.ReadInt32();
            break;
          }
          case 48: {
            LastOnlineTime = input.ReadInt32();
            break;
          }
          case 56: {
            NextSignRemainSeconds = input.ReadInt32();
            break;
          }
          case 64: {
            JoinTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CGuildMemebersResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CGuildMemebersResponse> _parser = new pb::MessageParser<S2CGuildMemebersResponse>(() => new S2CGuildMemebersResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGuildMemebersResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "Members" field.</summary>
    public const int MembersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.GuildMember> _repeated_members_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.ClientMessage.GuildMember.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.GuildMember> members_ = new pbc::RepeatedField<global::Msg.ClientMessage.GuildMember>();
    /// <summary>
    /// 成员列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.GuildMember> Members {
      get { return members_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      members_.WriteTo(output, _repeated_members_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += members_.CalculateSize(_repeated_members_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 公会申请列表
  /// </summary>
  public sealed class C2SGuildAskListRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SGuildAskListRequest> _parser = new pb::MessageParser<C2SGuildAskListRequest>(() => new C2SGuildAskListRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SGuildAskListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class S2CGuildAskListResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CGuildAskListResponse> _parser = new pb::MessageParser<S2CGuildAskListResponse>(() => new S2CGuildAskListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGuildAskListResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "AskList" field.</summary>
    public const int AskListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.PlayerInfo> _repeated_askList_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.ClientMessage.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.PlayerInfo> askList_ = new pbc::RepeatedField<global::Msg.ClientMessage.PlayerInfo>();
    /// <summary>
    /// 申请列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.PlayerInfo> AskList {
      get { return askList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      askList_.WriteTo(output, _repeated_askList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += askList_.CalculateSize(_repeated_askList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            askList_.AddEntriesFrom(input, _repeated_askList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 申请加入公会
  /// </summary>
  public sealed class C2SGuildAskJoinRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SGuildAskJoinRequest> _parser = new pb::MessageParser<C2SGuildAskJoinRequest>(() => new C2SGuildAskJoinRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SGuildAskJoinRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "GuildId" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private int guildId_;
    /// <summary>
    /// 公会ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GuildId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuildId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GuildId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CGuildAskJoinResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CGuildAskJoinResponse> _parser = new pb::MessageParser<S2CGuildAskJoinResponse>(() => new S2CGuildAskJoinResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGuildAskJoinResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "GuildId" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private int guildId_;
    /// <summary>
    /// 公会Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GuildId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuildId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GuildId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 同意加入公会
  /// </summary>
  public sealed class C2SGuildAgreeJoinRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SGuildAgreeJoinRequest> _parser = new pb::MessageParser<C2SGuildAgreeJoinRequest>(() => new C2SGuildAgreeJoinRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SGuildAgreeJoinRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "PlayerIds" field.</summary>
    public const int PlayerIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_playerIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> playerIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PlayerIds {
      get { return playerIds_; }
    }

    /// <summary>Field number for the "IsRefuse" field.</summary>
    public const int IsRefuseFieldNumber = 2;
    private bool isRefuse_;
    /// <summary>
    /// 是否拒绝
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRefuse {
      get { return isRefuse_; }
      set {
        isRefuse_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      playerIds_.WriteTo(output, _repeated_playerIds_codec);
      if (IsRefuse != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsRefuse);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerIds_.CalculateSize(_repeated_playerIds_codec);
      if (IsRefuse != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            playerIds_.AddEntriesFrom(input, _repeated_playerIds_codec);
            break;
          }
          case 16: {
            IsRefuse = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CGuildAgreeJoinResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CGuildAgreeJoinResponse> _parser = new pb::MessageParser<S2CGuildAgreeJoinResponse>(() => new S2CGuildAgreeJoinResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGuildAgreeJoinResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "IsRefuse" field.</summary>
    public const int IsRefuseFieldNumber = 2;
    private bool isRefuse_;
    /// <summary>
    ///map&lt;int32,int32> Player2Res				= 1; // key: 玩家ID      value: 结果( >0 成功   &lt;0 错误码)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRefuse {
      get { return isRefuse_; }
      set {
        isRefuse_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsRefuse != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsRefuse);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsRefuse != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            IsRefuse = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 公会同意加入通知
  /// </summary>
  public sealed class S2CGuildAgreeJoinNotify : pb::IMessage {
    private static readonly pb::MessageParser<S2CGuildAgreeJoinNotify> _parser = new pb::MessageParser<S2CGuildAgreeJoinNotify>(() => new S2CGuildAgreeJoinNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGuildAgreeJoinNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "NewMemberId" field.</summary>
    public const int NewMemberIdFieldNumber = 1;
    private int newMemberId_;
    /// <summary>
    /// 新会员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewMemberId {
      get { return newMemberId_; }
      set {
        newMemberId_ = value;
      }
    }

    /// <summary>Field number for the "GuildId" field.</summary>
    public const int GuildIdFieldNumber = 2;
    private int guildId_;
    /// <summary>
    /// 公会ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NewMemberId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NewMemberId);
      }
      if (GuildId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GuildId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NewMemberId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewMemberId);
      }
      if (GuildId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuildId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NewMemberId = input.ReadInt32();
            break;
          }
          case 16: {
            GuildId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 主动退出公会
  /// </summary>
  public sealed class C2SGuildQuitRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SGuildQuitRequest> _parser = new pb::MessageParser<C2SGuildQuitRequest>(() => new C2SGuildQuitRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SGuildQuitRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class S2CGuildQuitResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CGuildQuitResponse> _parser = new pb::MessageParser<S2CGuildQuitResponse>(() => new S2CGuildQuitResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGuildQuitResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "RejoinRemainSeconds" field.</summary>
    public const int RejoinRemainSecondsFieldNumber = 1;
    private int rejoinRemainSeconds_;
    /// <summary>
    /// 再次加入公会的剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RejoinRemainSeconds {
      get { return rejoinRemainSeconds_; }
      set {
        rejoinRemainSeconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RejoinRemainSeconds != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RejoinRemainSeconds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RejoinRemainSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RejoinRemainSeconds);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RejoinRemainSeconds = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 公会日志
  /// </summary>
  public sealed class C2SGuildLogsRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SGuildLogsRequest> _parser = new pb::MessageParser<C2SGuildLogsRequest>(() => new C2SGuildLogsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SGuildLogsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class GuildLog : pb::IMessage {
    private static readonly pb::MessageParser<GuildLog> _parser = new pb::MessageParser<GuildLog>(() => new GuildLog());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildLog> Parser { get { return _parser; } }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Time" field.</summary>
    public const int TimeFieldNumber = 2;
    private int time_;
    /// <summary>
    /// 记录时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    /// <summary>
    /// 类型   1 创建联盟  2 成员加入  3 成员脱离   4 成员被踢   5 成员被任命   6 成员被罢免   7 会长转让
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "PlayerId" field.</summary>
    public const int PlayerIdFieldNumber = 4;
    private int playerId_;
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "PlayerName" field.</summary>
    public const int PlayerNameFieldNumber = 5;
    private string playerName_ = "";
    /// <summary>
    /// 玩家名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Time != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Time);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (PlayerId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PlayerId);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PlayerName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Time = input.ReadInt32();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
          case 32: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 42: {
            PlayerName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CGuildLogsResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CGuildLogsResponse> _parser = new pb::MessageParser<S2CGuildLogsResponse>(() => new S2CGuildLogsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGuildLogsResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "Logs" field.</summary>
    public const int LogsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.GuildLog> _repeated_logs_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.ClientMessage.GuildLog.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.GuildLog> logs_ = new pbc::RepeatedField<global::Msg.ClientMessage.GuildLog>();
    /// <summary>
    /// 日志列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.GuildLog> Logs {
      get { return logs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      logs_.WriteTo(output, _repeated_logs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += logs_.CalculateSize(_repeated_logs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            logs_.AddEntriesFrom(input, _repeated_logs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 公会签到
  /// </summary>
  public sealed class C2SGuildSignInRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SGuildSignInRequest> _parser = new pb::MessageParser<C2SGuildSignInRequest>(() => new C2SGuildSignInRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SGuildSignInRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class S2CGuildSignInResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CGuildSignInResponse> _parser = new pb::MessageParser<S2CGuildSignInResponse>(() => new S2CGuildSignInResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGuildSignInResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "NextSignInRemainSeconds" field.</summary>
    public const int NextSignInRemainSecondsFieldNumber = 1;
    private int nextSignInRemainSeconds_;
    /// <summary>
    /// 下次签到剩余秒数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextSignInRemainSeconds {
      get { return nextSignInRemainSeconds_; }
      set {
        nextSignInRemainSeconds_ = value;
      }
    }

    /// <summary>Field number for the "RewardItems" field.</summary>
    public const int RewardItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_rewardItems_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> rewardItems_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 奖励  (id,num,id,num...)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RewardItems {
      get { return rewardItems_; }
    }

    /// <summary>Field number for the "GuildLevel" field.</summary>
    public const int GuildLevelFieldNumber = 3;
    private int guildLevel_;
    /// <summary>
    /// 公会等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuildLevel {
      get { return guildLevel_; }
      set {
        guildLevel_ = value;
      }
    }

    /// <summary>Field number for the "GuildExp" field.</summary>
    public const int GuildExpFieldNumber = 4;
    private int guildExp_;
    /// <summary>
    /// 公会经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuildExp {
      get { return guildExp_; }
      set {
        guildExp_ = value;
      }
    }

    /// <summary>Field number for the "IsLevelup" field.</summary>
    public const int IsLevelupFieldNumber = 5;
    private bool isLevelup_;
    /// <summary>
    /// 是否升级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLevelup {
      get { return isLevelup_; }
      set {
        isLevelup_ = value;
      }
    }

    /// <summary>Field number for the "MemberNumLimit" field.</summary>
    public const int MemberNumLimitFieldNumber = 6;
    private int memberNumLimit_;
    /// <summary>
    /// 公会最大人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MemberNumLimit {
      get { return memberNumLimit_; }
      set {
        memberNumLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NextSignInRemainSeconds != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NextSignInRemainSeconds);
      }
      rewardItems_.WriteTo(output, _repeated_rewardItems_codec);
      if (GuildLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GuildLevel);
      }
      if (GuildExp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(GuildExp);
      }
      if (IsLevelup != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsLevelup);
      }
      if (MemberNumLimit != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MemberNumLimit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NextSignInRemainSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextSignInRemainSeconds);
      }
      size += rewardItems_.CalculateSize(_repeated_rewardItems_codec);
      if (GuildLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuildLevel);
      }
      if (GuildExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuildExp);
      }
      if (IsLevelup != false) {
        size += 1 + 1;
      }
      if (MemberNumLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MemberNumLimit);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NextSignInRemainSeconds = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            rewardItems_.AddEntriesFrom(input, _repeated_rewardItems_codec);
            break;
          }
          case 24: {
            GuildLevel = input.ReadInt32();
            break;
          }
          case 32: {
            GuildExp = input.ReadInt32();
            break;
          }
          case 40: {
            IsLevelup = input.ReadBool();
            break;
          }
          case 48: {
            MemberNumLimit = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 公会任命或罢免官员
  /// </summary>
  public sealed class C2SGuildSetOfficerRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SGuildSetOfficerRequest> _parser = new pb::MessageParser<C2SGuildSetOfficerRequest>(() => new C2SGuildSetOfficerRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SGuildSetOfficerRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "PlayerIds" field.</summary>
    public const int PlayerIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_playerIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> playerIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PlayerIds {
      get { return playerIds_; }
    }

    /// <summary>Field number for the "SetType" field.</summary>
    public const int SetTypeFieldNumber = 2;
    private int setType_;
    /// <summary>
    /// 1 任命  2 罢免
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SetType {
      get { return setType_; }
      set {
        setType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      playerIds_.WriteTo(output, _repeated_playerIds_codec);
      if (SetType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SetType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerIds_.CalculateSize(_repeated_playerIds_codec);
      if (SetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SetType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            playerIds_.AddEntriesFrom(input, _repeated_playerIds_codec);
            break;
          }
          case 16: {
            SetType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CGuildSetOfficerResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CGuildSetOfficerResponse> _parser = new pb::MessageParser<S2CGuildSetOfficerResponse>(() => new S2CGuildSetOfficerResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGuildSetOfficerResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "PlayerIds" field.</summary>
    public const int PlayerIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_playerIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> playerIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PlayerIds {
      get { return playerIds_; }
    }

    /// <summary>Field number for the "SetType" field.</summary>
    public const int SetTypeFieldNumber = 2;
    private int setType_;
    /// <summary>
    /// 1 任命  2 罢免
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SetType {
      get { return setType_; }
      set {
        setType_ = value;
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 3;
    private int position_;
    /// <summary>
    /// 职位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      playerIds_.WriteTo(output, _repeated_playerIds_codec);
      if (SetType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SetType);
      }
      if (Position != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerIds_.CalculateSize(_repeated_playerIds_codec);
      if (SetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SetType);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            playerIds_.AddEntriesFrom(input, _repeated_playerIds_codec);
            break;
          }
          case 16: {
            SetType = input.ReadInt32();
            break;
          }
          case 24: {
            Position = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 公会任命罢免通知
  /// </summary>
  public sealed class S2CGuildSetOfficerNotify : pb::IMessage {
    private static readonly pb::MessageParser<S2CGuildSetOfficerNotify> _parser = new pb::MessageParser<S2CGuildSetOfficerNotify>(() => new S2CGuildSetOfficerNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGuildSetOfficerNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "MemberId" field.</summary>
    public const int MemberIdFieldNumber = 1;
    private int memberId_;
    /// <summary>
    /// 会员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MemberId {
      get { return memberId_; }
      set {
        memberId_ = value;
      }
    }

    /// <summary>Field number for the "SetType" field.</summary>
    public const int SetTypeFieldNumber = 2;
    private int setType_;
    /// <summary>
    /// 1 任命  2 罢免
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SetType {
      get { return setType_; }
      set {
        setType_ = value;
      }
    }

    /// <summary>Field number for the "NewPosition" field.</summary>
    public const int NewPositionFieldNumber = 3;
    private int newPosition_;
    /// <summary>
    /// 新职位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewPosition {
      get { return newPosition_; }
      set {
        newPosition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MemberId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MemberId);
      }
      if (SetType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SetType);
      }
      if (NewPosition != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NewPosition);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MemberId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MemberId);
      }
      if (SetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SetType);
      }
      if (NewPosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewPosition);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MemberId = input.ReadInt32();
            break;
          }
          case 16: {
            SetType = input.ReadInt32();
            break;
          }
          case 24: {
            NewPosition = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 公会驱逐会员
  /// </summary>
  public sealed class C2SGuildKickMemberRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SGuildKickMemberRequest> _parser = new pb::MessageParser<C2SGuildKickMemberRequest>(() => new C2SGuildKickMemberRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SGuildKickMemberRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "PlayerIds" field.</summary>
    public const int PlayerIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_playerIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> playerIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PlayerIds {
      get { return playerIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      playerIds_.WriteTo(output, _repeated_playerIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerIds_.CalculateSize(_repeated_playerIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            playerIds_.AddEntriesFrom(input, _repeated_playerIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class S2CGuildKickMemberResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CGuildKickMemberResponse> _parser = new pb::MessageParser<S2CGuildKickMemberResponse>(() => new S2CGuildKickMemberResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGuildKickMemberResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "PlayerIds" field.</summary>
    public const int PlayerIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_playerIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> playerIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PlayerIds {
      get { return playerIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      playerIds_.WriteTo(output, _repeated_playerIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerIds_.CalculateSize(_repeated_playerIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            playerIds_.AddEntriesFrom(input, _repeated_playerIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 公会驱逐会员通知
  /// </summary>
  public sealed class S2CGuildKickMemberNotify : pb::IMessage {
    private static readonly pb::MessageParser<S2CGuildKickMemberNotify> _parser = new pb::MessageParser<S2CGuildKickMemberNotify>(() => new S2CGuildKickMemberNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGuildKickMemberNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "MemberId" field.</summary>
    public const int MemberIdFieldNumber = 1;
    private int memberId_;
    /// <summary>
    /// 被驱逐会员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MemberId {
      get { return memberId_; }
      set {
        memberId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MemberId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MemberId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MemberId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MemberId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MemberId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 公会转让会长
  /// </summary>
  public sealed class C2SGuildChangePresidentRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SGuildChangePresidentRequest> _parser = new pb::MessageParser<C2SGuildChangePresidentRequest>(() => new C2SGuildChangePresidentRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SGuildChangePresidentRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "NewPresidentId" field.</summary>
    public const int NewPresidentIdFieldNumber = 1;
    private int newPresidentId_;
    /// <summary>
    /// 新会长ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewPresidentId {
      get { return newPresidentId_; }
      set {
        newPresidentId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NewPresidentId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NewPresidentId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NewPresidentId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewPresidentId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NewPresidentId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CGuildChangePresidentResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CGuildChangePresidentResponse> _parser = new pb::MessageParser<S2CGuildChangePresidentResponse>(() => new S2CGuildChangePresidentResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGuildChangePresidentResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "NewPresidentId" field.</summary>
    public const int NewPresidentIdFieldNumber = 1;
    private int newPresidentId_;
    /// <summary>
    /// 新会长ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewPresidentId {
      get { return newPresidentId_; }
      set {
        newPresidentId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NewPresidentId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NewPresidentId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NewPresidentId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewPresidentId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NewPresidentId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 公会转让会长通知
  /// </summary>
  public sealed class S2CGuildChangePresidentNotify : pb::IMessage {
    private static readonly pb::MessageParser<S2CGuildChangePresidentNotify> _parser = new pb::MessageParser<S2CGuildChangePresidentNotify>(() => new S2CGuildChangePresidentNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGuildChangePresidentNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "OldPresidentId" field.</summary>
    public const int OldPresidentIdFieldNumber = 1;
    private int oldPresidentId_;
    /// <summary>
    /// 原会长
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OldPresidentId {
      get { return oldPresidentId_; }
      set {
        oldPresidentId_ = value;
      }
    }

    /// <summary>Field number for the "NewPresidentId" field.</summary>
    public const int NewPresidentIdFieldNumber = 2;
    private int newPresidentId_;
    /// <summary>
    /// 新会长
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewPresidentId {
      get { return newPresidentId_; }
      set {
        newPresidentId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OldPresidentId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OldPresidentId);
      }
      if (NewPresidentId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NewPresidentId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OldPresidentId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OldPresidentId);
      }
      if (NewPresidentId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewPresidentId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OldPresidentId = input.ReadInt32();
            break;
          }
          case 16: {
            NewPresidentId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 公会招募
  /// </summary>
  public sealed class C2SGuildRecruitRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SGuildRecruitRequest> _parser = new pb::MessageParser<C2SGuildRecruitRequest>(() => new C2SGuildRecruitRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SGuildRecruitRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 1;
    private pb::ByteString content_ = pb::ByteString.Empty;
    /// <summary>
    /// 内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Content.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Content);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Content = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CGuildRecruitResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CGuildRecruitResponse> _parser = new pb::MessageParser<S2CGuildRecruitResponse>(() => new S2CGuildRecruitResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGuildRecruitResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 1;
    private pb::ByteString content_ = pb::ByteString.Empty;
    /// <summary>
    /// 内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Content.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Content);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Content = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 公会请求捐赠
  /// </summary>
  public sealed class C2SGuildAskDonateRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SGuildAskDonateRequest> _parser = new pb::MessageParser<C2SGuildAskDonateRequest>(() => new C2SGuildAskDonateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SGuildAskDonateRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "ItemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    /// <summary>
    /// 碎片ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "ItemNum" field.</summary>
    public const int ItemNumFieldNumber = 2;
    private int itemNum_;
    /// <summary>
    /// 碎片数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemNum {
      get { return itemNum_; }
      set {
        itemNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (ItemNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (ItemNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 16: {
            ItemNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CGuildAskDonateResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CGuildAskDonateResponse> _parser = new pb::MessageParser<S2CGuildAskDonateResponse>(() => new S2CGuildAskDonateResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGuildAskDonateResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "ItemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "ItemNum" field.</summary>
    public const int ItemNumFieldNumber = 2;
    private int itemNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemNum {
      get { return itemNum_; }
      set {
        itemNum_ = value;
      }
    }

    /// <summary>Field number for the "NextAskRemainSeconds" field.</summary>
    public const int NextAskRemainSecondsFieldNumber = 3;
    private int nextAskRemainSeconds_;
    /// <summary>
    /// 下次剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextAskRemainSeconds {
      get { return nextAskRemainSeconds_; }
      set {
        nextAskRemainSeconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (ItemNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemNum);
      }
      if (NextAskRemainSeconds != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NextAskRemainSeconds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (ItemNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemNum);
      }
      if (NextAskRemainSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextAskRemainSeconds);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 16: {
            ItemNum = input.ReadInt32();
            break;
          }
          case 24: {
            NextAskRemainSeconds = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 公会捐赠
  /// </summary>
  public sealed class C2SGuildDonateRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SGuildDonateRequest> _parser = new pb::MessageParser<C2SGuildDonateRequest>(() => new C2SGuildDonateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SGuildDonateRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "PlayerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private int playerId_;
    /// <summary>
    /// 被捐赠玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "ItemId" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private int itemId_;
    /// <summary>
    /// 碎片ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "ItemNum" field.</summary>
    public const int ItemNumFieldNumber = 3;
    private int itemNum_;
    /// <summary>
    /// 碎片数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemNum {
      get { return itemNum_; }
      set {
        itemNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (ItemId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemId);
      }
      if (ItemNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ItemNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (ItemNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            ItemId = input.ReadInt32();
            break;
          }
          case 24: {
            ItemNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CGuildDonateResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CGuildDonateResponse> _parser = new pb::MessageParser<S2CGuildDonateResponse>(() => new S2CGuildDonateResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGuildDonateResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "PlayerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private int playerId_;
    /// <summary>
    /// 被捐赠玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "ItemId" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private int itemId_;
    /// <summary>
    /// 碎片
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "ItemNum" field.</summary>
    public const int ItemNumFieldNumber = 3;
    private int itemNum_;
    /// <summary>
    /// 碎片数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemNum {
      get { return itemNum_; }
      set {
        itemNum_ = value;
      }
    }

    /// <summary>Field number for the "DonateNum" field.</summary>
    public const int DonateNumFieldNumber = 4;
    private int donateNum_;
    /// <summary>
    /// 已捐赠数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DonateNum {
      get { return donateNum_; }
      set {
        donateNum_ = value;
      }
    }

    /// <summary>Field number for the "DonateOver" field.</summary>
    public const int DonateOverFieldNumber = 5;
    private bool donateOver_;
    /// <summary>
    /// 是否捐赠完毕
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DonateOver {
      get { return donateOver_; }
      set {
        donateOver_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (ItemId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemId);
      }
      if (ItemNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ItemNum);
      }
      if (DonateNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DonateNum);
      }
      if (DonateOver != false) {
        output.WriteRawTag(40);
        output.WriteBool(DonateOver);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (ItemNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemNum);
      }
      if (DonateNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DonateNum);
      }
      if (DonateOver != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            ItemId = input.ReadInt32();
            break;
          }
          case 24: {
            ItemNum = input.ReadInt32();
            break;
          }
          case 32: {
            DonateNum = input.ReadInt32();
            break;
          }
          case 40: {
            DonateOver = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 公会通知请求捐赠成员物品更新
  /// </summary>
  public sealed class S2CGuildDonateItemNotify : pb::IMessage {
    private static readonly pb::MessageParser<S2CGuildDonateItemNotify> _parser = new pb::MessageParser<S2CGuildDonateItemNotify>(() => new S2CGuildDonateItemNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGuildDonateItemNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "ItemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    /// <summary>
    /// 物品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "ItemNum" field.</summary>
    public const int ItemNumFieldNumber = 2;
    private int itemNum_;
    /// <summary>
    /// 物品总数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemNum {
      get { return itemNum_; }
      set {
        itemNum_ = value;
      }
    }

    /// <summary>Field number for the "DonateOver" field.</summary>
    public const int DonateOverFieldNumber = 3;
    private bool donateOver_;
    /// <summary>
    /// 是否捐赠完毕
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DonateOver {
      get { return donateOver_; }
      set {
        donateOver_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (ItemNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemNum);
      }
      if (DonateOver != false) {
        output.WriteRawTag(24);
        output.WriteBool(DonateOver);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (ItemNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemNum);
      }
      if (DonateOver != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 16: {
            ItemNum = input.ReadInt32();
            break;
          }
          case 24: {
            DonateOver = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 公会捐赠列表
  /// </summary>
  public sealed class C2SGuildDonateListRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SGuildDonateListRequest> _parser = new pb::MessageParser<C2SGuildDonateListRequest>(() => new C2SGuildDonateListRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SGuildDonateListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 请求捐赠玩家信息
  /// </summary>
  public sealed class GuildAskDonateInfo : pb::IMessage {
    private static readonly pb::MessageParser<GuildAskDonateInfo> _parser = new pb::MessageParser<GuildAskDonateInfo>(() => new GuildAskDonateInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildAskDonateInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "PlayerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private int playerId_;
    /// <summary>
    /// ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "PlayerName" field.</summary>
    public const int PlayerNameFieldNumber = 2;
    private string playerName_ = "";
    /// <summary>
    /// 名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PlayerHead" field.</summary>
    public const int PlayerHeadFieldNumber = 3;
    private int playerHead_;
    /// <summary>
    /// 头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerHead {
      get { return playerHead_; }
      set {
        playerHead_ = value;
      }
    }

    /// <summary>Field number for the "PlayerLevel" field.</summary>
    public const int PlayerLevelFieldNumber = 4;
    private int playerLevel_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerLevel {
      get { return playerLevel_; }
      set {
        playerLevel_ = value;
      }
    }

    /// <summary>Field number for the "ItemId" field.</summary>
    public const int ItemIdFieldNumber = 5;
    private int itemId_;
    /// <summary>
    /// 捐赠物品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "ItemNum" field.</summary>
    public const int ItemNumFieldNumber = 6;
    private int itemNum_;
    /// <summary>
    /// 已接受捐赠数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemNum {
      get { return itemNum_; }
      set {
        itemNum_ = value;
      }
    }

    /// <summary>Field number for the "AskTime" field.</summary>
    public const int AskTimeFieldNumber = 7;
    private int askTime_;
    /// <summary>
    /// 请求时间 可以用于排序
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AskTime {
      get { return askTime_; }
      set {
        askTime_ = value;
      }
    }

    /// <summary>Field number for the "RemainExistSeconds" field.</summary>
    public const int RemainExistSecondsFieldNumber = 8;
    private int remainExistSeconds_;
    /// <summary>
    /// 剩余存在时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainExistSeconds {
      get { return remainExistSeconds_; }
      set {
        remainExistSeconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerName);
      }
      if (PlayerHead != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlayerHead);
      }
      if (PlayerLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PlayerLevel);
      }
      if (ItemId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ItemId);
      }
      if (ItemNum != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ItemNum);
      }
      if (AskTime != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(AskTime);
      }
      if (RemainExistSeconds != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RemainExistSeconds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (PlayerHead != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerHead);
      }
      if (PlayerLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerLevel);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (ItemNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemNum);
      }
      if (AskTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AskTime);
      }
      if (RemainExistSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainExistSeconds);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 18: {
            PlayerName = input.ReadString();
            break;
          }
          case 24: {
            PlayerHead = input.ReadInt32();
            break;
          }
          case 32: {
            PlayerLevel = input.ReadInt32();
            break;
          }
          case 40: {
            ItemId = input.ReadInt32();
            break;
          }
          case 48: {
            ItemNum = input.ReadInt32();
            break;
          }
          case 56: {
            AskTime = input.ReadInt32();
            break;
          }
          case 64: {
            RemainExistSeconds = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CGuildDonateListResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CGuildDonateListResponse> _parser = new pb::MessageParser<S2CGuildDonateListResponse>(() => new S2CGuildDonateListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGuildDonateListResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "InfoList" field.</summary>
    public const int InfoListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.GuildAskDonateInfo> _repeated_infoList_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.ClientMessage.GuildAskDonateInfo.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.GuildAskDonateInfo> infoList_ = new pbc::RepeatedField<global::Msg.ClientMessage.GuildAskDonateInfo>();
    /// <summary>
    /// 请求捐赠列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.GuildAskDonateInfo> InfoList {
      get { return infoList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      infoList_.WriteTo(output, _repeated_infoList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += infoList_.CalculateSize(_repeated_infoList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            infoList_.AddEntriesFrom(input, _repeated_infoList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 公会副本数据
  /// </summary>
  public sealed class C2SGuildStageDataRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SGuildStageDataRequest> _parser = new pb::MessageParser<C2SGuildStageDataRequest>(() => new C2SGuildStageDataRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SGuildStageDataRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class S2CGuildStageDataResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CGuildStageDataResponse> _parser = new pb::MessageParser<S2CGuildStageDataResponse>(() => new S2CGuildStageDataResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGuildStageDataResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "CurrBossId" field.</summary>
    public const int CurrBossIdFieldNumber = 1;
    private int currBossId_;
    /// <summary>
    /// 当前公会副本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrBossId {
      get { return currBossId_; }
      set {
        currBossId_ = value;
      }
    }

    /// <summary>Field number for the "HpPercent" field.</summary>
    public const int HpPercentFieldNumber = 2;
    private int hpPercent_;
    /// <summary>
    /// 副本BOSS血量百分比
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HpPercent {
      get { return hpPercent_; }
      set {
        hpPercent_ = value;
      }
    }

    /// <summary>Field number for the "RespawnNum" field.</summary>
    public const int RespawnNumFieldNumber = 3;
    private int respawnNum_;
    /// <summary>
    /// 已复活次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RespawnNum {
      get { return respawnNum_; }
      set {
        respawnNum_ = value;
      }
    }

    /// <summary>Field number for the "TotalRespawnNum" field.</summary>
    public const int TotalRespawnNumFieldNumber = 4;
    private int totalRespawnNum_;
    /// <summary>
    /// 总复活次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalRespawnNum {
      get { return totalRespawnNum_; }
      set {
        totalRespawnNum_ = value;
      }
    }

    /// <summary>Field number for the "RefreshRemainSeconds" field.</summary>
    public const int RefreshRemainSecondsFieldNumber = 5;
    private int refreshRemainSeconds_;
    /// <summary>
    /// 刷新剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RefreshRemainSeconds {
      get { return refreshRemainSeconds_; }
      set {
        refreshRemainSeconds_ = value;
      }
    }

    /// <summary>Field number for the "StageState" field.</summary>
    public const int StageStateFieldNumber = 6;
    private int stageState_;
    /// <summary>
    /// 挑战状态            0 可挑战  1 等待复活
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StageState {
      get { return stageState_; }
      set {
        stageState_ = value;
      }
    }

    /// <summary>Field number for the "RespawnNeedCost" field.</summary>
    public const int RespawnNeedCostFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_respawnNeedCost_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> respawnNeedCost_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 复活需要钻石数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RespawnNeedCost {
      get { return respawnNeedCost_; }
    }

    /// <summary>Field number for the "CanResetRemainSeconds" field.</summary>
    public const int CanResetRemainSecondsFieldNumber = 8;
    private int canResetRemainSeconds_;
    /// <summary>
    /// 可重置剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanResetRemainSeconds {
      get { return canResetRemainSeconds_; }
      set {
        canResetRemainSeconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrBossId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrBossId);
      }
      if (HpPercent != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HpPercent);
      }
      if (RespawnNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RespawnNum);
      }
      if (TotalRespawnNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalRespawnNum);
      }
      if (RefreshRemainSeconds != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RefreshRemainSeconds);
      }
      if (StageState != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(StageState);
      }
      respawnNeedCost_.WriteTo(output, _repeated_respawnNeedCost_codec);
      if (CanResetRemainSeconds != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CanResetRemainSeconds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrBossId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrBossId);
      }
      if (HpPercent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HpPercent);
      }
      if (RespawnNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RespawnNum);
      }
      if (TotalRespawnNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalRespawnNum);
      }
      if (RefreshRemainSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefreshRemainSeconds);
      }
      if (StageState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StageState);
      }
      size += respawnNeedCost_.CalculateSize(_repeated_respawnNeedCost_codec);
      if (CanResetRemainSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanResetRemainSeconds);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurrBossId = input.ReadInt32();
            break;
          }
          case 16: {
            HpPercent = input.ReadInt32();
            break;
          }
          case 24: {
            RespawnNum = input.ReadInt32();
            break;
          }
          case 32: {
            TotalRespawnNum = input.ReadInt32();
            break;
          }
          case 40: {
            RefreshRemainSeconds = input.ReadInt32();
            break;
          }
          case 48: {
            StageState = input.ReadInt32();
            break;
          }
          case 58:
          case 56: {
            respawnNeedCost_.AddEntriesFrom(input, _repeated_respawnNeedCost_codec);
            break;
          }
          case 64: {
            CanResetRemainSeconds = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 公会副本排行榜
  /// </summary>
  public sealed class C2SGuildStageRankListRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SGuildStageRankListRequest> _parser = new pb::MessageParser<C2SGuildStageRankListRequest>(() => new C2SGuildStageRankListRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SGuildStageRankListRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "BossId" field.</summary>
    public const int BossIdFieldNumber = 1;
    private int bossId_;
    /// <summary>
    /// 公会副本ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BossId {
      get { return bossId_; }
      set {
        bossId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BossId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BossId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BossId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BossId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BossId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 公会副本伤害列表项
  /// </summary>
  public sealed class GuildStageDamageItem : pb::IMessage {
    private static readonly pb::MessageParser<GuildStageDamageItem> _parser = new pb::MessageParser<GuildStageDamageItem>(() => new GuildStageDamageItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildStageDamageItem> Parser { get { return _parser; } }

    /// <summary>Field number for the "Rank" field.</summary>
    public const int RankFieldNumber = 1;
    private int rank_;
    /// <summary>
    /// 排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "MemberId" field.</summary>
    public const int MemberIdFieldNumber = 2;
    private int memberId_;
    /// <summary>
    /// 成员ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MemberId {
      get { return memberId_; }
      set {
        memberId_ = value;
      }
    }

    /// <summary>Field number for the "MemberName" field.</summary>
    public const int MemberNameFieldNumber = 3;
    private string memberName_ = "";
    /// <summary>
    /// 成员名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MemberName {
      get { return memberName_; }
      set {
        memberName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 4;
    private int level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Head" field.</summary>
    public const int HeadFieldNumber = 5;
    private int head_;
    /// <summary>
    /// 头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Head {
      get { return head_; }
      set {
        head_ = value;
      }
    }

    /// <summary>Field number for the "Damage" field.</summary>
    public const int DamageFieldNumber = 6;
    private int damage_;
    /// <summary>
    /// 伤害
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rank != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Rank);
      }
      if (MemberId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MemberId);
      }
      if (MemberName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MemberName);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      if (Head != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Head);
      }
      if (Damage != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Damage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (MemberId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MemberId);
      }
      if (MemberName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MemberName);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Head != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Head);
      }
      if (Damage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Rank = input.ReadInt32();
            break;
          }
          case 16: {
            MemberId = input.ReadInt32();
            break;
          }
          case 26: {
            MemberName = input.ReadString();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
          case 40: {
            Head = input.ReadInt32();
            break;
          }
          case 48: {
            Damage = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class S2CGuildStageRankListResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CGuildStageRankListResponse> _parser = new pb::MessageParser<S2CGuildStageRankListResponse>(() => new S2CGuildStageRankListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGuildStageRankListResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "BossId" field.</summary>
    public const int BossIdFieldNumber = 1;
    private int bossId_;
    /// <summary>
    /// 公会副本ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BossId {
      get { return bossId_; }
      set {
        bossId_ = value;
      }
    }

    /// <summary>Field number for the "DmgList" field.</summary>
    public const int DmgListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Msg.ClientMessage.GuildStageDamageItem> _repeated_dmgList_codec
        = pb::FieldCodec.ForMessage(18, global::Msg.ClientMessage.GuildStageDamageItem.Parser);
    private readonly pbc::RepeatedField<global::Msg.ClientMessage.GuildStageDamageItem> dmgList_ = new pbc::RepeatedField<global::Msg.ClientMessage.GuildStageDamageItem>();
    /// <summary>
    /// 伤害列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.ClientMessage.GuildStageDamageItem> DmgList {
      get { return dmgList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BossId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BossId);
      }
      dmgList_.WriteTo(output, _repeated_dmgList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BossId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BossId);
      }
      size += dmgList_.CalculateSize(_repeated_dmgList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BossId = input.ReadInt32();
            break;
          }
          case 18: {
            dmgList_.AddEntriesFrom(input, _repeated_dmgList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 公会副本玩家复活
  /// </summary>
  public sealed class C2SGuildStagePlayerRespawnRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SGuildStagePlayerRespawnRequest> _parser = new pb::MessageParser<C2SGuildStagePlayerRespawnRequest>(() => new C2SGuildStagePlayerRespawnRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SGuildStagePlayerRespawnRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class S2CGuildStagePlayerRespawnResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CGuildStagePlayerRespawnResponse> _parser = new pb::MessageParser<S2CGuildStagePlayerRespawnResponse>(() => new S2CGuildStagePlayerRespawnResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGuildStagePlayerRespawnResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "RemainRespawnNum" field.</summary>
    public const int RemainRespawnNumFieldNumber = 1;
    private int remainRespawnNum_;
    /// <summary>
    /// 剩余复活次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainRespawnNum {
      get { return remainRespawnNum_; }
      set {
        remainRespawnNum_ = value;
      }
    }

    /// <summary>Field number for the "CostDiamond" field.</summary>
    public const int CostDiamondFieldNumber = 2;
    private int costDiamond_;
    /// <summary>
    /// 花费钻石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CostDiamond {
      get { return costDiamond_; }
      set {
        costDiamond_ = value;
      }
    }

    /// <summary>Field number for the "NextCost" field.</summary>
    public const int NextCostFieldNumber = 3;
    private int nextCost_;
    /// <summary>
    /// 下一次花费
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextCost {
      get { return nextCost_; }
      set {
        nextCost_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RemainRespawnNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RemainRespawnNum);
      }
      if (CostDiamond != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CostDiamond);
      }
      if (NextCost != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NextCost);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RemainRespawnNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainRespawnNum);
      }
      if (CostDiamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CostDiamond);
      }
      if (NextCost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextCost);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RemainRespawnNum = input.ReadInt32();
            break;
          }
          case 16: {
            CostDiamond = input.ReadInt32();
            break;
          }
          case 24: {
            NextCost = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 公会副本重置
  /// </summary>
  public sealed class C2SGuildStageResetRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2SGuildStageResetRequest> _parser = new pb::MessageParser<C2SGuildStageResetRequest>(() => new C2SGuildStageResetRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SGuildStageResetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class S2CGuildStageResetResponse : pb::IMessage {
    private static readonly pb::MessageParser<S2CGuildStageResetResponse> _parser = new pb::MessageParser<S2CGuildStageResetResponse>(() => new S2CGuildStageResetResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGuildStageResetResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "NextResetRemainSeconds" field.</summary>
    public const int NextResetRemainSecondsFieldNumber = 1;
    private int nextResetRemainSeconds_;
    /// <summary>
    /// 下一次重置剩余秒数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextResetRemainSeconds {
      get { return nextResetRemainSeconds_; }
      set {
        nextResetRemainSeconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NextResetRemainSeconds != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NextResetRemainSeconds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NextResetRemainSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextResetRemainSeconds);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NextResetRemainSeconds = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 公会副本重置通知
  /// </summary>
  public sealed class S2CGuildStageResetNotify : pb::IMessage {
    private static readonly pb::MessageParser<S2CGuildStageResetNotify> _parser = new pb::MessageParser<S2CGuildStageResetNotify>(() => new S2CGuildStageResetNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGuildStageResetNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "NextResetRemainSeconds" field.</summary>
    public const int NextResetRemainSecondsFieldNumber = 1;
    private int nextResetRemainSeconds_;
    /// <summary>
    /// 下一次重置剩余秒数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextResetRemainSeconds {
      get { return nextResetRemainSeconds_; }
      set {
        nextResetRemainSeconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NextResetRemainSeconds != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NextResetRemainSeconds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NextResetRemainSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextResetRemainSeconds);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NextResetRemainSeconds = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 公会副本数据自动刷新
  /// </summary>
  public sealed class S2CGuildStageAutoRefreshNotify : pb::IMessage {
    private static readonly pb::MessageParser<S2CGuildStageAutoRefreshNotify> _parser = new pb::MessageParser<S2CGuildStageAutoRefreshNotify>(() => new S2CGuildStageAutoRefreshNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGuildStageAutoRefreshNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "NextRefreshRemainSeconds" field.</summary>
    public const int NextRefreshRemainSecondsFieldNumber = 1;
    private int nextRefreshRemainSeconds_;
    /// <summary>
    /// 下一次自动刷新剩余秒数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextRefreshRemainSeconds {
      get { return nextRefreshRemainSeconds_; }
      set {
        nextRefreshRemainSeconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NextRefreshRemainSeconds != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NextRefreshRemainSeconds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NextRefreshRemainSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextRefreshRemainSeconds);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NextRefreshRemainSeconds = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
